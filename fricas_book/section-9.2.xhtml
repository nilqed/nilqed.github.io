<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section9.2</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-9.1.xhtml" style="margin-right: 10px;">Previous Section 9.1 AssociationList</a><a href="section-9.3.xhtml" style="margin-right: 10px;">Next Section 9.3 BasicOperator</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-9.2">
<h2 class="sectiontitle">9.2  BalancedBinaryTree</h2>


<a name="BalancedBinaryTreeXmpPage" class="label"/>


<p><span class="teletype">BalancedBinaryTrees(S)</span> is the domain of balanced binary trees
with elements of type <span class="teletype">S</span> at the nodes.  A binary tree is either
<span class="teletype">empty</span> or else consists of a <span class="teletype">node</span> having a <span class="teletype">value</span> and
two branches, each branch a binary tree.  A balanced binary tree is
one that is balanced with respect its leaves.  One with  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow></mstyle></math> leaves
is perfectly <span class="italic">balanced</span>: the tree has minimum depth, and the <span class="teletype">left</span> and <span class="teletype">right</span> branch of every interior node is identical in
shape.
</p>


<p>Balanced binary trees are useful in algebraic computation for
so-called <span class="italic">divide-and-conquer</span> algorithms.  Conceptually, the data
for a problem is initially placed at the root of the tree.  The
original data is then split into two subproblems, one for each
subtree.  And so on.  Eventually, the problem is solved at the leaves
of the tree.  A solution to the original problem is obtained by some
mechanism that can reassemble the pieces.  In fact, an implementation
of the Chinese Remainder Algorithm using balanced binary trees was
first proposed by David Y. Y.  Yun at the IBM T. J.  Watson Research
Center in Yorktown Heights, New York, in 1978.  It served as the
prototype for polymorphic algorithms in FriCAS.
</p>


<p>In what follows, rather than perform a series of computations with a
single expression, the expression is reduced modulo a number of
integer primes, a computation is done with modular arithmetic for each
prime, and the Chinese Remainder Algorithm is used to obtain the
answer to the original problem.  We illustrate this principle with the
computation of  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mn>12</mn><mn>2</mn></msup><mo>=</mo><mn>144</mn></mrow></mstyle></math>.
</p>


<p>A list of moduli.
</p>




<div id="spadComm9-11" class="spadComm" >
<form id="formComm9-11" action="javascript:makeRequest('9-11');" >
<input id="comm9-11" type="text" class="command" style="width: 11em;" value="lm := [3,5,7,11]" />
</form>
<span id="commSav9-11" class="commSav" >lm := [3,5,7,11]</span>
<div id="mathAns9-11" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>11</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>The expression <span class="teletype">modTree(n, lm)</span> creates a balanced binary tree
with leaf values <span class="teletype">n mod m</span> for each modulus <span class="teletype">m</span> in <span class="teletype">lm</span>.
</p>




<div id="spadComm9-12" class="spadComm" >
<form id="formComm9-12" action="javascript:makeRequest('9-12');" >
<input id="comm9-12" type="text" class="command" style="width: 10em;" value="modTree(12,lm)" />
</form>
<span id="commSav9-12" class="commSav" >modTree(12,lm)</span>
<div id="mathAns9-12" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>0</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>1</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>Operation <span class="teletype">modTree</span> does this using operations on balanced binary
trees.  We trace its steps.  Create a balanced binary tree <span class="teletype">t</span> of
zeros with four leaves.
</p>




<div id="spadComm9-13" class="spadComm" >
<form id="formComm9-13" action="javascript:makeRequest('9-13');" >
<input id="comm9-13" type="text" class="command" style="width: 22em;" value="t := balancedBinaryTree( #lm, 0)" />
</form>
<span id="commSav9-13" class="commSav" >t := balancedBinaryTree( #lm, 0)</span>
<div id="mathAns9-13" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mo>[</mo><mn>0</mn><mo>,</mo><mn>0</mn><mo>,</mo><mn>0</mn><mo>]</mo></mrow><mo>,</mo><mn>0</mn><mo>,</mo><mrow><mo>[</mo><mn>0</mn><mo>,</mo><mn>0</mn><mo>,</mo><mn>0</mn><mo>]</mo></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: BalancedBinaryTree NonNegativeInteger
</div>



<p>The leaves of the tree are set to the individual moduli.
</p>




<div id="spadComm9-14" class="spadComm" >
<form id="formComm9-14" action="javascript:makeRequest('9-14');" >
<input id="comm9-14" type="text" class="command" style="width: 11em;" value="setleaves!(t,lm)" />
</form>
<span id="commSav9-14" class="commSav" >setleaves!(t,lm)</span>
<div id="mathAns9-14" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mo>[</mo><mn>3</mn><mo>,</mo><mn>0</mn><mo>,</mo><mn>5</mn><mo>]</mo></mrow><mo>,</mo><mn>0</mn><mo>,</mo><mrow><mo>[</mo><mn>7</mn><mo>,</mo><mn>0</mn><mo>,</mo><mn>11</mn><mo>]</mo></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: BalancedBinaryTree NonNegativeInteger
</div>



<p>Use <span class="teletype">mapUp!</span> to do a bottom-up traversal of <span class="teletype">t</span>, setting each
interior node to the product of the values at the nodes of its
children.
</p>




<div id="spadComm9-15" class="spadComm" >
<form id="formComm9-15" action="javascript:makeRequest('9-15');" >
<input id="comm9-15" type="text" class="command" style="width: 9em;" value="mapUp!(t,_*)" />
</form>
<span id="commSav9-15" class="commSav" >mapUp!(t,_*)</span>
<div id="mathAns9-15" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1155</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>The value at the node of every subtree is the product of the moduli
of the leaves of the subtree.
</p>




<div id="spadComm9-16" class="spadComm" >
<form id="formComm9-16" action="javascript:makeRequest('9-16');" >
<input id="comm9-16" type="text" class="command" style="width: 1em;" value="t" />
</form>
<span id="commSav9-16" class="commSav" >t</span>
<div id="mathAns9-16" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mo>[</mo><mn>3</mn><mo>,</mo><mn>15</mn><mo>,</mo><mn>5</mn><mo>]</mo></mrow><mo>,</mo><mn>1155</mn><mo>,</mo><mrow><mo>[</mo><mn>7</mn><mo>,</mo><mn>77</mn><mo>,</mo><mn>11</mn><mo>]</mo></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: BalancedBinaryTree NonNegativeInteger
</div>



<p>Operation <span class="teletype">mapDown!</span><span class="teletype">(t,a,fn)</span> replaces the value <span class="teletype">v</span> at
each node of <span class="teletype">t</span> by <span class="teletype">fn(a,v)</span>.
</p>




<div id="spadComm9-17" class="spadComm" >
<form id="formComm9-17" action="javascript:makeRequest('9-17');" >
<input id="comm9-17" type="text" class="command" style="width: 14em;" value="mapDown!(t,12,_rem)" />
</form>
<span id="commSav9-17" class="commSav" >mapDown!(t,12,_rem)</span>
<div id="mathAns9-17" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mo>[</mo><mn>0</mn><mo>,</mo><mn>12</mn><mo>,</mo><mn>2</mn><mo>]</mo></mrow><mo>,</mo><mn>12</mn><mo>,</mo><mrow><mo>[</mo><mn>5</mn><mo>,</mo><mn>12</mn><mo>,</mo><mn>1</mn><mo>]</mo></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: BalancedBinaryTree NonNegativeInteger
</div>



<p>The operation <span class="teletype">leaves</span> returns the leaves of the resulting tree.
In this case, it returns the list of <span class="teletype">12 mod m</span> for each modulus
<span class="teletype">m</span>.
</p>




<div id="spadComm9-18" class="spadComm" >
<form id="formComm9-18" action="javascript:makeRequest('9-18');" >
<input id="comm9-18" type="text" class="command" style="width: 6em;" value="leaves %" />
</form>
<span id="commSav9-18" class="commSav" >leaves %</span>
<div id="mathAns9-18" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>0</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>1</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List NonNegativeInteger
</div>



<p>Compute the square of the images of <span class="teletype">12</span> modulo each <span class="teletype">m</span>.
</p>




<div id="spadComm9-19" class="spadComm" >
<form id="formComm9-19" action="javascript:makeRequest('9-19');" >
<input id="comm9-19" type="text" class="command" style="width: 32em;" value="squares := [x^2 rem m for x in % for m in lm]" />
</form>
<span id="commSav9-19" class="commSav" >squares := [x^2 rem m for x in % for m in lm]</span>
<div id="mathAns9-19" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>0</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>1</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List NonNegativeInteger
</div>



<p>Call the Chinese Remainder Algorithm to get the answer for  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mn>12</mn><mn>2</mn></msup></mrow></mstyle></math>.
</p>




<div id="spadComm9-20" class="spadComm" >
<form id="formComm9-20" action="javascript:makeRequest('9-20');" >
<input id="comm9-20" type="text" class="command" style="width: 16em;" value="chineseRemainder(%,lm)" />
</form>
<span id="commSav9-20" class="commSav" >chineseRemainder(%,lm)</span>
<div id="mathAns9-20" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>144</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-9.1.xhtml" style="margin-right: 10px;">Previous Section 9.1 AssociationList</a><a href="section-9.3.xhtml" style="margin-right: 10px;">Next Section 9.3 BasicOperator</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>