<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section8.11</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-8.10.xhtml" style="margin-right: 10px;">Previous Section 8.10 Solution of Differential Equations</a><a href="section-8.12.xhtml" style="margin-right: 10px;">Next Section 8.12 Primary Decomposition of Ideals</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-8.11">
<h2 class="sectiontitle">8.11  Finite Fields</h2>


<a name="ugProblemFinite" class="label"/>


<p>A <span class="italic">finite field</span> (also called a <span class="italic">Galois field</span>) is a finite
algebraic structure where one can add, multiply and divide under the
same laws (for example, commutativity, associativity or
distributivity) as apply to the rational, real or complex numbers.
Unlike those three fields, for any finite field there exists a
positive prime integer  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>p</mi></mstyle></math>, called the <span style="font-weight: bold;"> characteristic</span>, such that
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>p</mi><mi>x</mi><mo>=</mo><mn>0</mn></mrow></mstyle></math> for any element  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> in the finite field.  In fact, the
number of elements in a finite field is a power of the characteristic
and for each prime  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>p</mi></mstyle></math> and positive integer  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> there exists exactly
one finite field with  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mi>p</mi><mi>n</mi></msup></mrow></mstyle></math> elements, up to isomorphism.<span class="footnote"> For
more information about the algebraic structure and properties of
finite fields, see, for example,<br/>
 S.  Lang, <span class="italic">Algebra</span>, Second
Edition, New York: Addison-Wesley Publishing Company, Inc., 1984, ISBN
0 201 05487 6;<br/> or<br/>
 R.  Lidl, H.  Niederreiter, <span class="italic">Finite Fields</span>,
Encyclopedia of Mathematics and Its Applications, Vol.  20, Cambridge:
Cambridge Univ.  Press, 1983, ISBN 0 521 30240 4.</span>
</p>


<p>When  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>=</mo><mn>1</mn><mo>,</mo></mrow></mstyle></math> the field has  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>p</mi></mstyle></math> elements and is called a <span class="italic">prime
field</span>, discussed in the next section.  There are several ways of
implementing extensions of finite fields, and FriCAS provides quite a
bit of freedom to allow you to choose the one that is best for your
application.  Moreover, we provide operations for converting among the
different representations of extensions and different extensions of a
single field.  Finally, note that you usually need to package-call
operations from finite fields if the operations do not take as an
argument an object of the field.  See 
<a href="section-2.9.xhtml#ugTypesPkgCall" class="ref" >ugTypesPkgCall</a>  for more
information on package-calling.
</p>



<a name="subsec-8.11.1"/>
<div class="subsection"  id="subsec-8.11.1">
<h3 class="subsectitle">8.11.1  Modular Arithmetic and Prime Fields</h3>


<a name="ugxProblemFinitePrime" class="label"/>

<p><span class="index">finite field</span><a name="chapter-8-160"/>
<span class="index">Galois:field</span><a name="chapter-8-161"/>
<span class="index">field:finite:prime</span><a name="chapter-8-162"/>
<span class="index">field:prime</span><a name="chapter-8-163"/>
<span class="index">field:Galois</span><a name="chapter-8-164"/>
<span class="index">prime field</span><a name="chapter-8-165"/>
<span class="index">modular arithmetic</span><a name="chapter-8-166"/>
<span class="index">arithmetic:modular</span><a name="chapter-8-167"/>
</p>


<p>Let  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> be a positive integer.  It is well known that you can get the
same result if you perform addition, subtraction or multiplication of
integers and then take the remainder on dividing by  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> as if you had
first done such remaindering on the operands, performed the arithmetic
and then (if necessary) done remaindering again.  This allows us to
speak of arithmetic <span class="italic">modulo</span>  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> or, more simply <span class="italic">mod</span>  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>.
</p>


<p>In FriCAS, you use <span class="teletype">IntegerMod</span> to do such arithmetic.
</p>




<div id="spadComm8-229" class="spadComm" >
<form id="formComm8-229" action="javascript:makeRequest('8-229');" >
<input id="comm8-229" type="text" class="command" style="width: 15em;" value="(a,b) : IntegerMod 12 " />
</form>
<span id="commSav8-229" class="commSav" >(a,b) : IntegerMod 12 </span>
<div id="mathAns8-229" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm8-230" class="spadComm" >
<form id="formComm8-230" action="javascript:makeRequest('8-230');" >
<input id="comm8-230" type="text" class="command" style="width: 12em;" value="(a, b) := (16, 7) " />
</form>
<span id="commSav8-230" class="commSav" >(a, b) := (16, 7) </span>
<div id="mathAns8-230" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>7</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: IntegerMod 12
</div>





<div id="spadComm8-231" class="spadComm" >
<form id="formComm8-231" action="javascript:makeRequest('8-231');" >
<input id="comm8-231" type="text" class="command" style="width: 10em;" value="[a - b, a * b] " />
</form>
<span id="commSav8-231" class="commSav" >[a - b, a * b] </span>
<div id="mathAns8-231" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>9</mn><mo>,</mo><mn>4</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List IntegerMod 12
</div>



<p>If  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> is not prime, there is only a limited notion of reciprocals and
division.
</p>




<div id="spadComm8-232" class="spadComm" >
<form id="formComm8-232" action="javascript:makeRequest('8-232');" >
<input id="comm8-232" type="text" class="command" style="width: 4em;" value="a / b " />
</form>
<span id="commSav8-232" class="commSav" >a / b </span>
<div id="mathAns8-232" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;There&nbsp;are&nbsp;12&nbsp;exposed&nbsp;and&nbsp;13&nbsp;unexposed&nbsp;library&nbsp;operations&nbsp;named&nbsp;/&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;having&nbsp;2&nbsp;argument(s)&nbsp;but&nbsp;none&nbsp;was&nbsp;determined&nbsp;to&nbsp;be&nbsp;applicable.&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use&nbsp;HyperDoc&nbsp;Browse,&nbsp;or&nbsp;issue<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)display&nbsp;op&nbsp;/<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;learn&nbsp;more&nbsp;about&nbsp;the&nbsp;available&nbsp;operations.&nbsp;Perhaps&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;package-calling&nbsp;the&nbsp;operation&nbsp;or&nbsp;using&nbsp;coercions&nbsp;on&nbsp;the&nbsp;arguments<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;will&nbsp;allow&nbsp;you&nbsp;to&nbsp;apply&nbsp;the&nbsp;operation.<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;Cannot&nbsp;find&nbsp;a&nbsp;definition&nbsp;or&nbsp;applicable&nbsp;library&nbsp;operation&nbsp;named&nbsp;/&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;with&nbsp;argument&nbsp;type(s)&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IntegerMod&nbsp;12<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IntegerMod&nbsp;12<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perhaps&nbsp;you&nbsp;should&nbsp;use&nbsp;"@"&nbsp;to&nbsp;indicate&nbsp;the&nbsp;required&nbsp;return&nbsp;type,&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;"$"&nbsp;to&nbsp;specify&nbsp;which&nbsp;version&nbsp;of&nbsp;the&nbsp;function&nbsp;you&nbsp;need.<br />
</div>





<div id="spadComm8-233" class="spadComm" >
<form id="formComm8-233" action="javascript:makeRequest('8-233');" >
<input id="comm8-233" type="text" class="command" style="width: 6em;" value="recip a " />
</form>
<span id="commSav8-233" class="commSav" >recip a </span>
<div id="mathAns8-233" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"failed"</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union("failed",...)
</div>



<p>Here  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>7</mn></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>12</mn></mstyle></math> are relatively prime, so  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>7</mn></mstyle></math> has a multiplicative
inverse modulo  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>12</mn></mstyle></math>.
</p>




<div id="spadComm8-234" class="spadComm" >
<form id="formComm8-234" action="javascript:makeRequest('8-234');" >
<input id="comm8-234" type="text" class="command" style="width: 6em;" value="recip b " />
</form>
<span id="commSav8-234" class="commSav" >recip b </span>
<div id="mathAns8-234" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>7</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union(IntegerMod 12,...)
</div>



<p>If we take  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> to be a prime number  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>p</mi></mstyle></math>, then taking inverses and,
therefore, division are generally defined.
</p>


<p>Use <span class="teletype">PrimeField</span> instead of <span class="teletype">IntegerMod</span> for  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> prime.
</p>




<div id="spadComm8-235" class="spadComm" >
<form id="formComm8-235" action="javascript:makeRequest('8-235');" >
<input id="comm8-235" type="text" class="command" style="width: 16em;" value="c : PrimeField 11 := 8 " />
</form>
<span id="commSav8-235" class="commSav" >c : PrimeField 11 := 8 </span>
<div id="mathAns8-235" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>8</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PrimeField 11
</div>





<div id="spadComm8-236" class="spadComm" >
<form id="formComm8-236" action="javascript:makeRequest('8-236');" >
<input id="comm8-236" type="text" class="command" style="width: 4em;" value="inv c " />
</form>
<span id="commSav8-236" class="commSav" >inv c </span>
<div id="mathAns8-236" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>7</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PrimeField 11
</div>



<p>You can also use  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>1</mn><mo>/</mo><mi>c</mi></mrow></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>c</mi><mo>*</mo><mo>*</mo><mo>(</mo><mo>-</mo><mn>1</mn><mo>)</mo></mrow></mstyle></math> for the inverse of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>c</mi></mstyle></math>.
</p>




<div id="spadComm8-237" class="spadComm" >
<form id="formComm8-237" action="javascript:makeRequest('8-237');" >
<input id="comm8-237" type="text" class="command" style="width: 3em;" value="9/c " />
</form>
<span id="commSav8-237" class="commSav" >9/c </span>
<div id="mathAns8-237" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>8</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PrimeField 11
</div>



<p><span class="teletype">PrimeField</span> (abbreviation <span class="teletype">PF</span>) checks if its argument is
prime when you try to use an operation from it.  If you know the
argument is prime (particularly if it is large), <span class="teletype">InnerPrimeField</span>
(abbreviation <span class="teletype">IPF</span>) assumes the argument has already been
verified to be prime.  If you do use a number that is not prime, you
will eventually get an error message, most likely a division by zero
message.  For computer science applications, the most important finite
fields are <span class="teletype">PrimeField 2</span> and its extensions.
</p>


<p>In the following examples, we work with the finite field with 
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>p</mi><mo>=</mo><mn>101</mn></mrow></mstyle></math> elements.
</p>




<div id="spadComm8-238" class="spadComm" >
<form id="formComm8-238" action="javascript:makeRequest('8-238');" >
<input id="comm8-238" type="text" class="command" style="width: 12em;" value="GF101 := PF 101  " />
</form>
<span id="commSav8-238" class="commSav" >GF101 := PF 101  </span>
<div id="mathAns8-238" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext>PrimeField101</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Domain
</div>



<p>Like many domains in FriCAS, finite fields provide an operation for
returning a random element of the domain.
</p>




<div id="spadComm8-239" class="spadComm" >
<form id="formComm8-239" action="javascript:makeRequest('8-239');" >
<input id="comm8-239" type="text" class="command" style="width: 14em;" value="x := random()$GF101 " />
</form>
<span id="commSav8-239" class="commSav" >x := random()$GF101 </span>
<div id="mathAns8-239" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>8</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PrimeField 101
</div>





<div id="spadComm8-240" class="spadComm" >
<form id="formComm8-240" action="javascript:makeRequest('8-240');" >
<input id="comm8-240" type="text" class="command" style="width: 11em;" value="y : GF101 := 37 " />
</form>
<span id="commSav8-240" class="commSav" >y : GF101 := 37 </span>
<div id="mathAns8-240" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>37</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PrimeField 101
</div>





<div id="spadComm8-241" class="spadComm" >
<form id="formComm8-241" action="javascript:makeRequest('8-241');" >
<input id="comm8-241" type="text" class="command" style="width: 6em;" value="z := x/y " />
</form>
<span id="commSav8-241" class="commSav" >z := x/y </span>
<div id="mathAns8-241" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>63</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PrimeField 101
</div>





<div id="spadComm8-242" class="spadComm" >
<form id="formComm8-242" action="javascript:makeRequest('8-242');" >
<input id="comm8-242" type="text" class="command" style="width: 7em;" value="z * y - x " />
</form>
<span id="commSav8-242" class="commSav" >z * y - x </span>
<div id="mathAns8-242" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>0</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PrimeField 101
</div>



<p>The element  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>2</mn></mstyle></math> is a <span class="italic">primitive element</span> of this field,
<span class="index">primitive element</span><a name="chapter-8-168"/>
<span class="index">element:primitive</span><a name="chapter-8-169"/>
</p>




<div id="spadComm8-243" class="spadComm" >
<form id="formComm8-243" action="javascript:makeRequest('8-243');" >
<input id="comm8-243" type="text" class="command" style="width: 21em;" value="pe := primitiveElement()$GF101 " />
</form>
<span id="commSav8-243" class="commSav" >pe := primitiveElement()$GF101 </span>
<div id="mathAns8-243" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PrimeField 101
</div>



<p>in the sense that its powers enumerate all nonzero elements.
</p>




<div id="spadComm8-244" class="spadComm" >
<form id="formComm8-244" action="javascript:makeRequest('8-244');" >
<input id="comm8-244" type="text" class="command" style="width: 16em;" value="[pe^i for i in 0..99] " />
</form>
<span id="commSav8-244" class="commSav" >[pe^i for i in 0..99] </span>
<div id="mathAns8-244" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtable><mtr><mtd><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>16</mn><mo>,</mo><mn>32</mn><mo>,</mo><mn>64</mn><mo>,</mo><mn>27</mn><mo>,</mo><mn>54</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>14</mn><mo>,</mo><mn>28</mn><mo>,</mo><mn>56</mn><mo>,</mo><mn>11</mn><mo>,</mo><mn>22</mn><mo>,</mo><mn>44</mn><mo>,</mo><mn>88</mn><mo>,</mo><mn>75</mn><mo>,</mo><mn>49</mn><mo>,</mo><mn>98</mn><mo>,</mo></mtd></mtr><mtr><mtd><mn>95</mn><mo>,</mo><mn>89</mn><mo>,</mo><mn>77</mn><mo>,</mo><mn>53</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>10</mn><mo>,</mo><mn>20</mn><mo>,</mo><mn>40</mn><mo>,</mo><mn>80</mn><mo>,</mo><mn>59</mn><mo>,</mo><mn>17</mn><mo>,</mo><mn>34</mn><mo>,</mo><mn>68</mn><mo>,</mo><mn>35</mn><mo>,</mo><mn>70</mn><mo>,</mo><mn>39</mn><mo>,</mo><mn>78</mn><mo>,</mo><mn>55</mn><mo>,</mo><mn>9</mn><mo>,</mo></mtd></mtr><mtr><mtd><mn>18</mn><mo>,</mo><mn>36</mn><mo>,</mo><mn>72</mn><mo>,</mo><mn>43</mn><mo>,</mo><mn>86</mn><mo>,</mo><mn>71</mn><mo>,</mo><mn>41</mn><mo>,</mo><mn>82</mn><mo>,</mo><mn>63</mn><mo>,</mo><mn>25</mn><mo>,</mo><mn>50</mn><mo>,</mo><mn>100</mn><mo>,</mo><mn>99</mn><mo>,</mo><mn>97</mn><mo>,</mo><mn>93</mn><mo>,</mo><mn>85</mn><mo>,</mo><mn>69</mn><mo>,</mo><mn>37</mn><mo>,</mo></mtd></mtr><mtr><mtd><mn>74</mn><mo>,</mo><mn>47</mn><mo>,</mo><mn>94</mn><mo>,</mo><mn>87</mn><mo>,</mo><mn>73</mn><mo>,</mo><mn>45</mn><mo>,</mo><mn>90</mn><mo>,</mo><mn>79</mn><mo>,</mo><mn>57</mn><mo>,</mo><mn>13</mn><mo>,</mo><mn>26</mn><mo>,</mo><mn>52</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>12</mn><mo>,</mo><mn>24</mn><mo>,</mo><mn>48</mn><mo>,</mo><mn>96</mn><mo>,</mo><mn>91</mn><mo>,</mo></mtd></mtr><mtr><mtd><mn>81</mn><mo>,</mo><mn>61</mn><mo>,</mo><mn>21</mn><mo>,</mo><mn>42</mn><mo>,</mo><mn>84</mn><mo>,</mo><mn>67</mn><mo>,</mo><mn>33</mn><mo>,</mo><mn>66</mn><mo>,</mo><mn>31</mn><mo>,</mo><mn>62</mn><mo>,</mo><mn>23</mn><mo>,</mo><mn>46</mn><mo>,</mo><mn>92</mn><mo>,</mo><mn>83</mn><mo>,</mo><mn>65</mn><mo>,</mo><mn>29</mn><mo>,</mo><mn>58</mn><mo>,</mo><mn>15</mn><mo>,</mo><mn>30</mn><mo>,</mo></mtd></mtr><mtr><mtd><mn>60</mn><mo>,</mo><mn>19</mn><mo>,</mo><mn>38</mn><mo>,</mo><mn>76</mn><mo>,</mo><mn>51</mn><mo>]</mo></mtd></mtr></mtable></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PrimeField 101
</div>



<p>If every nonzero element is a power of a primitive element, how do you
determine what the exponent is?  Use <span class="index">discrete logarithm</span><a name="chapter-8-170"/> 
<span style="font-weight: bold;"> discreteLog</span>.  <span class="index">logarithm:discrete</span><a name="chapter-8-171"/>
</p>




<div id="spadComm8-245" class="spadComm" >
<form id="formComm8-245" action="javascript:makeRequest('8-245');" >
<input id="comm8-245" type="text" class="command" style="width: 14em;" value="ex := discreteLog(y) " />
</form>
<span id="commSav8-245" class="commSav" >ex := discreteLog(y) </span>
<div id="mathAns8-245" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>56</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm8-246" class="spadComm" >
<form id="formComm8-246" action="javascript:makeRequest('8-246');" >
<input id="comm8-246" type="text" class="command" style="width: 6em;" value="pe ^ ex " />
</form>
<span id="commSav8-246" class="commSav" >pe ^ ex </span>
<div id="mathAns8-246" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>37</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PrimeField 101
</div>



<p>The <span style="font-weight: bold;"> order</span> of a nonzero element  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> is the smallest positive
integer  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>t</mi></mstyle></math> such  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mi>x</mi><mi>t</mi></msup><mo>=</mo><mn>1</mn></mrow></mstyle></math>.
</p>




<div id="spadComm8-247" class="spadComm" >
<form id="formComm8-247" action="javascript:makeRequest('8-247');" >
<input id="comm8-247" type="text" class="command" style="width: 6em;" value="order y " />
</form>
<span id="commSav8-247" class="commSav" >order y </span>
<div id="mathAns8-247" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>25</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>The order of a primitive element is the defining  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>p</mi><mo>-</mo><mn>1</mn></mrow></mstyle></math>.
</p>




<div id="spadComm8-248" class="spadComm" >
<form id="formComm8-248" action="javascript:makeRequest('8-248');" >
<input id="comm8-248" type="text" class="command" style="width: 6em;" value="order pe " />
</form>
<span id="commSav8-248" class="commSav" >order pe </span>
<div id="mathAns8-248" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>100</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





</div>



<a name="subsec-8.11.2"/>
<div class="subsection"  id="subsec-8.11.2">
<h3 class="subsectitle">8.11.2  Extensions of Finite Fields</h3>


<a name="ugxProblemFiniteExtensionFinite" class="label"/>

<p><span class="index">finite field</span><a name="chapter-8-172"/>
<span class="index">field:finite:extension of</span><a name="chapter-8-173"/>
</p>


<p>When you want to work with an extension of a finite field in FriCAS,
you have three choices to make:
</p>



<ol>
<li>
 Do you want to generate an extension of the prime field
(for example, <span class="teletype">PrimeField 2</span>) or an extension of a given field?
</li>
<li> Do you want to use a representation that is particularly
efficient for multiplication, exponentiation and addition but uses a
lot of computer memory (a representation that models the cyclic group
structure of the multiplicative group of the field extension and uses
a Zech logarithm table), one that <span class="index">Zech logarithm</span><a name="chapter-8-174"/> uses a normal
basis for the vector space structure of the field extension, or one
that performs arithmetic modulo an irreducible polynomial?  The cyclic
group representation is only usable up to <span class="italic">medium</span> (relative to your
machine's performance) sized fields.  If the field is large and the
normal basis is relatively simple, the normal basis representation is
more efficient for exponentiation than the irreducible polynomial
representation.
</li>
<li> Do you want to provide a polynomial explicitly, a root of which
<span class="italic">generates</span> the extension in one of the three senses in (2), or do
you wish to have the polynomial generated for you?
</li>
</ol>



<p>This illustrates one of the most important features of FriCAS: you can
choose exactly the right data-type and representation to suit your
application best.
</p>


<p>We first tell you what domain constructors to use for each case above,
and then give some examples.
</p>


<p>Constructors that automatically generate extensions of the prime field:
<br />
<span class="teletype">FiniteField</span> <br />
<span class="teletype">FiniteFieldCyclicGroup</span> <br />
<span class="teletype">FiniteFieldNormalBasis</span>
</p>


<p>Constructors that generate extensions of an arbitrary field:
<br />
<span class="teletype">FiniteFieldExtension</span> <br />
<span class="teletype">FiniteFieldExtensionByPolynomial</span> <br />
<span class="teletype">FiniteFieldCyclicGroupExtension</span> <br />
<span class="teletype">FiniteFieldCyclicGroupExtensionByPolynomial</span> <br />
<span class="teletype">FiniteFieldNormalBasisExtension</span> <br />
<span class="teletype">FiniteFieldNormalBasisExtensionByPolynomial</span>
</p>



<p>Constructors that use a cyclic group representation:
<br />
<span class="teletype">FiniteFieldCyclicGroup</span> <br />
<span class="teletype">FiniteFieldCyclicGroupExtension</span> <br />
<span class="teletype">FiniteFieldCyclicGroupExtensionByPolynomial</span>
</p>



<p>Constructors that use a normal basis representation:
<br />
<span class="teletype">FiniteFieldNormalBasis</span> <br />
<span class="teletype">FiniteFieldNormalBasisExtension</span> <br />
<span class="teletype">FiniteFieldNormalBasisExtensionByPolynomial</span>
</p>



<p>Constructors that use an irreducible modulus polynomial representation:
<br />
<span class="teletype">FiniteField</span> <br />
<span class="teletype">FiniteFieldExtension</span> <br />
<span class="teletype">FiniteFieldExtensionByPolynomial</span>
</p>



<p>Constructors that generate a polynomial for you:
<br />
<span class="teletype">FiniteField</span> <br />
<span class="teletype">FiniteFieldExtension</span> <br />
<span class="teletype">FiniteFieldCyclicGroup</span> <br />
<span class="teletype">FiniteFieldCyclicGroupExtension</span> <br />
<span class="teletype">FiniteFieldNormalBasis</span> <br />
<span class="teletype">FiniteFieldNormalBasisExtension</span>
</p>



<p>Constructors for which you provide a polynomial:
<br />
<span class="teletype">FiniteFieldExtensionByPolynomial</span> <br />
<span class="teletype">FiniteFieldCyclicGroupExtensionByPolynomial</span> <br />
<span class="teletype">FiniteFieldNormalBasisExtensionByPolynomial</span>
</p>


<p>These constructors are discussed in the following sections where we
collect together descriptions of extension fields that have the same
underlying representation.<span class="footnote">For more information on the
implementation aspects of finite fields, see J. Grabmeier,
A. Scheerhorn, <span class="italic">Finite Fields in AXIOM,</span> Technical Report, IBM
Heidelberg Scientific Center, 1992.</span>
</p>


<p>If you don't really care about all this detail, just use <span class="teletype">FiniteField</span>.  As your knowledge of your application and its FriCAS
implementation grows, you can come back and choose an alternative
constructor that may improve the efficiency of your code.  Note that
the exported operations are almost the same for all constructors of
finite field extensions and include the operations exported by <span class="teletype">PrimeField</span>.
</p>




</div>



<a name="subsec-8.11.3"/>
<div class="subsection"  id="subsec-8.11.3">
<h3 class="subsectitle">8.11.3  Irreducible Modulus Polynomial Representations</h3>


<a name="ugxProblemFiniteModulus" class="label"/>


<p>All finite field extension constructors discussed in this
<span class="index">finite field</span><a name="chapter-8-175"/> section <span class="index">field:finite:extension of</span><a name="chapter-8-176"/> use a
representation that performs arithmetic with univariate (one-variable)
polynomials modulo an irreducible polynomial.  This polynomial may be
given explicitly by you or automatically generated.  The ground field
may be the prime field or one you specify.  See
<a href="section-8.11.xhtml#ugxProblemFiniteExtensionFinite" class="ref" >ugxProblemFiniteExtensionFinite</a>  for general information about
finite field extensions.
</p>


<p>For <span class="teletype">FiniteField</span> (abbreviation <span class="teletype">FF</span>) you provide a prime
number  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>p</mi></mstyle></math> and an extension degree  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>.  This degree can be 1.
</p>


<p>FriCAS uses the prime field <span class="teletype">PrimeField(p)</span>, here <span class="teletype">PrimeField 2</span>, 
and it chooses an irreducible polynomial of degree  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>, here 12,
over the ground field.
</p>




<div id="spadComm8-249" class="spadComm" >
<form id="formComm8-249" action="javascript:makeRequest('8-249');" >
<input id="comm8-249" type="text" class="command" style="width: 14em;" value="GF4096 := FF(2,12); " />
</form>
<span id="commSav8-249" class="commSav" >GF4096 := FF(2,12); </span>
<div id="mathAns8-249" ></div>
</div>




<div class="returnType">
Type: Domain
</div>



<p>The objects in the generated field extension are polynomials of degree
at most  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>-</mo><mn>1</mn></mrow></mstyle></math> with coefficients in the prime field.  The polynomial
indeterminate is automatically chosen by FriCAS and is typically
something like  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>%</mo><mi>A</mi></mrow></mstyle></math> or  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>%</mo><mi>D</mi></mrow></mstyle></math>.  These (strange) variables are 
<span class="italic">only</span> for output display; there are several ways to construct 
elements of this field.
</p>


<p>The operation <span style="font-weight: bold;"> index</span> enumerates the elements of the field
extension and accepts as argument the integers from 1 to  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mi>p</mi><mi>n</mi></msup></mrow></mstyle></math>.
</p>


<p>The expression  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>index</mi><mo>(</mo><mi>p</mi><mo>)</mo></mrow></mstyle></math> always gives the indeterminate.
</p>




<div id="spadComm8-250" class="spadComm" >
<form id="formComm8-250" action="javascript:makeRequest('8-250');" >
<input id="comm8-250" type="text" class="command" style="width: 14em;" value="a := index(2)$GF4096 " />
</form>
<span id="commSav8-250" class="commSav" >a := index(2)$GF4096 </span>
<div id="mathAns8-250" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>%</mo><mi>A</mi></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteField(2,12)
</div>



<p>You can build polynomials in  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> and calculate in  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>GF4096</mi></mstyle></math>.
</p>




<div id="spadComm8-251" class="spadComm" >
<form id="formComm8-251" action="javascript:makeRequest('8-251');" >
<input id="comm8-251" type="text" class="command" style="width: 15em;" value="b := a^12 - a^5 + a " />
</form>
<span id="commSav8-251" class="commSav" >b := a^12 - a^5 + a </span>
<div id="mathAns8-251" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mo>%</mo><msup><mi>A</mi><mn>5</mn></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>A</mi><mn>3</mn></msup></mrow><mo>+</mo><mo>%</mo><mi>A</mi><mo>+</mo><mn>1</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteField(2,12)
</div>





<div id="spadComm8-252" class="spadComm" >
<form id="formComm8-252" action="javascript:makeRequest('8-252');" >
<input id="comm8-252" type="text" class="command" style="width: 7em;" value="b ^ 1000 " />
</form>
<span id="commSav8-252" class="commSav" >b ^ 1000 </span>
<div id="mathAns8-252" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mo>%</mo><msup><mi>A</mi><mn>10</mn></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>A</mi><mn>9</mn></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>A</mi><mn>7</mn></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>A</mi><mn>5</mn></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>A</mi><mn>4</mn></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>A</mi><mn>3</mn></msup></mrow><mo>+</mo><mo>%</mo><mi>A</mi></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteField(2,12)
</div>





<div id="spadComm8-253" class="spadComm" >
<form id="formComm8-253" action="javascript:makeRequest('8-253');" >
<input id="comm8-253" type="text" class="command" style="width: 6em;" value="c := a/b " />
</form>
<span id="commSav8-253" class="commSav" >c := a/b </span>
<div id="mathAns8-253" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mo>%</mo><msup><mi>A</mi><mn>11</mn></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>A</mi><mn>8</mn></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>A</mi><mn>7</mn></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>A</mi><mn>5</mn></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>A</mi><mn>4</mn></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>A</mi><mn>3</mn></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>A</mi><mn>2</mn></msup></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteField(2,12)
</div>



<p>Among the available operations are <span style="font-weight: bold;"> norm</span> and <span style="font-weight: bold;"> trace</span>.
</p>




<div id="spadComm8-254" class="spadComm" >
<form id="formComm8-254" action="javascript:makeRequest('8-254');" >
<input id="comm8-254" type="text" class="command" style="width: 5em;" value="norm c " />
</form>
<span id="commSav8-254" class="commSav" >norm c </span>
<div id="mathAns8-254" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PrimeField 2
</div>





<div id="spadComm8-255" class="spadComm" >
<form id="formComm8-255" action="javascript:makeRequest('8-255');" >
<input id="comm8-255" type="text" class="command" style="width: 6em;" value="trace c " />
</form>
<span id="commSav8-255" class="commSav" >trace c </span>
<div id="mathAns8-255" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>0</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PrimeField 2
</div>



<p>Since any nonzero element is a power of a primitive element, how do we
discover what the exponent is?
</p>


<p>The operation <span style="font-weight: bold;"> discreteLog</span> calculates <span class="index">discrete logarithm</span><a name="chapter-8-177"/>
the exponent and, <span class="index">logarithm:discrete</span><a name="chapter-8-178"/> if it is called with only
one argument, always refers to the primitive element returned by <span style="font-weight: bold;">
primitiveElement</span>.
</p>




<div id="spadComm8-256" class="spadComm" >
<form id="formComm8-256" action="javascript:makeRequest('8-256');" >
<input id="comm8-256" type="text" class="command" style="width: 14em;" value="dL := discreteLog a " />
</form>
<span id="commSav8-256" class="commSav" >dL := discreteLog a </span>
<div id="mathAns8-256" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1729</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm8-257" class="spadComm" >
<form id="formComm8-257" action="javascript:makeRequest('8-257');" >
<input id="comm8-257" type="text" class="command" style="width: 6em;" value="g ^ dL " />
</form>
<span id="commSav8-257" class="commSav" >g ^ dL </span>
<div id="mathAns8-257" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><msup><mi>g</mi><mn>1729</mn></msup></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Integer
</div>



<p><span class="teletype">FiniteFieldExtension</span> (abbreviation <span class="teletype">FFX</span>) is similar to <span class="teletype">FiniteField</span> except that the ground-field for <span class="teletype">FiniteFieldExtension</span> 
is arbitrary and chosen by you.
</p>


<p>In case you select the prime field as ground field, there is
essentially no difference between the constructed two finite field
extensions.
</p>




<div id="spadComm8-258" class="spadComm" >
<form id="formComm8-258" action="javascript:makeRequest('8-258');" >
<input id="comm8-258" type="text" class="command" style="width: 12em;" value="GF16 := FF(2,4); " />
</form>
<span id="commSav8-258" class="commSav" >GF16 := FF(2,4); </span>
<div id="mathAns8-258" ></div>
</div>




<div class="returnType">
Type: Domain
</div>





<div id="spadComm8-259" class="spadComm" >
<form id="formComm8-259" action="javascript:makeRequest('8-259');" >
<input id="comm8-259" type="text" class="command" style="width: 16em;" value="GF4096 := FFX(GF16,3); " />
</form>
<span id="commSav8-259" class="commSav" >GF4096 := FFX(GF16,3); </span>
<div id="mathAns8-259" ></div>
</div>




<div class="returnType">
Type: Domain
</div>





<div id="spadComm8-260" class="spadComm" >
<form id="formComm8-260" action="javascript:makeRequest('8-260');" >
<input id="comm8-260" type="text" class="command" style="width: 20em;" value="r := (random()$GF4096) ^ 20 " />
</form>
<span id="commSav8-260" class="commSav" >r := (random()$GF4096) ^ 20 </span>
<div id="mathAns8-260" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mrow><mo>(</mo><mrow><mo>%</mo><msup><mi>B</mi><mn>2</mn></msup></mrow><mo>+</mo><mn>1</mn><mo>)</mo></mrow><mo></mo><mrow><mo>%</mo><msup><mi>C</mi><mn>2</mn></msup></mrow></mrow><mo>+</mo><mrow><mrow><mo>(</mo><mrow><mo>%</mo><msup><mi>B</mi><mn>3</mn></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>B</mi><mn>2</mn></msup></mrow><mo>+</mo><mn>1</mn><mo>)</mo></mrow><mo></mo><mo>%</mo><mi>C</mi></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>B</mi><mn>3</mn></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>B</mi><mn>2</mn></msup></mrow><mo>+</mo><mo>%</mo><mi>B</mi><mo>+</mo><mn>1</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteFieldExtension(FiniteField(2,4),3)
</div>





<div id="spadComm8-261" class="spadComm" >
<form id="formComm8-261" action="javascript:makeRequest('8-261');" >
<input id="comm8-261" type="text" class="command" style="width: 6em;" value="norm(r) " />
</form>
<span id="commSav8-261" class="commSav" >norm(r) </span>
<div id="mathAns8-261" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mo>%</mo><msup><mi>B</mi><mn>2</mn></msup></mrow><mo>+</mo><mo>%</mo><mi>B</mi></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteField(2,4)
</div>



<p><span class="teletype">FiniteFieldExtensionByPolynomial</span> (abbreviation <span class="teletype">FFP</span>)
is similar to <span class="teletype">FiniteField</span> and <span class="teletype">FiniteFieldExtension</span>
but is more general.
</p>




<div id="spadComm8-262" class="spadComm" >
<form id="formComm8-262" action="javascript:makeRequest('8-262');" >
<input id="comm8-262" type="text" class="command" style="width: 11em;" value="GF4 := FF(2,2); " />
</form>
<span id="commSav8-262" class="commSav" >GF4 := FF(2,2); </span>
<div id="mathAns8-262" ></div>
</div>




<div class="returnType">
Type: Domain
</div>





<div id="spadComm8-263" class="spadComm" >
<form id="formComm8-263" action="javascript:makeRequest('8-263');" >
<input id="comm8-263" type="text" class="command" style="width: 40em;" value="f := nextIrreduciblePoly(random(6)$FFPOLY(GF4))$FFPOLY(GF4) " />
</form>
<span id="commSav8-263" class="commSav" >f := nextIrreduciblePoly(random(6)$FFPOLY(GF4))$FFPOLY(GF4) </span>
<div id="mathAns8-263" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union(SparseUnivariatePolynomial FiniteField(2,2),...)
</div>



<p>For <span class="teletype">FFP</span> you choose both the ground field and the irreducible
polynomial used in the representation.  The degree of the extension is
the degree of the polynomial.
</p>




<div id="spadComm8-264" class="spadComm" >
<form id="formComm8-264" action="javascript:makeRequest('8-264');" >
<input id="comm8-264" type="text" class="command" style="width: 15em;" value="GF4096 := FFP(GF4,f); " />
</form>
<span id="commSav8-264" class="commSav" >GF4096 := FFP(GF4,f); </span>
<div id="mathAns8-264" ></div>
</div>




<div class="returnType">
Type: Domain
</div>





<div id="spadComm8-265" class="spadComm" >
<form id="formComm8-265" action="javascript:makeRequest('8-265');" >
<input id="comm8-265" type="text" class="command" style="width: 19em;" value="discreteLog random()$GF4096 " />
</form>
<span id="commSav8-265" class="commSav" >discreteLog random()$GF4096 </span>
<div id="mathAns8-265" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>582</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





</div>



<a name="subsec-8.11.4"/>
<div class="subsection"  id="subsec-8.11.4">
<h3 class="subsectitle">8.11.4  Cyclic Group Representations</h3>


<a name="ugxProblemFiniteCyclic" class="label"/>

<p><span class="index">finite field</span><a name="chapter-8-179"/>
<span class="index">field:finite:extension of</span><a name="chapter-8-180"/>
</p>


<p>In every finite field there exist elements whose powers are all the
nonzero elements of the field.  Such an element is called a 
<span class="italic">primitive element</span>.
</p>


<p>In <span class="teletype">FiniteFieldCyclicGroup</span> (abbreviation <span class="teletype">FFCG</span>)
<span class="index">group:cyclic</span><a name="chapter-8-181"/> the nonzero elements are represented by the
powers of a fixed primitive <span class="index">element:primitive</span><a name="chapter-8-182"/> element
<span class="index">primitive element</span><a name="chapter-8-183"/> of the field (that is, a generator of its
cyclic multiplicative group).  Multiplication (and hence
exponentiation) using this representation is easy.  To do addition, we
consider our primitive element as the root of a primitive polynomial
(an irreducible polynomial whose roots are all primitive).  See
<a href="section-8.11.xhtml#ugxProblemFiniteUtility" class="ref" >ugxProblemFiniteUtility</a>  
for examples of how to compute such a polynomial.
</p>


<p>To use <span class="teletype">FiniteFieldCyclicGroup</span> you provide a prime number and an
extension degree.
</p>



<div id="spadComm8-266" class="spadComm" >
<form id="formComm8-266" action="javascript:makeRequest('8-266');" >
<input id="comm8-266" type="text" class="command" style="width: 13em;" value="GF81 := FFCG(3,4); " />
</form>
<span id="commSav8-266" class="commSav" >GF81 := FFCG(3,4); </span>
<div id="mathAns8-266" ></div>
</div>




<div class="returnType">
Type: Domain
</div>



<p>FriCAS uses the prime field, here <span class="teletype">PrimeField 3</span>, as the ground
field and it chooses a primitive polynomial of degree  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>, here 4,
over the prime field.
</p>




<div id="spadComm8-267" class="spadComm" >
<form id="formComm8-267" action="javascript:makeRequest('8-267');" >
<input id="comm8-267" type="text" class="command" style="width: 20em;" value="a := primitiveElement()$GF81 " />
</form>
<span id="commSav8-267" class="commSav" >a := primitiveElement()$GF81 </span>
<div id="mathAns8-267" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>%</mo><msup><mi>F</mi><mn>1</mn></msup></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteFieldCyclicGroup(3,4)
</div>



<p>You can calculate in  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>GF81</mi></mstyle></math>.
</p>




<div id="spadComm8-268" class="spadComm" >
<form id="formComm8-268" action="javascript:makeRequest('8-268');" >
<input id="comm8-268" type="text" class="command" style="width: 16em;" value="b  := a^12 - a^5 + a " />
</form>
<span id="commSav8-268" class="commSav" >b  := a^12 - a^5 + a </span>
<div id="mathAns8-268" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>%</mo><msup><mi>F</mi><mn>72</mn></msup></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteFieldCyclicGroup(3,4)
</div>



<p>In this representation of finite fields the discrete logarithm of an
element can be seen directly in its output form.
</p>




<div id="spadComm8-269" class="spadComm" >
<form id="formComm8-269" action="javascript:makeRequest('8-269');" >
<input id="comm8-269" type="text" class="command" style="width: 2em;" value="b " />
</form>
<span id="commSav8-269" class="commSav" >b </span>
<div id="mathAns8-269" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>%</mo><msup><mi>F</mi><mn>72</mn></msup></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteFieldCyclicGroup(3,4)
</div>





<div id="spadComm8-270" class="spadComm" >
<form id="formComm8-270" action="javascript:makeRequest('8-270');" >
<input id="comm8-270" type="text" class="command" style="width: 10em;" value="discreteLog b " />
</form>
<span id="commSav8-270" class="commSav" >discreteLog b </span>
<div id="mathAns8-270" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>72</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p><span class="teletype">FiniteFieldCyclicGroupExtension</span> (abbreviation <span class="teletype">FFCGX</span>) is
similar to <span class="teletype">FiniteFieldCyclicGroup</span> except that the ground field
for <span class="teletype">FiniteFieldCyclicGroupExtension</span> is arbitrary and chosen by
you.  In case you select the prime field as ground field, there is
essentially no difference between the constructed two finite field
extensions.
</p>




<div id="spadComm8-271" class="spadComm" >
<form id="formComm8-271" action="javascript:makeRequest('8-271');" >
<input id="comm8-271" type="text" class="command" style="width: 11em;" value="GF9 := FF(3,2); " />
</form>
<span id="commSav8-271" class="commSav" >GF9 := FF(3,2); </span>
<div id="mathAns8-271" ></div>
</div>




<div class="returnType">
Type: Domain
</div>





<div id="spadComm8-272" class="spadComm" >
<form id="formComm8-272" action="javascript:makeRequest('8-272');" >
<input id="comm8-272" type="text" class="command" style="width: 16em;" value="GF729 := FFCGX(GF9,3); " />
</form>
<span id="commSav8-272" class="commSav" >GF729 := FFCGX(GF9,3); </span>
<div id="mathAns8-272" ></div>
</div>




<div class="returnType">
Type: Domain
</div>





<div id="spadComm8-273" class="spadComm" >
<form id="formComm8-273" action="javascript:makeRequest('8-273');" >
<input id="comm8-273" type="text" class="command" style="width: 19em;" value="r := (random()$GF729) ^ 20 " />
</form>
<span id="commSav8-273" class="commSav" >r := (random()$GF729) ^ 20 </span>
<div id="mathAns8-273" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>%</mo><msup><mi>H</mi><mn>420</mn></msup></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteFieldCyclicGroupExtension(FiniteField(3,2),3)
</div>





<div id="spadComm8-274" class="spadComm" >
<form id="formComm8-274" action="javascript:makeRequest('8-274');" >
<input id="comm8-274" type="text" class="command" style="width: 6em;" value="trace(r) " />
</form>
<span id="commSav8-274" class="commSav" >trace(r) </span>
<div id="mathAns8-274" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>0</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteField(3,2)
</div>



<p><span class="teletype">FiniteFieldCyclicGroupExtensionByPolynomial</span> (abbreviation 
<span class="teletype">FFCGP</span>) is similar to <span class="teletype">FiniteFieldCyclicGroup</span> and 
<span class="teletype">FiniteFieldCyclicGroupExtension</span> but is more general.  For 
<span class="teletype">FiniteFieldCyclicGroupExtensionByPolynomial</span> you choose both the
ground field and the irreducible polynomial used in the
representation.  The degree of the extension is the degree of the
polynomial.
</p>




<div id="spadComm8-275" class="spadComm" >
<form id="formComm8-275" action="javascript:makeRequest('8-275');" >
<input id="comm8-275" type="text" class="command" style="width: 15em;" value="GF3  := PrimeField 3; " />
</form>
<span id="commSav8-275" class="commSav" >GF3  := PrimeField 3; </span>
<div id="mathAns8-275" ></div>
</div>




<div class="returnType">
Type: Domain
</div>



<p>We use a utility operation to generate an irreducible primitive
polynomial (see 
<a href="section-8.11.xhtml#ugxProblemFiniteUtility" class="ref" >ugxProblemFiniteUtility</a> ).  
The polynomial has one variable that is <span class="italic">anonymous</span>: 
it displays as a question mark.
</p>




<div id="spadComm8-276" class="spadComm" >
<form id="formComm8-276" action="javascript:makeRequest('8-276');" >
<input id="comm8-276" type="text" class="command" style="width: 27em;" value="f := createPrimitivePoly(4)$FFPOLY(GF3) " />
</form>
<span id="commSav8-276" class="commSav" >f := createPrimitivePoly(4)$FFPOLY(GF3) </span>
<div id="mathAns8-276" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SparseUnivariatePolynomial PrimeField 3
</div>





<div id="spadComm8-277" class="spadComm" >
<form id="formComm8-277" action="javascript:makeRequest('8-277');" >
<input id="comm8-277" type="text" class="command" style="width: 15em;" value="GF81 := FFCGP(GF3,f); " />
</form>
<span id="commSav8-277" class="commSav" >GF81 := FFCGP(GF3,f); </span>
<div id="mathAns8-277" ></div>
</div>




<div class="returnType">
Type: Domain
</div>



<p>Let's look at a random element from this field.
</p>




<div id="spadComm8-278" class="spadComm" >
<form id="formComm8-278" action="javascript:makeRequest('8-278');" >
<input id="comm8-278" type="text" class="command" style="width: 10em;" value="random()$GF81 " />
</form>
<span id="commSav8-278" class="commSav" >random()$GF81 </span>
<div id="mathAns8-278" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>%</mo><msup><mi>K</mi><mn>13</mn></msup></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: 
FiniteFieldCyclicGroupExtensionByPolynomial(PrimeField 3,?^4+?+2)
</div>





</div>



<a name="subsec-8.11.5"/>
<div class="subsection"  id="subsec-8.11.5">
<h3 class="subsectitle">8.11.5  Normal Basis Representations</h3>


<a name="ugxProblemFiniteNormal" class="label"/>

<p><span class="index">finite field</span><a name="chapter-8-184"/>
<span class="index">field:finite:extension of</span><a name="chapter-8-185"/>
<span class="index">basis:normal</span><a name="chapter-8-186"/>
<span class="index">normal basis</span><a name="chapter-8-187"/>
</p>


<p>Let  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>K</mi></mstyle></math> be a finite extension of degree  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> of the finite field  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>F</mi></mstyle></math>
and let  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>F</mi></mstyle></math> have  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>q</mi></mstyle></math> elements.  An element  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>K</mi></mstyle></math> is said to be
<span class="italic">normal</span> over  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>F</mi></mstyle></math> if the elements
</p>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>1</mn><mo>,</mo><msup><mi>x</mi><mi>q</mi></msup><mo>,</mo><msup><mi>x</mi><mrow><msup><mi>q</mi><mn>2</mn></msup></mrow></msup><mo>,</mo><mo>&#x2026;</mo><mo>,</mo><msup><mi>x</mi><mrow><msup><mi>q</mi><mrow><mi>n</mi><mo>-</mo><mn>1</mn></mrow></msup></mrow></msup></mrow></mstyle></math>
</td></tr>
</table>
</div>



<p>form a basis of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>K</mi></mstyle></math> as a vector space over  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>F</mi></mstyle></math>.  Such a basis is
called a <span class="italic">normal basis</span>.<span class="footnote">This agrees with the general
definition of a normal basis because the  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> distinct powers of the
automorphism  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>x</mi><mo>&#x21a6;</mo><msup><mi>x</mi><mi>q</mi></msup></mrow></mstyle></math> constitute the Galois group of  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>K</mi><mo>/</mo><mi>F</mi></mrow></mstyle></math>.</span>
</p>


<p>If  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> is normal over  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>F</mi></mstyle></math>, its minimal <span class="index">polynomial:minimal</span><a name="chapter-8-188"/>
polynomial is also said to be <span class="italic">normal</span> over  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>F</mi></mstyle></math>.  
<span class="index">minimal polynomial</span><a name="chapter-8-189"/> 
There exist normal bases for all finite extensions of arbitrary 
finite fields.
</p>


<p>In <span class="teletype">FiniteFieldNormalBasis</span> (abbreviation <span class="teletype">FFNB</span>), the
elements of the finite field are represented by coordinate vectors
with respect to a normal basis.
</p>


<p>You provide a prime  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>p</mi></mstyle></math> and an extension degree  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>.
</p>




<div id="spadComm8-279" class="spadComm" >
<form id="formComm8-279" action="javascript:makeRequest('8-279');" >
<input id="comm8-279" type="text" class="command" style="width: 10em;" value="K := FFNB(3,8) " />
</form>
<span id="commSav8-279" class="commSav" >K := FFNB(3,8) </span>
<div id="mathAns8-279" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mi>FiniteFieldNormalBasis</mi><mo>(</mo><mn>3</mn><mo>,</mo><mn>8</mn><mo>)</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Domain
</div>



<p>FriCAS uses the prime field <span class="teletype">PrimeField(p)</span>, here <span class="teletype">PrimeField
3</span>, and it chooses a normal polynomial of degree  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>, here 8, over the
ground field.  The remainder class of the indeterminate is used as the
normal element.  The polynomial indeterminate is automatically chosen
by FriCAS and is typically something like  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>%</mo><mi>A</mi></mrow></mstyle></math> or  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>%</mo><mi>D</mi></mrow></mstyle></math>.  These
(strange) variables are only for output display; there are several
ways to construct elements of this field.  The output of the basis
elements is something like  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>%</mo><msup><mi>A</mi><mrow><msup><mi>q</mi><mi>i</mi></msup></mrow></msup><mo>.</mo></mrow></mstyle></math>
</p>




<div id="spadComm8-280" class="spadComm" >
<form id="formComm8-280" action="javascript:makeRequest('8-280');" >
<input id="comm8-280" type="text" class="command" style="width: 16em;" value="a := normalElement()$K " />
</form>
<span id="commSav8-280" class="commSav" >a := normalElement()$K </span>
<div id="mathAns8-280" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>%</mo><mi>I</mi></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteFieldNormalBasis(3,8)
</div>



<p>You can calculate in  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>K</mi></mstyle></math> using  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math>.
</p>




<div id="spadComm8-281" class="spadComm" >
<form id="formComm8-281" action="javascript:makeRequest('8-281');" >
<input id="comm8-281" type="text" class="command" style="width: 16em;" value="b  := a^12 - a^5 + a " />
</form>
<span id="commSav8-281" class="commSav" >b  := a^12 - a^5 + a </span>
<div id="mathAns8-281" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>2</mn><mo></mo><mrow><mo>%</mo><msup><mi>I</mi><mrow><msup><mi>q</mi><mn>7</mn></msup></mrow></msup></mrow></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>I</mi><mrow><msup><mi>q</mi><mn>5</mn></msup></mrow></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>I</mi><mi>q</mi></msup></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteFieldNormalBasis(3,8)
</div>



<p><span class="teletype">FiniteFieldNormalBasisExtension</span> (abbreviation <span class="teletype">FFNBX</span>) is
similar to <span class="teletype">FiniteFieldNormalBasis</span> except that the groundfield
for <span class="teletype">FiniteFieldNormalBasisExtension</span> is arbitrary and chosen by
you.  In case you select the prime field as ground field, there is
essentially no difference between the constructed two finite field
extensions.
</p>




<div id="spadComm8-282" class="spadComm" >
<form id="formComm8-282" action="javascript:makeRequest('8-282');" >
<input id="comm8-282" type="text" class="command" style="width: 12em;" value="GF9 := FFNB(3,2); " />
</form>
<span id="commSav8-282" class="commSav" >GF9 := FFNB(3,2); </span>
<div id="mathAns8-282" ></div>
</div>




<div class="returnType">
Type: Domain
</div>





<div id="spadComm8-283" class="spadComm" >
<form id="formComm8-283" action="javascript:makeRequest('8-283');" >
<input id="comm8-283" type="text" class="command" style="width: 16em;" value="GF729 := FFNBX(GF9,3); " />
</form>
<span id="commSav8-283" class="commSav" >GF729 := FFNBX(GF9,3); </span>
<div id="mathAns8-283" ></div>
</div>




<div class="returnType">
Type: Domain
</div>





<div id="spadComm8-284" class="spadComm" >
<form id="formComm8-284" action="javascript:makeRequest('8-284');" >
<input id="comm8-284" type="text" class="command" style="width: 14em;" value="r := random()$GF729 " />
</form>
<span id="commSav8-284" class="commSav" >r := random()$GF729 </span>
<div id="mathAns8-284" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>2</mn><mo></mo><mo>%</mo><mi>K</mi><mo></mo><mrow><mo>%</mo><msup><mi>L</mi><mi>q</mi></msup></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: 
FiniteFieldNormalBasisExtension(FiniteFieldNormalBasis(3,2),3)
</div>





<div id="spadComm8-285" class="spadComm" >
<form id="formComm8-285" action="javascript:makeRequest('8-285');" >
<input id="comm8-285" type="text" class="command" style="width: 16em;" value="r + r^3 + r^9 + r^27 " />
</form>
<span id="commSav8-285" class="commSav" >r + r^3 + r^9 + r^27 </span>
<div id="mathAns8-285" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>2</mn><mo></mo><mo>%</mo><mi>K</mi><mo></mo><mrow><mo>%</mo><msup><mi>L</mi><mrow><msup><mi>q</mi><mn>2</mn></msup></mrow></msup></mrow></mrow><mo>+</mo><mrow><mrow><mo>(</mo><mrow><mn>2</mn><mo></mo><mrow><mo>%</mo><msup><mi>K</mi><mi>q</mi></msup></mrow></mrow><mo>+</mo><mrow><mn>2</mn><mo></mo><mo>%</mo><mi>K</mi></mrow><mo>)</mo></mrow><mo></mo><mrow><mo>%</mo><msup><mi>L</mi><mi>q</mi></msup></mrow></mrow><mo>+</mo><mrow><mn>2</mn><mo></mo><mrow><mo>%</mo><msup><mi>K</mi><mi>q</mi></msup></mrow><mo></mo><mo>%</mo><mi>L</mi></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: 
FiniteFieldNormalBasisExtension(FiniteFieldNormalBasis(3,2),3)
</div>



<p><span class="teletype">FiniteFieldNormalBasisExtensionByPolynomial</span> (abbreviation 
<span class="teletype">FFNBP</span>) is similar to <span class="teletype">FiniteFieldNormalBasis</span> and 
<span class="teletype">FiniteFieldNormalBasisExtension</span> but is more general.  For 
<span class="teletype">FiniteFieldNormalBasisExtensionByPolynomial</span> you choose both the
ground field and the irreducible polynomial used in the representation.  
The degree of the extension is the degree of the polynomial.
</p>




<div id="spadComm8-286" class="spadComm" >
<form id="formComm8-286" action="javascript:makeRequest('8-286');" >
<input id="comm8-286" type="text" class="command" style="width: 14em;" value="GF3 := PrimeField 3; " />
</form>
<span id="commSav8-286" class="commSav" >GF3 := PrimeField 3; </span>
<div id="mathAns8-286" ></div>
</div>




<div class="returnType">
Type: Domain
</div>



<p>We use a utility operation to generate an irreducible normal
polynomial (see 
<a href="section-8.11.xhtml#ugxProblemFiniteUtility" class="ref" >ugxProblemFiniteUtility</a> ).  
The polynomial has
one variable that is <span class="italic">anonymous</span>: it displays as a question mark.
</p>




<div id="spadComm8-287" class="spadComm" >
<form id="formComm8-287" action="javascript:makeRequest('8-287');" >
<input id="comm8-287" type="text" class="command" style="width: 25em;" value="f := createNormalPoly(4)$FFPOLY(GF3) " />
</form>
<span id="commSav8-287" class="commSav" >f := createNormalPoly(4)$FFPOLY(GF3) </span>
<div id="mathAns8-287" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mo>?</mo><mn>4</mn></msup></mrow><mo>+</mo><mrow><mn>2</mn><mspace width="0.5 em" /><mrow><msup><mo>?</mo><mn>3</mn></msup></mrow></mrow><mo>+</mo><mn>2</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SparseUnivariatePolynomial PrimeField 3
</div>





<div id="spadComm8-288" class="spadComm" >
<form id="formComm8-288" action="javascript:makeRequest('8-288');" >
<input id="comm8-288" type="text" class="command" style="width: 15em;" value="GF81 := FFNBP(GF3,f); " />
</form>
<span id="commSav8-288" class="commSav" >GF81 := FFNBP(GF3,f); </span>
<div id="mathAns8-288" ></div>
</div>




<div class="returnType">
Type: Domain
</div>



<p>Let's look at a random element from this field.
</p>




<div id="spadComm8-289" class="spadComm" >
<form id="formComm8-289" action="javascript:makeRequest('8-289');" >
<input id="comm8-289" type="text" class="command" style="width: 13em;" value="r := random()$GF81 " />
</form>
<span id="commSav8-289" class="commSav" >r := random()$GF81 </span>
<div id="mathAns8-289" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mo>%</mo><msup><mi>M</mi><mrow><msup><mi>q</mi><mn>2</mn></msup></mrow></msup></mrow><mo>+</mo><mrow><mn>2</mn><mo></mo><mrow><mo>%</mo><msup><mi>M</mi><mi>q</mi></msup></mrow></mrow><mo>+</mo><mrow><mn>2</mn><mo></mo><mo>%</mo><mi>M</mi></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: 
FiniteFieldNormalBasisExtensionByPolynomial(PrimeField 3,?^4+2*?^3+2)
</div>





<div id="spadComm8-290" class="spadComm" >
<form id="formComm8-290" action="javascript:makeRequest('8-290');" >
<input id="comm8-290" type="text" class="command" style="width: 16em;" value="r * r^3 * r^9 * r^27 " />
</form>
<span id="commSav8-290" class="commSav" >r * r^3 * r^9 * r^27 </span>
<div id="mathAns8-290" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>2</mn><mo></mo><mrow><mo>%</mo><msup><mi>M</mi><mrow><msup><mi>q</mi><mn>3</mn></msup></mrow></msup></mrow></mrow><mo>+</mo><mrow><mn>2</mn><mo></mo><mrow><mo>%</mo><msup><mi>M</mi><mrow><msup><mi>q</mi><mn>2</mn></msup></mrow></msup></mrow></mrow><mo>+</mo><mrow><mn>2</mn><mo></mo><mrow><mo>%</mo><msup><mi>M</mi><mi>q</mi></msup></mrow></mrow><mo>+</mo><mrow><mn>2</mn><mo></mo><mo>%</mo><mi>M</mi></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: 
FiniteFieldNormalBasisExtensionByPolynomial(PrimeField 3,?^4+2*?^3+2)
</div>





<div id="spadComm8-291" class="spadComm" >
<form id="formComm8-291" action="javascript:makeRequest('8-291');" >
<input id="comm8-291" type="text" class="command" style="width: 5em;" value="norm r " />
</form>
<span id="commSav8-291" class="commSav" >norm r </span>
<div id="mathAns8-291" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PrimeField 3
</div>





</div>



<a name="subsec-8.11.6"/>
<div class="subsection"  id="subsec-8.11.6">
<h3 class="subsectitle">8.11.6  Conversion Operations for Finite Fields</h3>


<a name="ugxProblemFiniteConversion" class="label"/>

<p><span class="index">field:finite:conversions</span><a name="chapter-8-190"/>
</p>


<p>Let  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>K</mi></mstyle></math> be a finite field.
</p>




<div id="spadComm8-292" class="spadComm" >
<form id="formComm8-292" action="javascript:makeRequest('8-292');" >
<input id="comm8-292" type="text" class="command" style="width: 12em;" value="K := PrimeField 3 " />
</form>
<span id="commSav8-292" class="commSav" >K := PrimeField 3 </span>
<div id="mathAns8-292" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext>PrimeField3</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Domain
</div>



<p>An extension field  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>K</mi><mi>m</mi></msub></mrow></mstyle></math> of degree  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>m</mi></mstyle></math> over  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>K</mi></mstyle></math> is a subfield of an
extension field  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow></mstyle></math> of degree  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> over  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>K</mi></mstyle></math> if and only if  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>m</mi></mstyle></math>
divides  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>.
</p>




<div class="center" style="text-align: center;">


<p style="padding-left: 100px;">
<table class="begintabular">
<tr><td> <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow></mstyle></math> </td><td> </td><td></td></tr>
<tr><td> <math xmlns="&mathml;" mathsize="big"><mstyle><mo>&#x2758;</mo></mstyle></math> </td><td> </td><td></td></tr>
<tr><td> <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>K</mi><mi>m</mi></msub></mrow></mstyle></math> </td><td>  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&Longleftrightarrow;</mi></mstyle></math> </td><td>  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>m</mi><mo>&#x2223;</mo><mi>n</mi></mstyle></math> </td></tr>
<tr><td> <math xmlns="&mathml;" mathsize="big"><mstyle><mo>&#x2758;</mo></mstyle></math> </td><td> </td><td> </td></tr>
<tr><td> <math xmlns="&mathml;" mathsize="big"><mstyle><mi>K</mi></mstyle></math> </td><td> </td><td> </td></tr>
</table>
</p>



</div>



<p><span class="teletype">FiniteFieldHomomorphisms</span> provides conversion operations between
different extensions of one fixed finite ground field and between
different representations of these finite fields.
</p>


<p>Let's choose  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>m</mi></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>,
</p>




<div id="spadComm8-293" class="spadComm" >
<form id="formComm8-293" action="javascript:makeRequest('8-293');" >
<input id="comm8-293" type="text" class="command" style="width: 10em;" value="(m,n) := (4,8) " />
</form>
<span id="commSav8-293" class="commSav" >(m,n) := (4,8) </span>
<div id="mathAns8-293" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>8</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>build the field extensions,
</p>




<div id="spadComm8-294" class="spadComm" >
<form id="formComm8-294" action="javascript:makeRequest('8-294');" >
<input id="comm8-294" type="text" class="command" style="width: 22em;" value="Km := FiniteFieldExtension(K,m) " />
</form>
<span id="commSav8-294" class="commSav" >Km := FiniteFieldExtension(K,m) </span>
<div id="mathAns8-294" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext>FiniteFieldExtension(PrimeField3,4)</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Domain
</div>



<p>and pick two random elements from the smaller field.
</p>




<div id="spadComm8-295" class="spadComm" >
<form id="formComm8-295" action="javascript:makeRequest('8-295');" >
<input id="comm8-295" type="text" class="command" style="width: 22em;" value="Kn := FiniteFieldExtension(K,n) " />
</form>
<span id="commSav8-295" class="commSav" >Kn := FiniteFieldExtension(K,n) </span>
<div id="mathAns8-295" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext>FiniteFieldExtension(PrimeField3,8)</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Domain
</div>





<div id="spadComm8-296" class="spadComm" >
<form id="formComm8-296" action="javascript:makeRequest('8-296');" >
<input id="comm8-296" type="text" class="command" style="width: 12em;" value="a1 := random()$Km " />
</form>
<span id="commSav8-296" class="commSav" >a1 := random()$Km </span>
<div id="mathAns8-296" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>2</mn><mo></mo><mrow><mo>%</mo><msup><mi>A</mi><mn>3</mn></msup></mrow></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>A</mi><mn>2</mn></msup></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteFieldExtension(PrimeField 3,4)
</div>





<div id="spadComm8-297" class="spadComm" >
<form id="formComm8-297" action="javascript:makeRequest('8-297');" >
<input id="comm8-297" type="text" class="command" style="width: 12em;" value="b1 := random()$Km " />
</form>
<span id="commSav8-297" class="commSav" >b1 := random()$Km </span>
<div id="mathAns8-297" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mo>%</mo><msup><mi>A</mi><mn>3</mn></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>A</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>2</mn><mo></mo><mo>%</mo><mi>A</mi></mrow><mo>+</mo><mn>1</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteFieldExtension(PrimeField 3,4)
</div>



<p>Since  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>m</mi></mstyle></math> divides  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>K</mi><mi>m</mi></msub></mrow></mstyle></math> is a subfield of  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow></mstyle></math>.
</p>




<div id="spadComm8-298" class="spadComm" >
<form id="formComm8-298" action="javascript:makeRequest('8-298');" >
<input id="comm8-298" type="text" class="command" style="width: 10em;" value="a2 := a1 :: Kn " />
</form>
<span id="commSav8-298" class="commSav" >a2 := a1 :: Kn </span>
<div id="mathAns8-298" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>%</mo><msup><mi>B</mi><mn>4</mn></msup></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteFieldExtension(PrimeField 3,8)
</div>



<p>Therefore we can convert the elements of  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>K</mi><mi>m</mi></msub></mrow></mstyle></math>
into elements of  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow></mstyle></math>.
</p>




<div id="spadComm8-299" class="spadComm" >
<form id="formComm8-299" action="javascript:makeRequest('8-299');" >
<input id="comm8-299" type="text" class="command" style="width: 10em;" value="b2 := b1 :: Kn " />
</form>
<span id="commSav8-299" class="commSav" >b2 := b1 :: Kn </span>
<div id="mathAns8-299" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>2</mn><mo></mo><mrow><mo>%</mo><msup><mi>B</mi><mn>6</mn></msup></mrow></mrow><mo>+</mo><mrow><mn>2</mn><mo></mo><mrow><mo>%</mo><msup><mi>B</mi><mn>4</mn></msup></mrow></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>B</mi><mn>2</mn></msup></mrow><mo>+</mo><mn>1</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteFieldExtension(PrimeField 3,8)
</div>



<p>To check this, let's do some arithmetic.
</p>




<div id="spadComm8-300" class="spadComm" >
<form id="formComm8-300" action="javascript:makeRequest('8-300');" >
<input id="comm8-300" type="text" class="command" style="width: 16em;" value="a1+b1 - ((a2+b2) :: Km) " />
</form>
<span id="commSav8-300" class="commSav" >a1+b1 - ((a2+b2) :: Km) </span>
<div id="mathAns8-300" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>0</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteFieldExtension(PrimeField 3,4)
</div>





<div id="spadComm8-301" class="spadComm" >
<form id="formComm8-301" action="javascript:makeRequest('8-301');" >
<input id="comm8-301" type="text" class="command" style="width: 16em;" value="a1*b1 - ((a2*b2) :: Km) " />
</form>
<span id="commSav8-301" class="commSav" >a1*b1 - ((a2*b2) :: Km) </span>
<div id="mathAns8-301" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>0</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteFieldExtension(PrimeField 3,4)
</div>



<p>There are also conversions available for the situation, when  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>K</mi><mi>m</mi></msub></mrow></mstyle></math> and
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow></mstyle></math> are represented in different ways (see
<a href="section-8.11.xhtml#ugxProblemFiniteExtensionFinite" class="ref" >ugxProblemFiniteExtensionFinite</a> ).  For example let's choose
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>K</mi><mi>m</mi></msub></mrow></mstyle></math> where the representation is 0 plus the cyclic multiplicative
group and  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow></mstyle></math> with a normal basis representation.
</p>




<div id="spadComm8-302" class="spadComm" >
<form id="formComm8-302" action="javascript:makeRequest('8-302');" >
<input id="comm8-302" type="text" class="command" style="width: 12em;" value="Km := FFCGX(K,m) " />
</form>
<span id="commSav8-302" class="commSav" >Km := FFCGX(K,m) </span>
<div id="mathAns8-302" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext>FiniteFieldCyclicGroupExtension(PrimeField3,4)</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Domain
</div>





<div id="spadComm8-303" class="spadComm" >
<form id="formComm8-303" action="javascript:makeRequest('8-303');" >
<input id="comm8-303" type="text" class="command" style="width: 12em;" value="Kn := FFNBX(K,n) " />
</form>
<span id="commSav8-303" class="commSav" >Kn := FFNBX(K,n) </span>
<div id="mathAns8-303" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext>FiniteFieldNormalBasisExtension(PrimeField3,8)</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Domain
</div>





<div id="spadComm8-304" class="spadComm" >
<form id="formComm8-304" action="javascript:makeRequest('8-304');" >
<input id="comm8-304" type="text" class="command" style="width: 25em;" value="(a1,b1) := (random()$Km,random()$Km) " />
</form>
<span id="commSav8-304" class="commSav" >(a1,b1) := (random()$Km,random()$Km) </span>
<div id="mathAns8-304" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>%</mo><msup><mi>C</mi><mn>13</mn></msup></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteFieldCyclicGroupExtension(PrimeField 3,4)
</div>





<div id="spadComm8-305" class="spadComm" >
<form id="formComm8-305" action="javascript:makeRequest('8-305');" >
<input id="comm8-305" type="text" class="command" style="width: 10em;" value="a2 := a1 :: Kn " />
</form>
<span id="commSav8-305" class="commSav" >a2 := a1 :: Kn </span>
<div id="mathAns8-305" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>2</mn><mo></mo><mrow><mo>%</mo><msup><mi>D</mi><mrow><msup><mi>q</mi><mn>6</mn></msup></mrow></msup></mrow></mrow><mo>+</mo><mrow><mn>2</mn><mo></mo><mrow><mo>%</mo><msup><mi>D</mi><mrow><msup><mi>q</mi><mn>5</mn></msup></mrow></msup></mrow></mrow><mo>+</mo><mrow><mn>2</mn><mo></mo><mrow><mo>%</mo><msup><mi>D</mi><mrow><msup><mi>q</mi><mn>4</mn></msup></mrow></msup></mrow></mrow><mo>+</mo><mrow><mn>2</mn><mo></mo><mrow><mo>%</mo><msup><mi>D</mi><mrow><msup><mi>q</mi><mn>2</mn></msup></mrow></msup></mrow></mrow><mo>+</mo><mrow><mn>2</mn><mo></mo><mrow><mo>%</mo><msup><mi>D</mi><mi>q</mi></msup></mrow></mrow><mo>+</mo><mrow><mn>2</mn><mo></mo><mo>%</mo><mi>D</mi></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteFieldNormalBasisExtension(PrimeField 3,8)
</div>





<div id="spadComm8-306" class="spadComm" >
<form id="formComm8-306" action="javascript:makeRequest('8-306');" >
<input id="comm8-306" type="text" class="command" style="width: 10em;" value="b2 := b1 :: Kn " />
</form>
<span id="commSav8-306" class="commSav" >b2 := b1 :: Kn </span>
<div id="mathAns8-306" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>2</mn><mo></mo><mrow><mo>%</mo><msup><mi>D</mi><mrow><msup><mi>q</mi><mn>7</mn></msup></mrow></msup></mrow></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>D</mi><mrow><msup><mi>q</mi><mn>6</mn></msup></mrow></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>D</mi><mrow><msup><mi>q</mi><mn>5</mn></msup></mrow></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>D</mi><mrow><msup><mi>q</mi><mn>4</mn></msup></mrow></msup></mrow><mo>+</mo><mrow><mn>2</mn><mo></mo><mrow><mo>%</mo><msup><mi>D</mi><mrow><msup><mi>q</mi><mn>3</mn></msup></mrow></msup></mrow></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>D</mi><mrow><msup><mi>q</mi><mn>2</mn></msup></mrow></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>D</mi><mi>q</mi></msup></mrow><mo>+</mo><mo>%</mo><mi>D</mi></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteFieldNormalBasisExtension(PrimeField 3,8)
</div>



<p>Check the arithmetic again.
</p>




<div id="spadComm8-307" class="spadComm" >
<form id="formComm8-307" action="javascript:makeRequest('8-307');" >
<input id="comm8-307" type="text" class="command" style="width: 16em;" value="a1+b1 - ((a2+b2) :: Km) " />
</form>
<span id="commSav8-307" class="commSav" >a1+b1 - ((a2+b2) :: Km) </span>
<div id="mathAns8-307" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>0</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteFieldCyclicGroupExtension(PrimeField 3,4)
</div>





<div id="spadComm8-308" class="spadComm" >
<form id="formComm8-308" action="javascript:makeRequest('8-308');" >
<input id="comm8-308" type="text" class="command" style="width: 16em;" value="a1*b1 - ((a2*b2) :: Km) " />
</form>
<span id="commSav8-308" class="commSav" >a1*b1 - ((a2*b2) :: Km) </span>
<div id="mathAns8-308" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>0</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteFieldCyclicGroupExtension(PrimeField 3,4)
</div>





</div>



<a name="subsec-8.11.7"/>
<div class="subsection"  id="subsec-8.11.7">
<h3 class="subsectitle">8.11.7  Utility Operations for Finite Fields</h3>


<a name="ugxProblemFiniteUtility" class="label"/>


<p><span class="teletype">FiniteFieldPolynomialPackage</span> (abbreviation <span class="teletype">FFPOLY</span>)
provides operations for generating, counting and testing polynomials
over finite fields. Let's start with a couple of definitions:
</p>



<ul>
<li>
 A polynomial is <span class="italic">primitive</span> if its roots are primitive
<span class="index">polynomial:primitive</span><a name="chapter-8-191"/>
elements in an extension of the coefficient field of degree equal
to the degree of the polynomial.
</li>
<li> A polynomial is <span class="italic">normal</span> over its coefficient field
<span class="index">polynomial:normal</span><a name="chapter-8-192"/>
if its roots are linearly independent
elements in an extension of the coefficient field of degree equal
to the degree of the polynomial.
</li>
</ul>



<p>In what follows, many of the generated polynomials have one
<span class="italic">anonymous</span> variable.  This indeterminate is displayed as a question
mark (<span class="teletype"><span class="italic">?</span></span>).
</p>


<p>To fix ideas, let's use the field with five elements for the first
few examples.
</p>




<div id="spadComm8-309" class="spadComm" >
<form id="formComm8-309" action="javascript:makeRequest('8-309');" >
<input id="comm8-309" type="text" class="command" style="width: 9em;" value="GF5 := PF 5; " />
</form>
<span id="commSav8-309" class="commSav" >GF5 := PF 5; </span>
<div id="mathAns8-309" ></div>
</div>




<div class="returnType">
Type: Domain
</div>



<p>You can generate irreducible polynomials of any (positive) degree
<span class="index">polynomial:irreducible</span><a name="chapter-8-193"/> (within the storage capabilities of the
computer and your ability to wait) by using
<span class="spadfunFrom" >createIrreduciblePoly</span><span class="index">createIrreduciblePoly</span><a name="chapter-8-194"/><span class="index">FiniteFieldPolynomialPackage</span><a name="chapter-8-195"/>.
</p>




<div id="spadComm8-310" class="spadComm" >
<form id="formComm8-310" action="javascript:makeRequest('8-310');" >
<input id="comm8-310" type="text" class="command" style="width: 28em;" value="f := createIrreduciblePoly(8)$FFPOLY(GF5) " />
</form>
<span id="commSav8-310" class="commSav" >f := createIrreduciblePoly(8)$FFPOLY(GF5) </span>
<div id="mathAns8-310" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mo>?</mo><mn>8</mn></msup></mrow><mo>+</mo><mrow><msup><mo>?</mo><mn>4</mn></msup></mrow><mo>+</mo><mn>2</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SparseUnivariatePolynomial PrimeField 5
</div>



<p>Does this polynomial have other important properties? Use
<span style="font-weight: bold;"> primitive?</span> to test whether it is a primitive polynomial.
</p>




<div id="spadComm8-311" class="spadComm" >
<form id="formComm8-311" action="javascript:makeRequest('8-311');" >
<input id="comm8-311" type="text" class="command" style="width: 18em;" value="primitive?(f)$FFPOLY(GF5) " />
</form>
<span id="commSav8-311" class="commSav" >primitive?(f)$FFPOLY(GF5) </span>
<div id="mathAns8-311" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>Use <span style="font-weight: bold;"> normal?</span> to test whether it is a normal polynomial.
</p>




<div id="spadComm8-312" class="spadComm" >
<form id="formComm8-312" action="javascript:makeRequest('8-312');" >
<input id="comm8-312" type="text" class="command" style="width: 16em;" value="normal?(f)$FFPOLY(GF5) " />
</form>
<span id="commSav8-312" class="commSav" >normal?(f)$FFPOLY(GF5) </span>
<div id="mathAns8-312" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>




<p>Note that this is actually a trivial case, because a normal polynomial
of degree  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> must have a nonzero term of degree  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>-</mo><mn>1</mn></mrow></mstyle></math>.  We will refer
back to this later.
</p>


<p>To get a primitive polynomial of degree 8 just issue this.
</p>




<div id="spadComm8-313" class="spadComm" >
<form id="formComm8-313" action="javascript:makeRequest('8-313');" >
<input id="comm8-313" type="text" class="command" style="width: 27em;" value="p := createPrimitivePoly(8)$FFPOLY(GF5) " />
</form>
<span id="commSav8-313" class="commSav" >p := createPrimitivePoly(8)$FFPOLY(GF5) </span>
<div id="mathAns8-313" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mo>?</mo><mn>8</mn></msup></mrow><mo>+</mo><mrow><msup><mo>?</mo><mn>3</mn></msup></mrow><mo>+</mo><mrow><msup><mo>?</mo><mn>2</mn></msup></mrow><mo>+</mo><mo>?</mo><mo>+</mo><mn>2</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SparseUnivariatePolynomial PrimeField 5
</div>





<div id="spadComm8-314" class="spadComm" >
<form id="formComm8-314" action="javascript:makeRequest('8-314');" >
<input id="comm8-314" type="text" class="command" style="width: 18em;" value="primitive?(p)$FFPOLY(GF5) " />
</form>
<span id="commSav8-314" class="commSav" >primitive?(p)$FFPOLY(GF5) </span>
<div id="mathAns8-314" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>This polynomial is not normal,
</p>




<div id="spadComm8-315" class="spadComm" >
<form id="formComm8-315" action="javascript:makeRequest('8-315');" >
<input id="comm8-315" type="text" class="command" style="width: 16em;" value="normal?(p)$FFPOLY(GF5) " />
</form>
<span id="commSav8-315" class="commSav" >normal?(p)$FFPOLY(GF5) </span>
<div id="mathAns8-315" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>but if you want a normal one simply write this.
</p>




<div id="spadComm8-316" class="spadComm" >
<form id="formComm8-316" action="javascript:makeRequest('8-316');" >
<input id="comm8-316" type="text" class="command" style="width: 26em;" value="n := createNormalPoly(8)$FFPOLY(GF5)  " />
</form>
<span id="commSav8-316" class="commSav" >n := createNormalPoly(8)$FFPOLY(GF5)  </span>
<div id="mathAns8-316" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mo>?</mo><mn>8</mn></msup></mrow><mo>+</mo><mrow><mn>4</mn><mspace width="0.5 em" /><mrow><msup><mo>?</mo><mn>7</mn></msup></mrow></mrow><mo>+</mo><mrow><msup><mo>?</mo><mn>3</mn></msup></mrow><mo>+</mo><mn>1</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SparseUnivariatePolynomial PrimeField 5
</div>



<p>This polynomial is not primitive!
</p>




<div id="spadComm8-317" class="spadComm" >
<form id="formComm8-317" action="javascript:makeRequest('8-317');" >
<input id="comm8-317" type="text" class="command" style="width: 18em;" value="primitive?(n)$FFPOLY(GF5) " />
</form>
<span id="commSav8-317" class="commSav" >primitive?(n)$FFPOLY(GF5) </span>
<div id="mathAns8-317" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>This could have been seen directly, as the constant term is 1 here,
which is not a primitive element up to the factor ( <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>-</mo><mn>1</mn></mrow></mstyle></math>) raised to the
degree of the polynomial.<span class="footnote">Cf. Lidl, R. &amp; Niederreiter, H.,
<span class="italic">Finite Fields,</span> Encycl. of Math. 20, (Addison-Wesley, 1983),
p.90, Th. 3.18.</span>
</p>


<p>What about polynomials that are both primitive and normal?  The
existence of such a polynomial is by no means obvious.
<span class="footnote">The existence of such polynomials is proved in
Lenstra, H. W. &amp; Schoof, R. J., <span class="italic">Primitive
Normal Bases for Finite Fields,</span> Math. Comp. 48, 1987, pp. 217-231.</span>
</p>



<p>If you really need one use either
<span class="spadfunFrom" >createPrimitiveNormalPoly</span><span class="index">createPrimitiveNormalPoly</span><a name="chapter-8-196"/><span class="index">FiniteFieldPolynomialPackage</span><a name="chapter-8-197"/> or
<span class="spadfunFrom" >createNormalPrimitivePoly</span><span class="index">createNormalPrimitivePoly</span><a name="chapter-8-198"/><span class="index">FiniteFieldPolynomialPackage</span><a name="chapter-8-199"/>.
</p>




<div id="spadComm8-318" class="spadComm" >
<form id="formComm8-318" action="javascript:makeRequest('8-318');" >
<input id="comm8-318" type="text" class="command" style="width: 28em;" value="createPrimitiveNormalPoly(8)$FFPOLY(GF5) " />
</form>
<span id="commSav8-318" class="commSav" >createPrimitiveNormalPoly(8)$FFPOLY(GF5) </span>
<div id="mathAns8-318" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mo>?</mo><mn>8</mn></msup></mrow><mo>+</mo><mrow><mn>4</mn><mspace width="0.5 em" /><mrow><msup><mo>?</mo><mn>7</mn></msup></mrow></mrow><mo>+</mo><mrow><mn>2</mn><mspace width="0.5 em" /><mrow><msup><mo>?</mo><mn>5</mn></msup></mrow></mrow><mo>+</mo><mn>2</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SparseUnivariatePolynomial PrimeField 5
</div>



<p>If you want to obtain additional polynomials of the various types
above as given by the <span style="font-weight: bold;"> create...</span> operations above, you can use
the <span style="font-weight: bold;"> next...</span> operations.  For instance,
<span class="spadfunFrom" >nextIrreduciblePoly</span><span class="index">nextIrreduciblePoly</span><a name="chapter-8-200"/><span class="index">FiniteFieldPolynomialPackage</span><a name="chapter-8-201"/> yields
the next monic irreducible polynomial with the same degree as the
input polynomial.  By <span class="italic">next</span> we mean <span class="italic">next in a natural order using
the terms and coefficients.</span>  This will become more clear in the
following examples.
</p>


<p>This is the field with five elements.
</p>




<div id="spadComm8-319" class="spadComm" >
<form id="formComm8-319" action="javascript:makeRequest('8-319');" >
<input id="comm8-319" type="text" class="command" style="width: 9em;" value="GF5 := PF 5; " />
</form>
<span id="commSav8-319" class="commSav" >GF5 := PF 5; </span>
<div id="mathAns8-319" ></div>
</div>




<div class="returnType">
Type: Domain
</div>



<p>Our first example irreducible polynomial, say of degree 3, must be
<span class="italic">greater</span> than this.
</p>




<div id="spadComm8-320" class="spadComm" >
<form id="formComm8-320" action="javascript:makeRequest('8-320');" >
<input id="comm8-320" type="text" class="command" style="width: 19em;" value="h := monomial(1,8)$SUP(GF5) " />
</form>
<span id="commSav8-320" class="commSav" >h := monomial(1,8)$SUP(GF5) </span>
<div id="mathAns8-320" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><msup><mo>?</mo><mn>8</mn></msup></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SparseUnivariatePolynomial PrimeField 5
</div>



<p>You can generate it by doing this.
</p>




<div id="spadComm8-321" class="spadComm" >
<form id="formComm8-321" action="javascript:makeRequest('8-321');" >
<input id="comm8-321" type="text" class="command" style="width: 28em;" value="nh := nextIrreduciblePoly(h)$FFPOLY(GF5) " />
</form>
<span id="commSav8-321" class="commSav" >nh := nextIrreduciblePoly(h)$FFPOLY(GF5) </span>
<div id="mathAns8-321" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mo>?</mo><mn>8</mn></msup></mrow><mo>+</mo><mn>2</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union(SparseUnivariatePolynomial PrimeField 5,...)
</div>



<p>Notice that this polynomial is not the same as the one
<span class="spadfunFrom" >createIrreduciblePoly</span><span class="index">createIrreduciblePoly</span><a name="chapter-8-202"/><span class="index">FiniteFieldPolynomialPackage</span><a name="chapter-8-203"/>.
</p>




<div id="spadComm8-322" class="spadComm" >
<form id="formComm8-322" action="javascript:makeRequest('8-322');" >
<input id="comm8-322" type="text" class="command" style="width: 25em;" value="createIrreduciblePoly(3)$FFPOLY(GF5) " />
</form>
<span id="commSav8-322" class="commSav" >createIrreduciblePoly(3)$FFPOLY(GF5) </span>
<div id="mathAns8-322" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mo>?</mo><mn>3</mn></msup></mrow><mo>+</mo><mo>?</mo><mo>+</mo><mn>1</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SparseUnivariatePolynomial PrimeField 5
</div>



<p>You can step through all irreducible polynomials of degree 8 over
the field with 5 elements by repeatedly issuing this.
</p>




<div id="spadComm8-323" class="spadComm" >
<form id="formComm8-323" action="javascript:makeRequest('8-323');" >
<input id="comm8-323" type="text" class="command" style="width: 28em;" value="nh := nextIrreduciblePoly(nh)$FFPOLY(GF5) " />
</form>
<span id="commSav8-323" class="commSav" >nh := nextIrreduciblePoly(nh)$FFPOLY(GF5) </span>
<div id="mathAns8-323" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mo>?</mo><mn>8</mn></msup></mrow><mo>+</mo><mn>3</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union(SparseUnivariatePolynomial PrimeField 5,...)
</div>



<p>You could also ask for the total number of these.
</p>




<div id="spadComm8-324" class="spadComm" >
<form id="formComm8-324" action="javascript:makeRequest('8-324');" >
<input id="comm8-324" type="text" class="command" style="width: 26em;" value="numberOfIrreduciblePoly(5)$FFPOLY(GF5) " />
</form>
<span id="commSav8-324" class="commSav" >numberOfIrreduciblePoly(5)$FFPOLY(GF5) </span>
<div id="mathAns8-324" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>624</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>We hope that <span class="italic">natural order</span> on polynomials is now clear: first we
compare the number of monomials of two polynomials (<span class="italic">more</span> is
<span class="italic">greater</span>); then, if necessary, the degrees of these monomials
(lexicographically), and lastly their coefficients (also
lexicographically, and using the operation <span style="font-weight: bold;"> lookup</span> if our field
is not a prime field).  Also note that we make both polynomials monic
before looking at the coefficients: multiplying either polynomial by a
nonzero constant produces the same result.
</p>


<p>The package <span class="teletype">FiniteFieldPolynomialPackage</span> also provides similar
operations for primitive and normal polynomials. With the exception of
the number of primitive normal polynomials; we're not aware of any
known formula for this.
</p>




<div id="spadComm8-325" class="spadComm" >
<form id="formComm8-325" action="javascript:makeRequest('8-325');" >
<input id="comm8-325" type="text" class="command" style="width: 25em;" value="numberOfPrimitivePoly(3)$FFPOLY(GF5) " />
</form>
<span id="commSav8-325" class="commSav" >numberOfPrimitivePoly(3)$FFPOLY(GF5) </span>
<div id="mathAns8-325" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>20</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Take these,
</p>




<div id="spadComm8-326" class="spadComm" >
<form id="formComm8-326" action="javascript:makeRequest('8-326');" >
<input id="comm8-326" type="text" class="command" style="width: 19em;" value="m := monomial(1,1)$SUP(GF5) " />
</form>
<span id="commSav8-326" class="commSav" >m := monomial(1,1)$SUP(GF5) </span>
<div id="mathAns8-326" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>?</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SparseUnivariatePolynomial PrimeField 5
</div>





<div id="spadComm8-327" class="spadComm" >
<form id="formComm8-327" action="javascript:makeRequest('8-327');" >
<input id="comm8-327" type="text" class="command" style="width: 18em;" value="f := m^3 + 4*m^2 + m + 2 " />
</form>
<span id="commSav8-327" class="commSav" >f := m^3 + 4*m^2 + m + 2 </span>
<div id="mathAns8-327" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mo>?</mo><mn>3</mn></msup></mrow><mo>+</mo><mrow><mn>4</mn><mspace width="0.5 em" /><mrow><msup><mo>?</mo><mn>2</mn></msup></mrow></mrow><mo>+</mo><mo>?</mo><mo>+</mo><mn>2</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SparseUnivariatePolynomial PrimeField 5
</div>



<p>and then we have:
</p>




<div id="spadComm8-328" class="spadComm" >
<form id="formComm8-328" action="javascript:makeRequest('8-328');" >
<input id="comm8-328" type="text" class="command" style="width: 26em;" value="f1 := nextPrimitivePoly(f)$FFPOLY(GF5) " />
</form>
<span id="commSav8-328" class="commSav" >f1 := nextPrimitivePoly(f)$FFPOLY(GF5) </span>
<div id="mathAns8-328" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mo>?</mo><mn>3</mn></msup></mrow><mo>+</mo><mrow><mn>4</mn><mspace width="0.5 em" /><mrow><msup><mo>?</mo><mn>2</mn></msup></mrow></mrow><mo>+</mo><mrow><mn>4</mn><mspace width="0.5 em" /><mo>?</mo></mrow><mo>+</mo><mn>2</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union(SparseUnivariatePolynomial PrimeField 5,...)
</div>



<p>What happened?
</p>




<div id="spadComm8-329" class="spadComm" >
<form id="formComm8-329" action="javascript:makeRequest('8-329');" >
<input id="comm8-329" type="text" class="command" style="width: 23em;" value="nextPrimitivePoly(f1)$FFPOLY(GF5) " />
</form>
<span id="commSav8-329" class="commSav" >nextPrimitivePoly(f1)$FFPOLY(GF5) </span>
<div id="mathAns8-329" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mo>?</mo><mn>3</mn></msup></mrow><mo>+</mo><mrow><mn>2</mn><mspace width="0.5 em" /><mrow><msup><mo>?</mo><mn>2</mn></msup></mrow></mrow><mo>+</mo><mn>3</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union(SparseUnivariatePolynomial PrimeField 5,...)
</div>



<p>Well, for the ordering used in
<span class="spadfunFrom" >nextPrimitivePoly</span><span class="index">nextPrimitivePoly</span><a name="chapter-8-204"/><span class="index">FiniteFieldPolynomialPackage</span><a name="chapter-8-205"/> we use
as first criterion a comparison of the constant terms of the
polynomials.  Analogously, in
<span class="spadfunFrom" >nextNormalPoly</span><span class="index">nextNormalPoly</span><a name="chapter-8-206"/><span class="index">FiniteFieldPolynomialPackage</span><a name="chapter-8-207"/> we first
compare the monomials of degree 1 less than the degree of the
polynomials (which is nonzero, by an earlier remark).
</p>




<div id="spadComm8-330" class="spadComm" >
<form id="formComm8-330" action="javascript:makeRequest('8-330');" >
<input id="comm8-330" type="text" class="command" style="width: 19em;" value="f := m^3 + m^2 + 4*m + 1  " />
</form>
<span id="commSav8-330" class="commSav" >f := m^3 + m^2 + 4*m + 1  </span>
<div id="mathAns8-330" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mo>?</mo><mn>3</mn></msup></mrow><mo>+</mo><mrow><msup><mo>?</mo><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>4</mn><mspace width="0.5 em" /><mo>?</mo></mrow><mo>+</mo><mn>1</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SparseUnivariatePolynomial PrimeField 5
</div>





<div id="spadComm8-331" class="spadComm" >
<form id="formComm8-331" action="javascript:makeRequest('8-331');" >
<input id="comm8-331" type="text" class="command" style="width: 24em;" value="f1 := nextNormalPoly(f)$FFPOLY(GF5) " />
</form>
<span id="commSav8-331" class="commSav" >f1 := nextNormalPoly(f)$FFPOLY(GF5) </span>
<div id="mathAns8-331" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mo>?</mo><mn>3</mn></msup></mrow><mo>+</mo><mrow><msup><mo>?</mo><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>4</mn><mspace width="0.5 em" /><mo>?</mo></mrow><mo>+</mo><mn>3</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union(SparseUnivariatePolynomial PrimeField 5,...)
</div>





<div id="spadComm8-332" class="spadComm" >
<form id="formComm8-332" action="javascript:makeRequest('8-332');" >
<input id="comm8-332" type="text" class="command" style="width: 21em;" value="nextNormalPoly(f1)$FFPOLY(GF5) " />
</form>
<span id="commSav8-332" class="commSav" >nextNormalPoly(f1)$FFPOLY(GF5) </span>
<div id="mathAns8-332" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mo>?</mo><mn>3</mn></msup></mrow><mo>+</mo><mrow><mn>2</mn><mspace width="0.5 em" /><mrow><msup><mo>?</mo><mn>2</mn></msup></mrow></mrow><mo>+</mo><mn>1</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union(SparseUnivariatePolynomial PrimeField 5,...)
</div>




<p>We don't have to restrict ourselves to prime fields.
</p>


<p>Let's consider, say, a field with 16 elements.
</p>




<div id="spadComm8-333" class="spadComm" >
<form id="formComm8-333" action="javascript:makeRequest('8-333');" >
<input id="comm8-333" type="text" class="command" style="width: 20em;" value="GF16 := FFX(FFX(PF 2,2),2);  " />
</form>
<span id="commSav8-333" class="commSav" >GF16 := FFX(FFX(PF 2,2),2);  </span>
<div id="mathAns8-333" ></div>
</div>




<div class="returnType">
Type: Domain
</div>



<p>We can apply any of the operations described above.
</p>




<div id="spadComm8-334" class="spadComm" >
<form id="formComm8-334" action="javascript:makeRequest('8-334');" >
<input id="comm8-334" type="text" class="command" style="width: 26em;" value="createIrreduciblePoly(5)$FFPOLY(GF16) " />
</form>
<span id="commSav8-334" class="commSav" >createIrreduciblePoly(5)$FFPOLY(GF16) </span>
<div id="mathAns8-334" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mo>?</mo><mn>5</mn></msup></mrow><mo>+</mo><mo>%</mo><mi>G</mi></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SparseUnivariatePolynomial 
FiniteFieldExtension(FiniteFieldExtension(PrimeField 2,2),2)
</div>



<p>FriCAS also provides operations for producing random polynomials of a
given degree
</p>




<div id="spadComm8-335" class="spadComm" >
<form id="formComm8-335" action="javascript:makeRequest('8-335');" >
<input id="comm8-335" type="text" class="command" style="width: 16em;" value="random(5)$FFPOLY(GF16) " />
</form>
<span id="commSav8-335" class="commSav" >random(5)$FFPOLY(GF16) </span>
<div id="mathAns8-335" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtable><mtr><mtd><mrow><msup><mo>?</mo><mn>5</mn></msup></mrow><mo>+</mo><mrow><mrow><mo>(</mo><mrow><mo>%</mo><mi>F</mi><mspace width="0.5 em" /><mo>%</mo><mi>G</mi></mrow><mo>+</mo><mn>1</mn><mo>)</mo></mrow><mspace width="0.5 em" /><mrow><msup><mo>?</mo><mn>4</mn></msup></mrow></mrow><mo>+</mo><mrow><mo>%</mo><mi>F</mi><mspace width="0.5 em" /><mo>%</mo><mi>G</mi><mspace width="0.5 em" /><mrow><msup><mo>?</mo><mn>3</mn></msup></mrow></mrow><mo>+</mo><mrow><mrow><mo>(</mo><mo>%</mo><mi>G</mi><mo>+</mo><mo>%</mo><mi>F</mi><mo>+</mo><mn>1</mn><mo>)</mo></mrow><mspace width="0.5 em" /><mrow><msup><mo>?</mo><mn>2</mn></msup></mrow></mrow><mo>+</mo></mtd></mtr><mtr><mtd></mtd></mtr><mtr><mtd><mrow><mrow><mo>(</mo><mrow><mrow><mo>(</mo><mo>%</mo><mi>F</mi><mo>+</mo><mn>1</mn><mo>)</mo></mrow><mspace width="0.5 em" /><mo>%</mo><mi>G</mi></mrow><mo>+</mo><mo>%</mo><mi>F</mi><mo>)</mo></mrow><mspace width="0.5 em" /><mo>?</mo></mrow><mo>+</mo><mn>1</mn></mtd></mtr></mtable></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SparseUnivariatePolynomial 
FiniteFieldExtension(FiniteFieldExtension(PrimeField 2,2),2)
</div>



<p>or with degree between two given bounds.
</p>




<div id="spadComm8-336" class="spadComm" >
<form id="formComm8-336" action="javascript:makeRequest('8-336');" >
<input id="comm8-336" type="text" class="command" style="width: 17em;" value="random(3,9)$FFPOLY(GF16) " />
</form>
<span id="commSav8-336" class="commSav" >random(3,9)$FFPOLY(GF16) </span>
<div id="mathAns8-336" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mo>?</mo><mn>3</mn></msup></mrow><mo>+</mo><mrow><mrow><mo>(</mo><mrow><mo>%</mo><mi>F</mi><mspace width="0.5 em" /><mo>%</mo><mi>G</mi></mrow><mo>+</mo><mn>1</mn><mo>)</mo></mrow><mspace width="0.5 em" /><mrow><msup><mo>?</mo><mn>2</mn></msup></mrow></mrow><mo>+</mo><mrow><mrow><mo>(</mo><mo>%</mo><mi>G</mi><mo>+</mo><mo>%</mo><mi>F</mi><mo>+</mo><mn>1</mn><mo>)</mo></mrow><mspace width="0.5 em" /><mo>?</mo></mrow><mo>+</mo><mn>1</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SparseUnivariatePolynomial 
FiniteFieldExtension(FiniteFieldExtension(PrimeField 2,2),2)
</div>



<p><span class="teletype">FiniteFieldPolynomialPackage2</span> (abbreviation <span class="teletype">FFPOLY2</span>)
exports an operation <span style="font-weight: bold;"> rootOfIrreduciblePoly</span> for finding one root
of an irreducible polynomial  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math> <span class="index">polynomial:root of</span><a name="chapter-8-208"/> in an
extension field of the coefficient field.  The degree of the extension
has to be a multiple of the degree of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math>.  It is not checked whether
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math> actually is irreducible.
</p>


<p>To illustrate this operation, we fix a ground field  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>GF</mi></mstyle></math>
</p>




<div id="spadComm8-337" class="spadComm" >
<form id="formComm8-337" action="javascript:makeRequest('8-337');" >
<input id="comm8-337" type="text" class="command" style="width: 14em;" value="GF2 := PrimeField 2; " />
</form>
<span id="commSav8-337" class="commSav" >GF2 := PrimeField 2; </span>
<div id="mathAns8-337" ></div>
</div>




<div class="returnType">
Type: Domain
</div>



<p>and then an extension field.
</p>




<div id="spadComm8-338" class="spadComm" >
<form id="formComm8-338" action="javascript:makeRequest('8-338');" >
<input id="comm8-338" type="text" class="command" style="width: 12em;" value="F := FFX(GF2,12) " />
</form>
<span id="commSav8-338" class="commSav" >F := FFX(GF2,12) </span>
<div id="mathAns8-338" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext>FiniteFieldExtension(PrimeField2,12)</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Domain
</div>



<p>We construct an irreducible polynomial over  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>GF2</mi></mstyle></math>.
</p>




<div id="spadComm8-339" class="spadComm" >
<form id="formComm8-339" action="javascript:makeRequest('8-339');" >
<input id="comm8-339" type="text" class="command" style="width: 28em;" value="f := createIrreduciblePoly(6)$FFPOLY(GF2) " />
</form>
<span id="commSav8-339" class="commSav" >f := createIrreduciblePoly(6)$FFPOLY(GF2) </span>
<div id="mathAns8-339" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mo>?</mo><mn>6</mn></msup></mrow><mo>+</mo><mo>?</mo><mo>+</mo><mn>1</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SparseUnivariatePolynomial PrimeField 2
</div>



<p>We compute a root of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math>.
</p>




<div id="spadComm8-340" class="spadComm" >
<form id="formComm8-340" action="javascript:makeRequest('8-340');" >
<input id="comm8-340" type="text" class="command" style="width: 32em;" value="root := rootOfIrreduciblePoly(f)$FFPOLY2(F,GF2) " />
</form>
<span id="commSav8-340" class="commSav" >root := rootOfIrreduciblePoly(f)$FFPOLY2(F,GF2) </span>
<div id="mathAns8-340" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mo>%</mo><msup><mi>H</mi><mn>11</mn></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>H</mi><mn>8</mn></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>H</mi><mn>7</mn></msup></mrow><mo>+</mo><mrow><mo>%</mo><msup><mi>H</mi><mn>5</mn></msup></mrow><mo>+</mo><mo>%</mo><mi>H</mi><mo>+</mo><mn>1</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FiniteFieldExtension(PrimeField 2,12)
</div>



<p>and check the result
</p>



<div id="spadComm8-341" class="spadComm" >
<form id="formComm8-341" action="javascript:makeRequest('8-341');" >
<input id="comm8-341" type="text" class="command" style="width: 25em;" value="eval(f, monomial(1,1)$SUP(F) = root) " />
</form>
<span id="commSav8-341" class="commSav" >eval(f, monomial(1,1)$SUP(F) = root) </span>
<div id="mathAns8-341" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>0</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SparseUnivariatePolynomial 
FiniteFieldExtension(PrimeField 2,12)
</div>





</div>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-8.10.xhtml" style="margin-right: 10px;">Previous Section 8.10 Solution of Differential Equations</a><a href="section-8.12.xhtml" style="margin-right: 10px;">Next Section 8.12 Primary Decomposition of Ideals</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>