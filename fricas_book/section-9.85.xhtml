<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section9.85</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-9.84.xhtml" style="margin-right: 10px;">Previous Section 9.84 UniversalSegment</a><a href="section-9.86.xhtml" style="margin-right: 10px;">Next Section 9.86 Void</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-9.85">
<h2 class="sectiontitle">9.85  Vector</h2>


<a name="VectorXmpPage" class="label"/>


<p>The <span class="teletype">Vector</span> domain is used for storing data in a one-dimensional
indexed data structure.  A vector is a homogeneous data structure in
that all the components of the vector must belong to the same FriCAS
domain.  Each vector has a fixed length specified by the user; vectors
are not extensible.  This domain is similar to the 
<span class="teletype">OneDimensionalArray</span> domain, except that when the components of a 
<span class="teletype">Vector</span> belong to a <span class="teletype">Ring</span>, arithmetic operations are provided.
For more examples of operations that are defined for both <span class="teletype">Vector</span>
and <span class="teletype">OneDimensionalArray</span>, see 
<a href="section-9.57.xhtml#OneDimensionalArrayXmpPage" class="ref" >OneDimensionalArrayXmpPage</a> .
</p>


<p>As with the <span class="teletype">OneDimensionalArray</span> domain, a <span class="teletype">Vector</span> can
be created by calling the operation <span class="spadfunFrom" >new</span><span class="index">new</span><a name="chapter-9-36"/><span class="index">Vector</span><a name="chapter-9-37"/>, its components
can be accessed by calling the operations <span class="spadfunFrom" >elt</span><span class="index">elt</span><a name="chapter-9-38"/><span class="index">Vector</span><a name="chapter-9-39"/> and
<span class="spadfunFrom" >qelt</span><span class="index">qelt</span><a name="chapter-9-40"/><span class="index">Vector</span><a name="chapter-9-41"/>, and its components can be reset by calling the
operations <span class="spadfunFrom" >setelt</span><span class="index">setelt</span><a name="chapter-9-42"/><span class="index">Vector</span><a name="chapter-9-43"/> and
<span class="spadfunFrom" >qsetelt</span><span class="index">qsetelt</span><a name="chapter-9-44"/><span class="index">Vector</span><a name="chapter-9-45"/>.
</p>


<p>This creates a vector of integers of length <span class="teletype">5</span> all of whose
components are <span class="teletype">12</span>.
</p>




<div id="spadComm9-45" class="spadComm" >
<form id="formComm9-45" action="javascript:makeRequest('9-45');" >
<input id="comm9-45" type="text" class="command" style="width: 19em;" value="u : VECTOR INT := new(5,12) " />
</form>
<span id="commSav9-45" class="commSav" >u : VECTOR INT := new(5,12) </span>
<div id="mathAns9-45" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>12</mn><mo>,</mo><mn>12</mn><mo>,</mo><mn>12</mn><mo>,</mo><mn>12</mn><mo>,</mo><mn>12</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Vector Integer
</div>



<p>This is how you create a vector from a list of its components.
</p>




<div id="spadComm9-46" class="spadComm" >
<form id="formComm9-46" action="javascript:makeRequest('9-46');" >
<input id="comm9-46" type="text" class="command" style="width: 26em;" value="v : VECTOR INT := vector([1,2,3,4,5]) " />
</form>
<span id="commSav9-46" class="commSav" >v : VECTOR INT := vector([1,2,3,4,5]) </span>
<div id="mathAns9-46" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>5</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Vector Integer
</div>



<p>Indexing for vectors begins at <span class="teletype">1</span>.  The last element has index
equal to the length of the vector, which is computed by
<span class="spadopFrom" title="Vector"> #</span>.
</p>




<div id="spadComm9-47" class="spadComm" >
<form id="formComm9-47" action="javascript:makeRequest('9-47');" >
<input id="comm9-47" type="text" class="command" style="width: 4em;" value=" #(v) " />
</form>
<span id="commSav9-47" class="commSav" > #(v) </span>
<div id="mathAns9-47" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>5</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>This is the standard way to use <span class="spadfunFrom" >elt</span><span class="index">elt</span><a name="chapter-9-46"/><span class="index">Vector</span><a name="chapter-9-47"/> to extract
an element.  Functionally, it is the same as if you had typed <span class="teletype">elt(v,2)</span>.
</p>




<div id="spadComm9-48" class="spadComm" >
<form id="formComm9-48" action="javascript:makeRequest('9-48');" >
<input id="comm9-48" type="text" class="command" style="width: 3em;" value="v.2 " />
</form>
<span id="commSav9-48" class="commSav" >v.2 </span>
<div id="mathAns9-48" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>This is the standard way to use <span class="spadfunFrom" >setelt</span><span class="index">setelt</span><a name="chapter-9-48"/><span class="index">Vector</span><a name="chapter-9-49"/> to change
an element.  It is the same as if you had typed <span class="teletype">setelt(v,3,99)</span>.
</p>




<div id="spadComm9-49" class="spadComm" >
<form id="formComm9-49" action="javascript:makeRequest('9-49');" >
<input id="comm9-49" type="text" class="command" style="width: 7em;" value="v.3 := 99 " />
</form>
<span id="commSav9-49" class="commSav" >v.3 := 99 </span>
<div id="mathAns9-49" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>99</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Now look at <span class="teletype">v</span> to see the change.  You can use
<span class="spadfunFrom" >qelt</span><span class="index">qelt</span><a name="chapter-9-50"/><span class="index">Vector</span><a name="chapter-9-51"/> and <span class="spadfunFrom" >qsetelt</span><span class="index">qsetelt</span><a name="chapter-9-52"/><span class="index">Vector</span><a name="chapter-9-53"/> (instead
of <span class="spadfunFrom" >elt</span><span class="index">elt</span><a name="chapter-9-54"/><span class="index">Vector</span><a name="chapter-9-55"/> and <span class="spadfunFrom" >setelt</span><span class="index">setelt</span><a name="chapter-9-56"/><span class="index">Vector</span><a name="chapter-9-57"/>,
respectively) but <span class="italic">only</span> when you know that the index is within
the valid range.
</p>




<div id="spadComm9-50" class="spadComm" >
<form id="formComm9-50" action="javascript:makeRequest('9-50');" >
<input id="comm9-50" type="text" class="command" style="width: 2em;" value="v " />
</form>
<span id="commSav9-50" class="commSav" >v </span>
<div id="mathAns9-50" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>99</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>5</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Vector Integer
</div>



<p>When the components belong to a <span class="teletype">Ring</span>, FriCAS provides arithmetic
operations for <span class="teletype">Vector</span>.  These include left and right scalar
multiplication.
</p>




<div id="spadComm9-51" class="spadComm" >
<form id="formComm9-51" action="javascript:makeRequest('9-51');" >
<input id="comm9-51" type="text" class="command" style="width: 4em;" value="5 * v " />
</form>
<span id="commSav9-51" class="commSav" >5 * v </span>
<div id="mathAns9-51" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>5</mn><mo>,</mo><mn>10</mn><mo>,</mo><mn>495</mn><mo>,</mo><mn>20</mn><mo>,</mo><mn>25</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Vector Integer
</div>





<div id="spadComm9-52" class="spadComm" >
<form id="formComm9-52" action="javascript:makeRequest('9-52');" >
<input id="comm9-52" type="text" class="command" style="width: 4em;" value="v * 7 " />
</form>
<span id="commSav9-52" class="commSav" >v * 7 </span>
<div id="mathAns9-52" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>7</mn><mo>,</mo><mn>14</mn><mo>,</mo><mn>693</mn><mo>,</mo><mn>28</mn><mo>,</mo><mn>35</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Vector Integer
</div>





<div id="spadComm9-53" class="spadComm" >
<form id="formComm9-53" action="javascript:makeRequest('9-53');" >
<input id="comm9-53" type="text" class="command" style="width: 26em;" value="w : VECTOR INT := vector([2,3,4,5,6]) " />
</form>
<span id="commSav9-53" class="commSav" >w : VECTOR INT := vector([2,3,4,5,6]) </span>
<div id="mathAns9-53" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>6</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Vector Integer
</div>



<p>Addition and subtraction are also available.
</p>




<div id="spadComm9-54" class="spadComm" >
<form id="formComm9-54" action="javascript:makeRequest('9-54');" >
<input id="comm9-54" type="text" class="command" style="width: 4em;" value="v + w " />
</form>
<span id="commSav9-54" class="commSav" >v + w </span>
<div id="mathAns9-54" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>103</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>11</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Vector Integer
</div>



<p>Of course, when adding or subtracting, the two vectors must have the same
length or an error message is displayed.
</p>




<div id="spadComm9-55" class="spadComm" >
<form id="formComm9-55" action="javascript:makeRequest('9-55');" >
<input id="comm9-55" type="text" class="command" style="width: 4em;" value="v - w " />
</form>
<span id="commSav9-55" class="commSav" >v - w </span>
<div id="mathAns9-55" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mo>-</mo><mn>1</mn><mo>,</mo><mo>-</mo><mn>1</mn><mo>,</mo><mn>95</mn><mo>,</mo><mo>-</mo><mn>1</mn><mo>,</mo><mo>-</mo><mn>1</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Vector Integer
</div>



<p>For more information about other aggregate domains, see the following:
<a href="section-9.1.xhtml#AssociationListXmpPage" class="ref" >ListXmpPage</a> , 
<a href="section-9.52.xhtml#MatrixXmpPage" class="ref" >MatrixXmpPage</a> ,
<a href="section-9.57.xhtml#OneDimensionalArrayXmpPage" class="ref" >OneDimensionalArrayXmpPage</a> ,
<a href="section-9.53.xhtml#MultiSetXmpPage" class="ref" >SetXmpPage</a> ,
<a href="section-9.18.xhtml#EqTableXmpPage" class="ref" >TableXmpPage</a> , and 
<a href="section-9.82.xhtml#TwoDimensionalArrayXmpPage" class="ref" >TwoDimensionalArrayXmpPage</a> .
Issue the system command <span class="teletype">)show Vector</span> to display the full list of
operations defined by <span class="teletype">Vector</span>.
</p>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-9.84.xhtml" style="margin-right: 10px;">Previous Section 9.84 UniversalSegment</a><a href="section-9.86.xhtml" style="margin-right: 10px;">Next Section 9.86 Void</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>