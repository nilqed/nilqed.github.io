<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section7.2</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-7.1.xhtml" style="margin-right: 10px;">Previous Section 7.1 Two-Dimensional Graphics</a><a href="section-8.0.xhtml" style="margin-right: 10px;">Next Section 8.0 Advanced Problem Solving</a><a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-7.2">
<h2 class="sectiontitle">7.2  Three-Dimensional Graphics</h2>


<a name="ugGraphThreeD" class="label"/>



<p>The FriCAS three-dimensional graphics package provides the ability to
<span class="index">graphics:three-dimensional</span><a name="chapter-7-121"/>
</p>




<ul>
<li>
 generate surfaces defined by a function of two real variables
</li>
<li> generate space curves and tubes defined by parametric equations
</li>
<li> generate surfaces defined by parametric equations
</li>
</ul>


<p>These graphs can be modified by using various options, such as calculating
points in the spherical coordinate system or changing the polygon grid size
of a surface.
</p>



<a name="subsec-7.2.1"/>
<div class="subsection"  id="subsec-7.2.1">
<h3 class="subsectitle">7.2.1  Plotting Three-Dimensional Functions of Two Variables</h3>


<a name="ugGraphThreeDPlot" class="label"/>


<p><span class="index">surface:two variable function</span><a name="chapter-7-122"/>
The simplest three-dimensional graph is that of a surface defined by a function
of two variables,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>z</mi><mo>=</mo><mi>f</mi><mo>(</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo>)</mo></mrow></mstyle></math>.
</p>




<div class="boxed2">


<div class="boxed">



<p>The general format for drawing a surface defined by a formula  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo>)</mo></mrow></mstyle></math>
of two variables  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math> is:
</p>




<div class="center" style="text-align: center;">


<p><span class="teletype">draw(f(x,y), x = a..b, y = c..d, <span class="italic">options</span>)</span>
</p>



</div>


<p>where  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>a</mi><mo>.</mo><mo>.</mo><mi>b</mi></mrow></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>c</mi><mo>.</mo><mo>.</mo><mi>d</mi></mrow></mstyle></math> define the range of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math>
and  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math>, and where <span class="italic">options</span> prescribes zero or more
options as described in <a href="section-7.2.xhtml#ugGraphThreeDOptions" class="ref" >ugGraphThreeDOptions</a> 
.
An example of an option is  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>title</mi><mo>=</mo><mo>=</mo><mo>"</mo><mi>Title</mi><mi>of</mi><mi>Graph</mi><mo>"</mo><mo>.</mo></mrow></mstyle></math>
An alternative format involving a function  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math> is also
available.<br/>
</p>



</div>
</div>



<p>The simplest way to plot a function of two variables is to use a formula.
With formulas you always precede the range specifications with
the variable name and an <span class="teletype">=</span> sign.
</p>




<div class="spadgraph" style="width: 15em">
draw(cos(x*y),x=-3..3,y=-3..3)
</div>






<p>If you intend to use a function more than once,
or it is long and complex, then first
give its definition to FriCAS.
</p>




<div id="spadComm7-53" class="spadComm" >
<form id="formComm7-53" action="javascript:makeRequest('7-53');" >
<input id="comm7-53" type="text" class="command" style="width: 16em;" value="f(x,y) == sin(x)*cos(y) " />
</form>
<span id="commSav7-53" class="commSav" >f(x,y) == sin(x)*cos(y) </span>
<div id="mathAns7-53" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>To draw the function, just give its name and drop the variables
from the range specifications.
FriCAS compiles your function for efficient computation
of data for the graph.
Notice that FriCAS uses the text of your function as a
default title.
</p>




<div class="spadgraph" style="width: 16em">
draw(f,-%pi..%pi,-%pi..%pi) 
</div>








</div>



<a name="subsec-7.2.2"/>
<div class="subsection"  id="subsec-7.2.2">
<h3 class="subsectitle">7.2.2  Plotting Three-Dimensional Parametric Space Curves</h3>


<a name="ugGraphThreeDParm" class="label"/>



<p>A second kind of three-dimensional graph is a three-dimensional space curve
<span class="index">curve:parametric space</span><a name="chapter-7-123"/>
defined by the parametric equations for  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>x</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow></mstyle></math>,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>y</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow></mstyle></math>,
<span class="index">parametric space curve</span><a name="chapter-7-124"/>
and  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>z</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow></mstyle></math> as a function of an independent variable  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>t</mi></mstyle></math>.
</p>




<div class="boxed2">


<div class="boxed">



<p>The general format for drawing a three-dimensional space curve defined by
parametric formulas  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>x</mi><mo>=</mo><mi>f</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow></mstyle></math>,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>y</mi><mo>=</mo><mi>g</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow></mstyle></math>, and
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>z</mi><mo>=</mo><mi>h</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow></mstyle></math> is:
</p>




<div class="center" style="text-align: center;">


<p><span class="teletype">draw(curve(f(t),g(t),h(t)), t = a..b, <span class="italic">options</span>)</span>
</p>



</div>


<p>where  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>a</mi><mo>.</mo><mo>.</mo><mi>b</mi></mrow></mstyle></math> defines the range of the independent variable
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>t</mi></mstyle></math>, and where <span class="italic">options</span> prescribes zero or more options
as described in <a href="section-7.2.xhtml#ugGraphThreeDOptions" class="ref" >ugGraphThreeDOptions</a> 
.
An example of an option is  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>title</mi><mo>=</mo><mo>=</mo><mo>"</mo><mi>Title</mi><mi>of</mi><mi>Graph</mi><mo>"</mo><mo>.</mo></mrow></mstyle></math>
An alternative format involving functions  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math>,  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>g</mi></mstyle></math> and
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>h</mi></mstyle></math> is also available.<br/>
</p>



</div>
</div>



<p>If you use explicit formulas to draw a space curve, always precede
the range specification with the variable name and an
<span class="teletype">=</span> sign.
</p>




<div class="spadgraph" style="width: 22em">
draw(curve(5*cos(t), 5*sin(t),t), t=-12..12)
</div>






<p>Alternatively, you can draw space curves by referring to functions.
</p>




<div id="spadComm7-54" class="spadComm" >
<form id="formComm7-54" action="javascript:makeRequest('7-54');" >
<input id="comm7-54" type="text" class="command" style="width: 28em;" value="i1(t:DFLOAT):DFLOAT == sin(t)*cos(3*t/5) " />
</form>
<span id="commSav7-54" class="commSav" >i1(t:DFLOAT):DFLOAT == sin(t)*cos(3*t/5) </span>
<div id="mathAns7-54" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Function&nbsp;declaration&nbsp;i1&nbsp;:&nbsp;DoubleFloat&nbsp;-&gt;&nbsp;DoubleFloat&nbsp;has&nbsp;been&nbsp;added&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;workspace.<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>This is useful if the functions are to be used more than once ...
</p>




<div id="spadComm7-55" class="spadComm" >
<form id="formComm7-55" action="javascript:makeRequest('7-55');" >
<input id="comm7-55" type="text" class="command" style="width: 28em;" value="i2(t:DFLOAT):DFLOAT == cos(t)*cos(3*t/5) " />
</form>
<span id="commSav7-55" class="commSav" >i2(t:DFLOAT):DFLOAT == cos(t)*cos(3*t/5) </span>
<div id="mathAns7-55" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Function&nbsp;declaration&nbsp;i2&nbsp;:&nbsp;DoubleFloat&nbsp;-&gt;&nbsp;DoubleFloat&nbsp;has&nbsp;been&nbsp;added&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;workspace.<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>or if the functions are long and complex.
</p>




<div id="spadComm7-56" class="spadComm" >
<form id="formComm7-56" action="javascript:makeRequest('7-56');" >
<input id="comm7-56" type="text" class="command" style="width: 28em;" value="i3(t:DFLOAT):DFLOAT == cos(t)*sin(3*t/5) " />
</form>
<span id="commSav7-56" class="commSav" >i3(t:DFLOAT):DFLOAT == cos(t)*sin(3*t/5) </span>
<div id="mathAns7-56" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Function&nbsp;declaration&nbsp;i3&nbsp;:&nbsp;DoubleFloat&nbsp;-&gt;&nbsp;DoubleFloat&nbsp;has&nbsp;been&nbsp;added&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;workspace.<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Give the names of the functions and
drop the variable name specification in the second argument.
Again, FriCAS supplies a default title.
</p>




<div class="spadgraph" style="width: 17em">
draw(curve(i1,i2,i3),0..15*%pi) 
</div>








</div>



<a name="subsec-7.2.3"/>
<div class="subsection"  id="subsec-7.2.3">
<h3 class="subsectitle">7.2.3  Plotting Three-Dimensional Parametric Surfaces</h3>


<a name="ugGraphThreeDPar" class="label"/>


<p><span class="index">surface:parametric</span><a name="chapter-7-125"/>
A third kind of three-dimensional graph is a surface defined by
<span class="index">parametric surface</span><a name="chapter-7-126"/>
parametric equations for  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>x</mi><mo>(</mo><mi>u</mi><mo>,</mo><mi>v</mi><mo>)</mo></mrow></mstyle></math>,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>y</mi><mo>(</mo><mi>u</mi><mo>,</mo><mi>v</mi><mo>)</mo></mrow></mstyle></math>, and
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>z</mi><mo>(</mo><mi>u</mi><mo>,</mo><mi>v</mi><mo>)</mo></mrow></mstyle></math> of two independent variables  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>u</mi></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>v</mi></mstyle></math>.
</p>





<div class="boxed2">


<div class="boxed">



<p>The general format for drawing a three-dimensional graph defined by
parametric formulas  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>x</mi><mo>=</mo><mi>f</mi><mo>(</mo><mi>u</mi><mo>,</mo><mi>v</mi><mo>)</mo></mrow></mstyle></math>,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>y</mi><mo>=</mo><mi>g</mi><mo>(</mo><mi>u</mi><mo>,</mo><mi>v</mi><mo>)</mo></mrow></mstyle></math>,
and  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>z</mi><mo>=</mo><mi>h</mi><mo>(</mo><mi>u</mi><mo>,</mo><mi>v</mi><mo>)</mo></mrow></mstyle></math> is:
</p>




<div class="center" style="text-align: center;">


<p><span class="teletype">draw(surface(f(u,v),g(u,v),h(u,v)), u = a..b, v = c..d, <span class="italic">options</span>)</span>
</p>



</div>


<p>where  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>a</mi><mo>.</mo><mo>.</mo><mi>b</mi></mrow></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>c</mi><mo>.</mo><mo>.</mo><mi>d</mi></mrow></mstyle></math> define the range of the
independent variables  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>u</mi></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>v</mi></mstyle></math>, and where
<span class="italic">options</span> prescribes zero or more options as described in
<a href="section-7.2.xhtml#ugGraphThreeDOptions" class="ref" >ugGraphThreeDOptions</a> .
An example of an option is  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>title</mi><mo>=</mo><mo>=</mo><mo>"</mo><mi>Title</mi><mi>of</mi><mi>Graph</mi><mo>"</mo><mo>.</mo></mrow></mstyle></math>
An alternative format involving functions  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math>,  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>g</mi></mstyle></math> and
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>h</mi></mstyle></math> is also available.<br/>
</p>



</div>
</div>



<p>This example draws a graph of a surface plotted using the
parabolic cylindrical coordinate system option.
<span class="index">coordinate system:parabolic cylindrical</span><a name="chapter-7-127"/>
The values of the functions supplied to <span style="font-weight: bold;"> surface</span> are
<span class="index">parabolic cylindrical coordinate system</span><a name="chapter-7-128"/>
interpreted in coordinates as given by a <span class="teletype">coordinates</span> option,
here as parabolic cylindrical coordinates (see
<a href="section-7.2.xhtml#ugGraphCoord" class="ref" >ugGraphCoord</a> ).
</p>




<div class="spadgraph" style="width: 50em">
draw(surface(u*cos(v), u*sin(v), v*cos(u)), u=-4..4, v=0..%pi, coordinates== parabolicCylindrical)
</div>






<p>Again, you can graph these parametric surfaces using functions,
if the functions are long and complex.
</p>


<p>Here we declare the types of arguments and values to be of type
<span class="teletype">DoubleFloat</span>.
</p>




<div id="spadComm7-57" class="spadComm" >
<form id="formComm7-57" action="javascript:makeRequest('7-57');" >
<input id="comm7-57" type="text" class="command" style="width: 28em;" value="n1(u:DFLOAT,v:DFLOAT):DFLOAT == u*cos(v) " />
</form>
<span id="commSav7-57" class="commSav" >n1(u:DFLOAT,v:DFLOAT):DFLOAT == u*cos(v) </span>
<div id="mathAns7-57" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Function&nbsp;declaration&nbsp;n1&nbsp;:&nbsp;DoubleFloat&nbsp;-&gt;&nbsp;DoubleFloat&nbsp;has&nbsp;been&nbsp;added&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;workspace.<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>As shown by previous examples, these declarations are necessary.
</p>




<div id="spadComm7-58" class="spadComm" >
<form id="formComm7-58" action="javascript:makeRequest('7-58');" >
<input id="comm7-58" type="text" class="command" style="width: 28em;" value="n2(u:DFLOAT,v:DFLOAT):DFLOAT == u*sin(v) " />
</form>
<span id="commSav7-58" class="commSav" >n2(u:DFLOAT,v:DFLOAT):DFLOAT == u*sin(v) </span>
<div id="mathAns7-58" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Function&nbsp;declaration&nbsp;n2&nbsp;:&nbsp;DoubleFloat&nbsp;-&gt;&nbsp;DoubleFloat&nbsp;has&nbsp;been&nbsp;added&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;workspace.<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>In either case, FriCAS compiles the functions
when needed to graph a result.
</p>




<div id="spadComm7-59" class="spadComm" >
<form id="formComm7-59" action="javascript:makeRequest('7-59');" >
<input id="comm7-59" type="text" class="command" style="width: 23em;" value="n3(u:DFLOAT,v:DFLOAT):DFLOAT == u " />
</form>
<span id="commSav7-59" class="commSav" >n3(u:DFLOAT,v:DFLOAT):DFLOAT == u </span>
<div id="mathAns7-59" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Function&nbsp;declaration&nbsp;n3&nbsp;:&nbsp;DoubleFloat&nbsp;-&gt;&nbsp;DoubleFloat&nbsp;has&nbsp;been&nbsp;added&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;workspace.<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Without these declarations, you have to suffix floats
with  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>@</mo><mi>DFLOAT</mi></mrow></mstyle></math> to get a <span class="teletype">DoubleFloat</span> result.
However, a call here with an unadorned float produces a <span class="teletype">DoubleFloat</span>.
</p>




<div id="spadComm7-60" class="spadComm" >
<form id="formComm7-60" action="javascript:makeRequest('7-60');" >
<input id="comm7-60" type="text" class="command" style="width: 8em;" value="n3(0.5,1.0)" />
</form>
<span id="commSav7-60" class="commSav" >n3(0.5,1.0)</span>
<div id="mathAns7-60" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;n3&nbsp;with&nbsp;type&nbsp;(DoubleFloat,DoubleFloat)&nbsp;-&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleFloat&nbsp;<br />
</div>




<div class="returnType">
Type: DoubleFloat
</div>



<p>Draw the surface by referencing the function names, this time
choosing the toroidal coordinate system.
<span class="index">coordinate system:toroidal</span><a name="chapter-7-129"/>
<span class="index">toroidal coordinate system</span><a name="chapter-7-130"/>
</p>




<div class="spadgraph" style="width: 38em">
draw(surface(n1,n2,n3), 1..4, 1..2*%pi, coordinates == toroidal(1$DFLOAT)) 
</div>








</div>



<a name="subsec-7.2.4"/>
<div class="subsection"  id="subsec-7.2.4">
<h3 class="subsectitle">7.2.4  Three-Dimensional Options</h3>


<a name="ugGraphThreeDOptions" class="label"/>


<p><span class="index">graphics:3D options</span><a name="chapter-7-131"/>
The <span style="font-weight: bold;"> draw</span> commands optionally take an optional list of options such
as <span class="teletype">coordinates</span> as shown in the last example.
Each option is given by the syntax:  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>name</mi></mstyle></math> <span class="teletype">==</span>  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>value</mi></mstyle></math>.
Here is a list of the available options in the order that they are
described below:
</p>


<p><table class="begintabular">
<tr><td>title</td><td>coordinates</td><td>var1Steps</td></tr>
<tr><td>style</td><td>tubeRadius</td><td>var2Steps</td></tr>
<tr><td>colorFunction</td><td>tubePoints</td><td>space</td></tr>
</table>
</p>


<p>The option  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>title</mi></mstyle></math> gives your graph a title.
<span class="index">graphics:3D options:title</span><a name="chapter-7-132"/>
</p>




<div class="spadgraph" style="width: 32em">
draw(cos(x*y),x=0..2*%pi,y=0..%pi,title == "Title of Graph") 
</div>






<p>The  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>style</mi></mstyle></math> determines which of four rendering algorithms is used for
<span class="index">rendering</span><a name="chapter-7-133"/>
the graph.
The choices are
<span class="teletype">"wireMesh"</span>, <span class="teletype">"solid"</span>, <span class="teletype">"shade"</span>, and <span class="teletype">"smooth"</span>.
</p>




<div class="spadgraph" style="width: 36em">
draw(cos(x*y),x=-3..3,y=-3..3, style=="smooth", title=="Smooth Option")
</div>






<p>In all but the wire-mesh style, polygons in a surface or tube plot
are normally colored in a graph according to their
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>z</mi></mstyle></math>-coordinate value.  Space curves are colored according to their
parametric variable value.
<span class="index">graphics:3D options:color function</span><a name="chapter-7-134"/>
To change this, you can give a coloring function.
<span class="index">function:coloring</span><a name="chapter-7-135"/>
The coloring function is sampled across the range of its arguments, then
normalized onto the standard FriCAS colormap.
</p>


<p>A function of one variable  makes the color depend on the
value of the parametric variable specified for a tube plot.
</p>




<div id="spadComm7-61" class="spadComm" >
<form id="formComm7-61" action="javascript:makeRequest('7-61');" >
<input id="comm7-61" type="text" class="command" style="width: 10em;" value="color1(t) == t " />
</form>
<span id="commSav7-61" class="commSav" >color1(t) == t </span>
<div id="mathAns7-61" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div class="spadgraph" style="width: 43em">
draw(curve(sin(t), cos(t),0), t=0..2*%pi, tubeRadius == .3, colorFunction == color1) 
</div>






<p>A function of two variables makes the color depend on the
values of the independent variables.
</p>




<div id="spadComm7-62" class="spadComm" >
<form id="formComm7-62" action="javascript:makeRequest('7-62');" >
<input id="comm7-62" type="text" class="command" style="width: 18em;" value="color2(u,v) == u^2 - v^2 " />
</form>
<span id="commSav7-62" class="commSav" >color2(u,v) == u^2 - v^2 </span>
<div id="mathAns7-62" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Use the option <span class="teletype">colorFunction</span> for special coloring.
</p>




<div class="spadgraph" style="width: 29em">
draw(cos(u*v), u=-3..3, v=-3..3, colorFunction == color2) 
</div>






<p>With a three variable function, the
color also depends on the value of the function.
</p>




<div id="spadComm7-63" class="spadComm" >
<form id="formComm7-63" action="javascript:makeRequest('7-63');" >
<input id="comm7-63" type="text" class="command" style="width: 29em;" value="color3(x,y,fxy) == sin(x*fxy) + cos(y*fxy) " />
</form>
<span id="commSav7-63" class="commSav" >color3(x,y,fxy) == sin(x*fxy) + cos(y*fxy) </span>
<div id="mathAns7-63" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div class="spadgraph" style="width: 29em">
draw(cos(x*y), x=-3..3, y=-3..3, colorFunction == color3) 
</div>






<p>Normally the Cartesian coordinate system is used.
<span class="index">Cartesian:coordinate system</span><a name="chapter-7-136"/>
To change this, use the <span class="teletype">coordinates</span> option.
<span class="index">coordinate system:Cartesian</span><a name="chapter-7-137"/>
For details, see <a href="section-7.2.xhtml#ugGraphCoord" class="ref" >ugGraphCoord</a> .
</p>




<div id="spadComm7-64" class="spadComm" >
<form id="formComm7-64" action="javascript:makeRequest('7-64');" >
<input id="comm7-64" type="text" class="command" style="width: 22em;" value="m(u:DFLOAT,v:DFLOAT):DFLOAT == 1 " />
</form>
<span id="commSav7-64" class="commSav" >m(u:DFLOAT,v:DFLOAT):DFLOAT == 1 </span>
<div id="mathAns7-64" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Function&nbsp;declaration&nbsp;m&nbsp;:&nbsp;(DoubleFloat,DoubleFloat)&nbsp;-&gt;&nbsp;DoubleFloat&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;has&nbsp;been&nbsp;added&nbsp;to&nbsp;workspace.<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Use the spherical
<span class="index">spherical coordinate system</span><a name="chapter-7-138"/>
coordinate system.
<span class="index">coordinate system:spherical</span><a name="chapter-7-139"/>
</p>




<div class="spadgraph" style="width: 35em">
draw(m, 0..2*%pi,0..%pi, coordinates == spherical, style=="shade") 
</div>






<p>Space curves may be displayed as tubes with polygonal cross sections.
<span class="index">tube</span><a name="chapter-7-140"/>
Two options, <span class="teletype">tubeRadius</span> and <span class="teletype">tubePoints</span>,  control the size and
shape of this cross section.
</p>



<p>The <span class="teletype">tubeRadius</span> option specifies the radius of the tube that
<span class="index">tube:radius</span><a name="chapter-7-141"/>
encircles the specified space curve.
</p>




<div class="spadgraph" style="width: 37em">
draw(curve(sin(t),cos(t),0),t=0..2*%pi, style=="shade", tubeRadius == .3)
</div>






<p>The <span class="teletype">tubePoints</span> option specifies the number of vertices
<span class="index">tube:points in polygon</span><a name="chapter-7-142"/>
defining the polygon that is used to create a tube around the
specified space curve.
The larger this number is, the more cylindrical the tube becomes.
</p>




<div class="spadgraph" style="width: 48em">
draw(curve(sin(t), cos(t), 0), t=0..2*%pi, style=="shade", tubeRadius == .25, tubePoints == 3)
</div>






<p><span class="index">graphics:3D options:variable steps</span><a name="chapter-7-143"/>
</p>



<p>Options <span class="spadfunFrom" >var1Steps</span><span class="index">var1Steps</span><a name="chapter-7-144"/><span class="index">DrawOption</span><a name="chapter-7-145"/> and
<span class="spadfunFrom" >var2Steps</span><span class="index">var2Steps</span><a name="chapter-7-146"/><span class="index">DrawOption</span><a name="chapter-7-147"/> specify the number of intervals into
which the grid defining a surface plot is subdivided with respect to the
first and second parameters of the surface function(s).
</p>




<div class="spadgraph" style="width: 40em">
draw(cos(x*y),x=-3..3,y=-3..3, style=="shade", var1Steps == 30, var2Steps == 30)
</div>






<p>The <span class="teletype">space</span> option
of a <span style="font-weight: bold;"> draw</span> command lets you build multiple graphs in three space.
To use this option, first create an empty three-space object,
then use the <span class="teletype">space</span> option thereafter.
There is no restriction as to the number or kinds
of graphs that can be combined this way.
</p>


<p>Create an empty three-space object.
</p>




<div id="spadComm7-65" class="spadComm" >
<form id="formComm7-65" action="javascript:makeRequest('7-65');" >
<input id="comm7-65" type="text" class="command" style="width: 27em;" value="s := create3Space()$(ThreeSpace DFLOAT) " />
</form>
<span id="commSav7-65" class="commSav" >s := create3Space()$(ThreeSpace DFLOAT) </span>
<div id="mathAns7-65" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>-</mo><mi>Space</mi><mi>with</mi></mrow><mn>0</mn><mtext><mrow><mtext>components</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ThreeSpace DoubleFloat
</div>





<div id="spadComm7-66" class="spadComm" >
<form id="formComm7-66" action="javascript:makeRequest('7-66');" >
<input id="comm7-66" type="text" class="command" style="width: 22em;" value="m(u:DFLOAT,v:DFLOAT):DFLOAT == 1 " />
</form>
<span id="commSav7-66" class="commSav" >m(u:DFLOAT,v:DFLOAT):DFLOAT == 1 </span>
<div id="mathAns7-66" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Function&nbsp;declaration&nbsp;m&nbsp;:&nbsp;(DoubleFloat,DoubleFloat)&nbsp;-&gt;&nbsp;DoubleFloat&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;has&nbsp;been&nbsp;added&nbsp;to&nbsp;workspace.<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Add a graph to this three-space object.
The new graph destructively inserts the graph
into  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>s</mi></mstyle></math>.
</p>




<div class="spadgraph" style="width: 32em">
draw(m,0..%pi,0..2*%pi, coordinates == spherical, space == s) 
</div>






<p>Add a second graph to  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>s</mi></mstyle></math>.
</p>




<div class="spadgraph" style="width: 44em">
v := draw(curve(1.5*sin(t), 1.5*cos(t),0), t=0..2*%pi, tubeRadius == .25, space == s)  
</div>






<p>A three-space object can also be obtained from an existing three-dimensional viewport
using the <span class="spadfunFrom" >subspace</span><span class="index">subspace</span><a name="chapter-7-148"/><span class="index">ThreeSpace</span><a name="chapter-7-149"/> command.
You can then use <span style="font-weight: bold;"> makeViewport3D</span> to create a viewport window.
</p>


<p>Assign to  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>subsp</mi></mstyle></math> the three-space object in viewport  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>v</mi></mstyle></math>.
</p>




<div id="spadComm7-67" class="spadComm" >
<form id="formComm7-67" action="javascript:makeRequest('7-67');" >
<input id="comm7-67" type="text" class="command" style="width: 14em;" value="subsp := subspace v  " />
</form>
<span id="commSav7-67" class="commSav" >subsp := subspace v  </span>
<div id="mathAns7-67" ></div>
</div>



<p>Reset the space component of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>v</mi></mstyle></math> to the value of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>subsp</mi></mstyle></math>.
</p>




<div id="spadComm7-68" class="spadComm" >
<form id="formComm7-68" action="javascript:makeRequest('7-68');" >
<input id="comm7-68" type="text" class="command" style="width: 14em;" value="subspace(v, subsp)  " />
</form>
<span id="commSav7-68" class="commSav" >subspace(v, subsp)  </span>
<div id="mathAns7-68" ></div>
</div>



<p>Create a viewport window from a three-space object.
</p>




<div class="spadgraph" style="width: 16em">
makeViewport3D(subsp,"Graphs") 
</div>





</div>



<a name="subsec-7.2.5"/>
<div class="subsection"  id="subsec-7.2.5">
<h3 class="subsectitle">7.2.5  The makeObject Command</h3>


<a name="ugGraphMakeObject" class="label"/>


<p>An alternate way to create multiple graphs is to use
<span style="font-weight: bold;"> makeObject</span>.
The <span style="font-weight: bold;"> makeObject</span> command is similar to the <span style="font-weight: bold;"> draw</span>
command, except that it returns a three-space object rather than a
<span class="teletype">ThreeDimensionalViewport</span>.
In fact, <span style="font-weight: bold;"> makeObject</span> is called by the <span style="font-weight: bold;"> draw</span>
command to create the <span class="teletype">ThreeSpace</span> then
<span class="spadfunFrom" >makeViewport3D</span><span class="index">makeViewport3D</span><a name="chapter-7-150"/><span class="index">ThreeDimensionalViewport</span><a name="chapter-7-151"/> to create a
viewport window.
</p>




<div id="spadComm7-69" class="spadComm" >
<form id="formComm7-69" action="javascript:makeRequest('7-69');" >
<input id="comm7-69" type="text" class="command" style="width: 22em;" value="m(u:DFLOAT,v:DFLOAT):DFLOAT == 1 " />
</form>
<span id="commSav7-69" class="commSav" >m(u:DFLOAT,v:DFLOAT):DFLOAT == 1 </span>
<div id="mathAns7-69" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Function&nbsp;declaration&nbsp;m&nbsp;:&nbsp;(DoubleFloat,DoubleFloat)&nbsp;-&gt;&nbsp;DoubleFloat&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;has&nbsp;been&nbsp;added&nbsp;to&nbsp;workspace.<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Do the last example a new way.
First use <span style="font-weight: bold;"> makeObject</span> to
create a three-space object  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>sph</mi></mstyle></math>.
</p>




<div id="spadComm7-70" class="spadComm" >
<form id="formComm7-70" action="javascript:makeRequest('7-70');" >
<input id="comm7-70" type="text" class="command" style="width: 43em;" value="sph := makeObject(m, 0..%pi, 0..2*%pi, coordinates==spherical)" />
</form>
<span id="commSav7-70" class="commSav" >sph := makeObject(m, 0..%pi, 0..2*%pi, coordinates==spherical)</span>
<div id="mathAns7-70" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;m&nbsp;with&nbsp;type&nbsp;(DoubleFloat,DoubleFloat)&nbsp;-&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleFloat&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>-</mo><mi>Space</mi><mi>with</mi></mrow><mn>1</mn><mtext><mrow><mtext>component</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ThreeSpace DoubleFloat
</div>



<p>Add a second object to  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>sph</mi></mstyle></math>.
</p>




<div id="spadComm7-71" class="spadComm" >
<form id="formComm7-71" action="javascript:makeRequest('7-71');" >
<input id="comm7-71" type="text" class="command" style="width: 61em;" value="makeObject(curve(1.5*sin(t), 1.5*cos(t), 0), t=0..2*%pi, space == sph, tubeRadius == .25) " />
</form>
<span id="commSav7-71" class="commSav" >makeObject(curve(1.5*sin(t), 1.5*cos(t), 0), t=0..2*%pi, space == sph, tubeRadius == .25) </span>
<div id="mathAns7-71" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;%D&nbsp;with&nbsp;type&nbsp;DoubleFloat&nbsp;-&gt;&nbsp;DoubleFloat&nbsp;<br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;%F&nbsp;with&nbsp;type&nbsp;DoubleFloat&nbsp;-&gt;&nbsp;DoubleFloat&nbsp;<br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;%H&nbsp;with&nbsp;type&nbsp;DoubleFloat&nbsp;-&gt;&nbsp;DoubleFloat&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>-</mo><mi>Space</mi><mi>with</mi></mrow><mn>2</mn><mtext><mrow><mtext>components</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ThreeSpace DoubleFloat
</div>



<p>Create and display a viewport
containing  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>sph</mi></mstyle></math>.
</p>




<div class="spadgraph" style="width: 20em">
makeViewport3D(sph,"Multiple Objects") 
</div>



<p>Note that an undefined <span class="teletype">ThreeSpace</span> parameter declared in a
<span style="font-weight: bold;"> makeObject</span> or <span style="font-weight: bold;"> draw</span> command results in an error.
Use the <span class="spadfunFrom" >create3Space</span><span class="index">create3Space</span><a name="chapter-7-152"/><span class="index">ThreeSpace</span><a name="chapter-7-153"/> function to define a
<span class="teletype">ThreeSpace</span>, or obtain a <span class="teletype">ThreeSpace</span> that has been
previously generated before including it in a command line.
</p>




</div>



<a name="subsec-7.2.6"/>
<div class="subsection"  id="subsec-7.2.6">
<h3 class="subsectitle">7.2.6  Building Three-Dimensional Objects From Primitives</h3>


<a name="ugGraphThreeDBuild" class="label"/>


<p>Rather than using the <span style="font-weight: bold;"> draw</span> and <span style="font-weight: bold;"> makeObject</span> commands,
<span class="index">graphics:advanced:build 3D objects</span><a name="chapter-7-154"/>
you can create three-dimensional graphs from primitives.
Operation <span class="spadfunFrom" >create3Space</span><span class="index">create3Space</span><a name="chapter-7-155"/><span class="index">ThreeSpace</span><a name="chapter-7-156"/> creates a
three-space object to which points, curves and polygons
can be added using the operations from the <span class="teletype">ThreeSpace</span>
domain.
The resulting object can then be displayed in a viewport using
<span class="spadfunFrom" >makeViewport3D</span><span class="index">makeViewport3D</span><a name="chapter-7-157"/><span class="index">ThreeDimensionalViewport</span><a name="chapter-7-158"/>.
</p>


<p>Create the empty three-space object  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>space</mi></mstyle></math>.
</p>




<div id="spadComm7-72" class="spadComm" >
<form id="formComm7-72" action="javascript:makeRequest('7-72');" >
<input id="comm7-72" type="text" class="command" style="width: 30em;" value="space := create3Space()$(ThreeSpace DFLOAT) " />
</form>
<span id="commSav7-72" class="commSav" >space := create3Space()$(ThreeSpace DFLOAT) </span>
<div id="mathAns7-72" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>-</mo><mi>Space</mi><mi>with</mi></mrow><mn>0</mn><mtext><mrow><mtext>components</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ThreeSpace DoubleFloat
</div>



<p>Objects can be sent to this  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>space</mi></mstyle></math> using the operations
exported by the <span class="teletype">ThreeSpace</span> domain.
<span class="index">ThreeSpace</span><a name="chapter-7-159"/>
The following examples place curves into  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>space</mi></mstyle></math>.
</p>


<p>Add these eight curves to the space.
</p>




<div id="spadComm7-73" class="spadComm" >
<form id="formComm7-73" action="javascript:makeRequest('7-73');" >
<input id="comm7-73" type="text" class="command" style="width: 107em;" value="closedCurve(space,[ [0,30,20], [0,30,30], [0,40,30], [0,40,100], [0,30,100],[0,30,110], [0,60,110], [0,60,100], [0,50,100], [0,50,30], [0,60,30], [0,60,20] ])  " />
</form>
<span id="commSav7-73" class="commSav" >closedCurve(space,[ [0,30,20], [0,30,30], [0,40,30], [0,40,100], [0,30,100],[0,30,110], [0,60,110], [0,60,100], [0,50,100], [0,50,30], [0,60,30], [0,60,20] ])  </span>
<div id="mathAns7-73" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>-</mo><mi>Space</mi><mi>with</mi></mrow><mn>1</mn><mtext><mrow><mtext>component</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ThreeSpace DoubleFloat
</div>





<div id="spadComm7-74" class="spadComm" >
<form id="formComm7-74" action="javascript:makeRequest('7-74');" >
<input id="comm7-74" type="text" class="command" style="width: 108em;" value="closedCurve(space,[ [80,0,30], [80,0,100], [70,0,110], [40,0,110], [30,0,100], [30,0,90], [40,0,90], [40,0,95], [45,0,100], [65,0,100], [70,0,95], [70,0,35] ])  " />
</form>
<span id="commSav7-74" class="commSav" >closedCurve(space,[ [80,0,30], [80,0,100], [70,0,110], [40,0,110], [30,0,100], [30,0,90], [40,0,90], [40,0,95], [45,0,100], [65,0,100], [70,0,95], [70,0,35] ])  </span>
<div id="mathAns7-74" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>-</mo><mi>Space</mi><mi>with</mi></mrow><mn>2</mn><mtext><mrow><mtext>components</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ThreeSpace DoubleFloat
</div>





<div id="spadComm7-75" class="spadComm" >
<form id="formComm7-75" action="javascript:makeRequest('7-75');" >
<input id="comm7-75" type="text" class="command" style="width: 104em;" value="closedCurve(space,[ [70,0,35], [65,0,30], [45,0,30], [40,0,35], [40,0,60], [50,0,60], [50,0,70], [30,0,70], [30,0,30], [40,0,20], [70,0,20], [80,0,30] ])  " />
</form>
<span id="commSav7-75" class="commSav" >closedCurve(space,[ [70,0,35], [65,0,30], [45,0,30], [40,0,35], [40,0,60], [50,0,60], [50,0,70], [30,0,70], [30,0,30], [40,0,20], [70,0,20], [80,0,30] ])  </span>
<div id="mathAns7-75" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>-</mo><mi>Space</mi><mi>with</mi></mrow><mn>3</mn><mtext><mrow><mtext>components</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ThreeSpace DoubleFloat
</div>





<div id="spadComm7-76" class="spadComm" >
<form id="formComm7-76" action="javascript:makeRequest('7-76');" >
<input id="comm7-76" type="text" class="command" style="width: 110em;" value="closedCurve(space,[ [0,70,20], [0,70,110], [0,110,110], [0,120,100], [0,120,70], [0,115,65], [0,120,60], [0,120,30], [0,110,20], [0,80,20], [0,80,30], [0,80,20] ])  " />
</form>
<span id="commSav7-76" class="commSav" >closedCurve(space,[ [0,70,20], [0,70,110], [0,110,110], [0,120,100], [0,120,70], [0,115,65], [0,120,60], [0,120,30], [0,110,20], [0,80,20], [0,80,30], [0,80,20] ])  </span>
<div id="mathAns7-76" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>-</mo><mi>Space</mi><mi>with</mi></mrow><mn>4</mn><mtext><mrow><mtext>components</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ThreeSpace DoubleFloat
</div>





<div id="spadComm7-77" class="spadComm" >
<form id="formComm7-77" action="javascript:makeRequest('7-77');" >
<input id="comm7-77" type="text" class="command" style="width: 118em;" value="closedCurve(space,[ [0,105,30], [0,110,35], [0,110,55], [0,105,60], [0,80,60], [0,80,70], [0,105,70], [0,110,75], [0,110,95], [0,105,100], [0,80,100], [0,80,20], [0,80,30] ])  " />
</form>
<span id="commSav7-77" class="commSav" >closedCurve(space,[ [0,105,30], [0,110,35], [0,110,55], [0,105,60], [0,80,60], [0,80,70], [0,105,70], [0,110,75], [0,110,95], [0,105,100], [0,80,100], [0,80,20], [0,80,30] ])  </span>
<div id="mathAns7-77" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>-</mo><mi>Space</mi><mi>with</mi></mrow><mn>5</mn><mtext><mrow><mtext>components</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ThreeSpace DoubleFloat
</div>





<div id="spadComm7-78" class="spadComm" >
<form id="formComm7-78" action="javascript:makeRequest('7-78');" >
<input id="comm7-78" type="text" class="command" style="width: 104em;" value="closedCurve(space,[ [140,0,20], [140,0,110], [130,0,110], [90,0,20], [101,0,20],[114,0,50], [130,0,50], [130,0,60], [119,0,60], [130,0,85], [130,0,20] ])  " />
</form>
<span id="commSav7-78" class="commSav" >closedCurve(space,[ [140,0,20], [140,0,110], [130,0,110], [90,0,20], [101,0,20],[114,0,50], [130,0,50], [130,0,60], [119,0,60], [130,0,85], [130,0,20] ])  </span>
<div id="mathAns7-78" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>-</mo><mi>Space</mi><mi>with</mi></mrow><mn>6</mn><mtext><mrow><mtext>components</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ThreeSpace DoubleFloat
</div>





<div id="spadComm7-79" class="spadComm" >
<form id="formComm7-79" action="javascript:makeRequest('7-79');" >
<input id="comm7-79" type="text" class="command" style="width: 122em;" value="closedCurve(space,[ [0,140,20], [0,140,110], [0,150,110], [0,170,50], [0,190,110], [0,200,110], [0,200,20], [0,190,20], [0,190,75], [0,175,35], [0,165,35],[0,150,75], [0,150,20] ])  " />
</form>
<span id="commSav7-79" class="commSav" >closedCurve(space,[ [0,140,20], [0,140,110], [0,150,110], [0,170,50], [0,190,110], [0,200,110], [0,200,20], [0,190,20], [0,190,75], [0,175,35], [0,165,35],[0,150,75], [0,150,20] ])  </span>
<div id="mathAns7-79" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>-</mo><mi>Space</mi><mi>with</mi></mrow><mn>7</mn><mtext><mrow><mtext>components</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ThreeSpace DoubleFloat
</div>





<div id="spadComm7-80" class="spadComm" >
<form id="formComm7-80" action="javascript:makeRequest('7-80');" >
<input id="comm7-80" type="text" class="command" style="width: 98em;" value="closedCurve(space,[ [200,0,20], [200,0,110], [189,0,110], [160,0,45], [160,0,110], [150,0,110], [150,0,20], [161,0,20], [190,0,85], [190,0,20] ])  " />
</form>
<span id="commSav7-80" class="commSav" >closedCurve(space,[ [200,0,20], [200,0,110], [189,0,110], [160,0,45], [160,0,110], [150,0,110], [150,0,20], [161,0,20], [190,0,85], [190,0,20] ])  </span>
<div id="mathAns7-80" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>-</mo><mi>Space</mi><mi>with</mi></mrow><mn>8</mn><mtext><mrow><mtext>components</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ThreeSpace DoubleFloat
</div>



<p>Create and display the viewport using <span style="font-weight: bold;"> makeViewport3D</span>.
Options may also be given but here are displayed as a list with values
enclosed in parentheses.
</p>




<div class="spadgraph" style="width: 21em">
makeViewport3D(space, title == "Letters") 
</div>







<a name="subsubsec-7.2.6.1"/>
<div class="subsubsection"  id="subsubsec-7.2.6.1">
<h3 class="subsubsectitle">7.2.6.1  Cube Example</h3>



<p>As a second example of the use of primitives, we generate a cube using a
polygon mesh.
It is important to use a consistent orientation of the polygons for
correct generation of three-dimensional objects.
</p>


<p>Again start with an empty three-space object.
</p>




<div id="spadComm7-81" class="spadComm" >
<form id="formComm7-81" action="javascript:makeRequest('7-81');" >
<input id="comm7-81" type="text" class="command" style="width: 30em;" value="spaceC := create3Space()$(ThreeSpace DFLOAT) " />
</form>
<span id="commSav7-81" class="commSav" >spaceC := create3Space()$(ThreeSpace DFLOAT) </span>
<div id="mathAns7-81" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>-</mo><mi>Space</mi><mi>with</mi></mrow><mn>0</mn><mtext><mrow><mtext>components</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ThreeSpace DoubleFloat
</div>



<p>For convenience,
give <span class="teletype">DoubleFloat</span> values  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>+</mo><mn>1</mn></mrow></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>-</mo><mn>1</mn></mrow></mstyle></math> names.
</p>




<div id="spadComm7-82" class="spadComm" >
<form id="formComm7-82" action="javascript:makeRequest('7-82');" >
<input id="comm7-82" type="text" class="command" style="width: 10em;" value="x: DFLOAT := 1 " />
</form>
<span id="commSav7-82" class="commSav" >x: DFLOAT := 1 </span>
<div id="mathAns7-82" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: DoubleFloat
</div>





<div id="spadComm7-83" class="spadComm" >
<form id="formComm7-83" action="javascript:makeRequest('7-83');" >
<input id="comm7-83" type="text" class="command" style="width: 11em;" value="y: DFLOAT := -1 " />
</form>
<span id="commSav7-83" class="commSav" >y: DFLOAT := -1 </span>
<div id="mathAns7-83" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: DoubleFloat
</div>



<p>Define the vertices of the cube.
</p>




<div id="spadComm7-84" class="spadComm" >
<form id="formComm7-84" action="javascript:makeRequest('7-84');" >
<input id="comm7-84" type="text" class="command" style="width: 30em;" value="a := point [x,x,y,1::DFLOAT]$(Point DFLOAT)  " />
</form>
<span id="commSav7-84" class="commSav" >a := point [x,x,y,1::DFLOAT]$(Point DFLOAT)  </span>
<div id="mathAns7-84" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mo>-</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Point DoubleFloat
</div>





<div id="spadComm7-85" class="spadComm" >
<form id="formComm7-85" action="javascript:makeRequest('7-85');" >
<input id="comm7-85" type="text" class="command" style="width: 30em;" value="b := point [y,x,y,4::DFLOAT]$(Point DFLOAT)  " />
</form>
<span id="commSav7-85" class="commSav" >b := point [y,x,y,4::DFLOAT]$(Point DFLOAT)  </span>
<div id="mathAns7-85" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mo>-</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mo>-</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>4</mn><mo>.</mo><mn>0</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Point DoubleFloat
</div>





<div id="spadComm7-86" class="spadComm" >
<form id="formComm7-86" action="javascript:makeRequest('7-86');" >
<input id="comm7-86" type="text" class="command" style="width: 30em;" value="c := point [y,x,x,8::DFLOAT]$(Point DFLOAT)  " />
</form>
<span id="commSav7-86" class="commSav" >c := point [y,x,x,8::DFLOAT]$(Point DFLOAT)  </span>
<div id="mathAns7-86" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mo>-</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>8</mn><mo>.</mo><mn>0</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Point DoubleFloat
</div>





<div id="spadComm7-87" class="spadComm" >
<form id="formComm7-87" action="javascript:makeRequest('7-87');" >
<input id="comm7-87" type="text" class="command" style="width: 31em;" value="d := point [x,x,x,12::DFLOAT]$(Point DFLOAT)  " />
</form>
<span id="commSav7-87" class="commSav" >d := point [x,x,x,12::DFLOAT]$(Point DFLOAT)  </span>
<div id="mathAns7-87" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>12</mn><mo>.</mo><mn>0</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Point DoubleFloat
</div>





<div id="spadComm7-88" class="spadComm" >
<form id="formComm7-88" action="javascript:makeRequest('7-88');" >
<input id="comm7-88" type="text" class="command" style="width: 31em;" value="e := point [x,y,y,16::DFLOAT]$(Point DFLOAT)  " />
</form>
<span id="commSav7-88" class="commSav" >e := point [x,y,y,16::DFLOAT]$(Point DFLOAT)  </span>
<div id="mathAns7-88" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mo>-</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mo>-</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>16</mn><mo>.</mo><mn>0</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Point DoubleFloat
</div>





<div id="spadComm7-89" class="spadComm" >
<form id="formComm7-89" action="javascript:makeRequest('7-89');" >
<input id="comm7-89" type="text" class="command" style="width: 31em;" value="f := point [y,y,y,20::DFLOAT]$(Point DFLOAT)  " />
</form>
<span id="commSav7-89" class="commSav" >f := point [y,y,y,20::DFLOAT]$(Point DFLOAT)  </span>
<div id="mathAns7-89" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mo>-</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mo>-</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mo>-</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>20</mn><mo>.</mo><mn>0</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Point DoubleFloat
</div>





<div id="spadComm7-90" class="spadComm" >
<form id="formComm7-90" action="javascript:makeRequest('7-90');" >
<input id="comm7-90" type="text" class="command" style="width: 31em;" value="g := point [y,y,x,24::DFLOAT]$(Point DFLOAT)  " />
</form>
<span id="commSav7-90" class="commSav" >g := point [y,y,x,24::DFLOAT]$(Point DFLOAT)  </span>
<div id="mathAns7-90" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mo>-</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mo>-</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>24</mn><mo>.</mo><mn>0</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Point DoubleFloat
</div>





<div id="spadComm7-91" class="spadComm" >
<form id="formComm7-91" action="javascript:makeRequest('7-91');" >
<input id="comm7-91" type="text" class="command" style="width: 31em;" value="h := point [x,y,x,27::DFLOAT]$(Point DFLOAT)  " />
</form>
<span id="commSav7-91" class="commSav" >h := point [x,y,x,27::DFLOAT]$(Point DFLOAT)  </span>
<div id="mathAns7-91" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mo>-</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>27</mn><mo>.</mo><mn>0</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Point DoubleFloat
</div>



<p>Add the faces of the cube as polygons to the space using a
consistent orientation.
</p>




<div id="spadComm7-92" class="spadComm" >
<form id="formComm7-92" action="javascript:makeRequest('7-92');" >
<input id="comm7-92" type="text" class="command" style="width: 18em;" value="polygon(spaceC,[d,c,g,h])  " />
</form>
<span id="commSav7-92" class="commSav" >polygon(spaceC,[d,c,g,h])  </span>
<div id="mathAns7-92" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>-</mo><mi>Space</mi><mi>with</mi></mrow><mn>1</mn><mtext><mrow><mtext>component</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ThreeSpace DoubleFloat
</div>





<div id="spadComm7-93" class="spadComm" >
<form id="formComm7-93" action="javascript:makeRequest('7-93');" >
<input id="comm7-93" type="text" class="command" style="width: 18em;" value="polygon(spaceC,[d,h,e,a])  " />
</form>
<span id="commSav7-93" class="commSav" >polygon(spaceC,[d,h,e,a])  </span>
<div id="mathAns7-93" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>-</mo><mi>Space</mi><mi>with</mi></mrow><mn>2</mn><mtext><mrow><mtext>components</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ThreeSpace DoubleFloat
</div>





<div id="spadComm7-94" class="spadComm" >
<form id="formComm7-94" action="javascript:makeRequest('7-94');" >
<input id="comm7-94" type="text" class="command" style="width: 18em;" value="polygon(spaceC,[c,d,a,b])  " />
</form>
<span id="commSav7-94" class="commSav" >polygon(spaceC,[c,d,a,b])  </span>
<div id="mathAns7-94" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>-</mo><mi>Space</mi><mi>with</mi></mrow><mn>3</mn><mtext><mrow><mtext>components</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ThreeSpace DoubleFloat
</div>





<div id="spadComm7-95" class="spadComm" >
<form id="formComm7-95" action="javascript:makeRequest('7-95');" >
<input id="comm7-95" type="text" class="command" style="width: 18em;" value="polygon(spaceC,[g,c,b,f])  " />
</form>
<span id="commSav7-95" class="commSav" >polygon(spaceC,[g,c,b,f])  </span>
<div id="mathAns7-95" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>-</mo><mi>Space</mi><mi>with</mi></mrow><mn>4</mn><mtext><mrow><mtext>components</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ThreeSpace DoubleFloat
</div>





<div id="spadComm7-96" class="spadComm" >
<form id="formComm7-96" action="javascript:makeRequest('7-96');" >
<input id="comm7-96" type="text" class="command" style="width: 18em;" value="polygon(spaceC,[h,g,f,e])  " />
</form>
<span id="commSav7-96" class="commSav" >polygon(spaceC,[h,g,f,e])  </span>
<div id="mathAns7-96" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>-</mo><mi>Space</mi><mi>with</mi></mrow><mn>5</mn><mtext><mrow><mtext>components</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ThreeSpace DoubleFloat
</div>





<div id="spadComm7-97" class="spadComm" >
<form id="formComm7-97" action="javascript:makeRequest('7-97');" >
<input id="comm7-97" type="text" class="command" style="width: 18em;" value="polygon(spaceC,[e,f,b,a])  " />
</form>
<span id="commSav7-97" class="commSav" >polygon(spaceC,[e,f,b,a])  </span>
<div id="mathAns7-97" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>-</mo><mi>Space</mi><mi>with</mi></mrow><mn>6</mn><mtext><mrow><mtext>components</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ThreeSpace DoubleFloat
</div>



<p>Create and display the viewport.
</p>




<div class="spadgraph" style="width: 20em">
makeViewport3D(spaceC, title == "Cube") 
</div>








</div>




</div>



<a name="subsec-7.2.7"/>
<div class="subsection"  id="subsec-7.2.7">
<h3 class="subsectitle">7.2.7  Coordinate System Transformations</h3>


<a name="ugGraphCoord" class="label"/>

<p><span class="index">graphics:advanced:coordinate systems</span><a name="chapter-7-160"/>
</p>


<p>The <span class="teletype">CoordinateSystems</span> package provides coordinate transformation
functions that map a given data point from the coordinate system specified
into the Cartesian coordinate system.
<span class="index">CoordinateSystems</span><a name="chapter-7-161"/>
The default coordinate system, given a triplet  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mi>f</mi><mo>(</mo><mi>u</mi><mo>,</mo><mi>v</mi><mo>)</mo><mo>,</mo><mi>u</mi><mo>,</mo><mi>v</mi><mo>)</mo></mrow></mstyle></math>, assumes
that  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>z</mi><mo>=</mo><mi>f</mi><mo>(</mo><mi>u</mi><mo>,</mo><mi>v</mi><mo>)</mo></mrow></mstyle></math>,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>x</mi><mo>=</mo><mi>u</mi></mrow></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>y</mi><mo>=</mo><mi>v</mi></mrow></mstyle></math>,
that is, reads the coordinates in  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mi>z</mi><mo>,</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo>)</mo></mrow></mstyle></math> order.
</p>




<div id="spadComm7-98" class="spadComm" >
<form id="formComm7-98" action="javascript:makeRequest('7-98');" >
<input id="comm7-98" type="text" class="command" style="width: 24em;" value="m(u:DFLOAT,v:DFLOAT):DFLOAT == u^2 " />
</form>
<span id="commSav7-98" class="commSav" >m(u:DFLOAT,v:DFLOAT):DFLOAT == u^2 </span>
<div id="mathAns7-98" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Function&nbsp;declaration&nbsp;m&nbsp;:&nbsp;(DoubleFloat,DoubleFloat)&nbsp;-&gt;&nbsp;DoubleFloat&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;has&nbsp;been&nbsp;added&nbsp;to&nbsp;workspace.<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Graph plotted in default coordinate system.
</p>




<div class="spadgraph" style="width: 9em">
draw(m,0..3,0..5) 
</div>






<p>The  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>z</mi></mstyle></math> coordinate comes first since the first argument of
the <span style="font-weight: bold;"> draw</span> command gives its values.
In general, the coordinate systems FriCAS provides, or any
that you make up, must provide a map to an  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo>,</mo><mi>z</mi><mo>)</mo></mrow></mstyle></math> triplet in
order to be compatible with the
<span class="spadfunFrom" >coordinates</span><span class="index">coordinates</span><a name="chapter-7-162"/><span class="index">DrawOption</span><a name="chapter-7-163"/> <span class="teletype">DrawOption</span>.
<span class="index">DrawOption</span><a name="chapter-7-164"/>
Here is an example.
</p>


<p>Define the identity function.
</p>




<div id="spadComm7-99" class="spadComm" >
<form id="formComm7-99" action="javascript:makeRequest('7-99');" >
<input id="comm7-99" type="text" class="command" style="width: 35em;" value="cartesian(point:Point DFLOAT):Point DFLOAT == point " />
</form>
<span id="commSav7-99" class="commSav" >cartesian(point:Point DFLOAT):Point DFLOAT == point </span>
<div id="mathAns7-99" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Function&nbsp;declaration&nbsp;cartesian&nbsp;:&nbsp;Point&nbsp;DoubleFloat&nbsp;-&gt;&nbsp;Point&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleFloat&nbsp;has&nbsp;been&nbsp;added&nbsp;to&nbsp;workspace.<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Pass  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>cartesian</mi></mstyle></math> as the <span class="spadfunFrom" >coordinates</span><span class="index">coordinates</span><a name="chapter-7-165"/><span class="index">DrawOption</span><a name="chapter-7-166"/>
parameter to the <span style="font-weight: bold;"> draw</span> command.
</p>




<div class="spadgraph" style="width: 21em">
draw(m,0..3,0..5,coordinates==cartesian) 
</div>






<p>What happened?  The option <span class="teletype">coordinates == cartesian</span> directs
FriCAS to treat the dependent variable  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>m</mi></mstyle></math> defined by  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>m</mi><mo>=</mo><msup><mi>u</mi><mn>2</mn></msup></mrow></mstyle></math> as the
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> coordinate.  Thus the triplet of values  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mi>m</mi><mo>,</mo><mi>u</mi><mo>,</mo><mi>v</mi><mo>)</mo></mrow></mstyle></math> is transformed
to coordinates  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo>,</mo><mi>z</mi><mo>)</mo></mrow></mstyle></math> and so we get the graph of  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>x</mi><mo>=</mo><msup><mi>y</mi><mn>2</mn></msup></mrow></mstyle></math>.
</p>


<p>Here is another example.
The <span class="spadfunFrom" >cylindrical</span><span class="index">cylindrical</span><a name="chapter-7-167"/><span class="index">CoordinateSystems</span><a name="chapter-7-168"/> transform takes
<span class="index">coordinate system:cylindrical</span><a name="chapter-7-169"/>
input of the form  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mi>w</mi><mo>,</mo><mi>u</mi><mo>,</mo><mi>v</mi><mo>)</mo></mrow></mstyle></math>, interprets it in the order
<span class="index">cylindrical coordinate system</span><a name="chapter-7-170"/>
( <math xmlns="&mathml;" mathsize="big"><mstyle><mi>r</mi></mstyle></math>, <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03B8;</mi></mstyle></math>, <math xmlns="&mathml;" mathsize="big"><mstyle><mi>z</mi></mstyle></math>)
and maps it to the Cartesian coordinates
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>x</mi><mo>=</mo><mi>r</mi><mo>cos</mo><mo>(</mo><mi>&#x03B8;</mi><mo>)</mo></mrow></mstyle></math>,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>y</mi><mo>=</mo><mi>r</mi><mo>sin</mo><mo>(</mo><mi>&#x03B8;</mi><mo>)</mo></mrow></mstyle></math>,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>z</mi><mo>=</mo><mi>z</mi></mrow></mstyle></math>
in which
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>r</mi></mstyle></math> is the radius,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03B8;</mi></mstyle></math> is the angle and
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>z</mi></mstyle></math> is the z-coordinate.
</p>


<p>An example using the <span class="spadfunFrom" >cylindrical</span><span class="index">cylindrical</span><a name="chapter-7-171"/><span class="index">CoordinateSystems</span><a name="chapter-7-172"/>
coordinates for the constant  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>r</mi><mo>=</mo><mn>3</mn></mrow></mstyle></math>.
</p>




<div id="spadComm7-100" class="spadComm" >
<form id="formComm7-100" action="javascript:makeRequest('7-100');" >
<input id="comm7-100" type="text" class="command" style="width: 22em;" value="f(u:DFLOAT,v:DFLOAT):DFLOAT == 3 " />
</form>
<span id="commSav7-100" class="commSav" >f(u:DFLOAT,v:DFLOAT):DFLOAT == 3 </span>
<div id="mathAns7-100" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Function&nbsp;declaration&nbsp;f&nbsp;:&nbsp;(DoubleFloat,DoubleFloat)&nbsp;-&gt;&nbsp;DoubleFloat&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;has&nbsp;been&nbsp;added&nbsp;to&nbsp;workspace.<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Graph plotted in cylindrical coordinates.
</p>




<div class="spadgraph" style="width: 23em">
draw(f,0..%pi,0..6,coordinates==cylindrical) 
</div>






<p>Suppose you would like to specify  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>z</mi></mstyle></math> as a function of
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>r</mi></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03B8;</mi></mstyle></math> instead of just  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>r</mi></mstyle></math>?
Well, you still can use the <span style="font-weight: bold;"> cylindrical</span> FriCAS
transformation but we have to reorder the triplet before
passing it to the transformation.
</p>


<p>First, let's create a point to
work with and call it  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>pt</mi></mstyle></math> with some color  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>col</mi></mstyle></math>.
</p>




<div id="spadComm7-101" class="spadComm" >
<form id="formComm7-101" action="javascript:makeRequest('7-101');" >
<input id="comm7-101" type="text" class="command" style="width: 6em;" value="col := 5 " />
</form>
<span id="commSav7-101" class="commSav" >col := 5 </span>
<div id="mathAns7-101" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>5</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm7-102" class="spadComm" >
<form id="formComm7-102" action="javascript:makeRequest('7-102');" >
<input id="comm7-102" type="text" class="command" style="width: 26em;" value="pt := point[1,2,3,col]$(Point DFLOAT)  " />
</form>
<span id="commSav7-102" class="commSav" >pt := point[1,2,3,col]$(Point DFLOAT)  </span>
<div id="mathAns7-102" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>2</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>3</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>5</mn><mo>.</mo><mn>0</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Point DoubleFloat
</div>



<p>The reordering you want is
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mi>z</mi><mo>,</mo><mi>r</mi><mo>,</mo><mi>&#x03B8;</mi><mo>)</mo></mrow></mstyle></math> to
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mi>r</mi><mo>,</mo><mi>&#x03B8;</mi><mo>,</mo><mi>z</mi><mo>)</mo></mrow></mstyle></math>
so that the first element is moved to the third element, while the second
and third elements move forward and the color element does not change.
</p>


<p>Define a function <span style="font-weight: bold;"> reorder</span> to reorder the point elements.
</p>




<div id="spadComm7-103" class="spadComm" >
<form id="formComm7-103" action="javascript:makeRequest('7-103');" >
<input id="comm7-103" type="text" class="command" style="width: 44em;" value="reorder(p:Point DFLOAT):Point DFLOAT == point[p.2, p.3, p.1, p.4] " />
</form>
<span id="commSav7-103" class="commSav" >reorder(p:Point DFLOAT):Point DFLOAT == point[p.2, p.3, p.1, p.4] </span>
<div id="mathAns7-103" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Function&nbsp;declaration&nbsp;reorder&nbsp;:&nbsp;Point&nbsp;DoubleFloat&nbsp;-&gt;&nbsp;Point&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleFloat&nbsp;has&nbsp;been&nbsp;added&nbsp;to&nbsp;workspace.<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>The function moves the second and third elements
forward but the color does not change.
</p>




<div id="spadComm7-104" class="spadComm" >
<form id="formComm7-104" action="javascript:makeRequest('7-104');" >
<input id="comm7-104" type="text" class="command" style="width: 8em;" value="reorder pt " />
</form>
<span id="commSav7-104" class="commSav" >reorder pt </span>
<div id="mathAns7-104" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mn>2</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>3</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>5</mn><mo>.</mo><mn>0</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Point DoubleFloat
</div>



<p>The function <span style="font-weight: bold;"> newmap</span> converts our reordered version of
the cylindrical coordinate system to the standard
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo>,</mo><mi>z</mi><mo>)</mo></mrow></mstyle></math> Cartesian system.
</p>




<div id="spadComm7-105" class="spadComm" >
<form id="formComm7-105" action="javascript:makeRequest('7-105');" >
<input id="comm7-105" type="text" class="command" style="width: 44em;" value="newmap(pt:Point DFLOAT):Point DFLOAT == cylindrical(reorder pt)  " />
</form>
<span id="commSav7-105" class="commSav" >newmap(pt:Point DFLOAT):Point DFLOAT == cylindrical(reorder pt)  </span>
<div id="mathAns7-105" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Function&nbsp;declaration&nbsp;newmap&nbsp;:&nbsp;Point&nbsp;DoubleFloat&nbsp;-&gt;&nbsp;Point&nbsp;DoubleFloat<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;has&nbsp;been&nbsp;added&nbsp;to&nbsp;workspace.<br />
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm7-106" class="spadComm" >
<form id="formComm7-106" action="javascript:makeRequest('7-106');" >
<input id="comm7-106" type="text" class="command" style="width: 8em;" value="newmap pt  " />
</form>
<span id="commSav7-106" class="commSav" >newmap pt  </span>
<div id="mathAns7-106" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mo>-</mo><mrow><mn>1</mn><mo>.</mo><mn>9799849932008908</mn></mrow><mo>,</mo><mrow><mn>0</mn><mo>.</mo><mn>28224001611973443</mn></mrow><mo>,</mo><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow><mo>,</mo><mrow><mn>5</mn><mo>.</mo><mn>0</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Point DoubleFloat
</div>



<p>Graph the same function  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math> using the coordinate mapping of the function
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>newmap</mi></mstyle></math>, so it is now interpreted as
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>z</mi><mo>=</mo><mn>3</mn></mrow></mstyle></math>:
</p>




<div class="spadgraph" style="width: 22em">
draw(f,0..3,0..2*%pi,coordinates==newmap) 
</div>








<p>The <span class="teletype">CoordinateSystems</span> package exports the following
<span class="index">coordinate system</span><a name="chapter-7-173"/>
operations:
<span style="font-weight: bold;"> bipolar</span>,
<span style="font-weight: bold;"> bipolarCylindrical</span>,
<span style="font-weight: bold;"> cartesian</span>,
<span style="font-weight: bold;"> conical</span>,
<span style="font-weight: bold;"> cylindrical</span>,
<span style="font-weight: bold;"> elliptic</span>,
<span style="font-weight: bold;"> ellipticCylindrical</span>,
<span style="font-weight: bold;"> oblateSpheroidal</span>,
<span style="font-weight: bold;"> parabolic</span>,
<span style="font-weight: bold;"> parabolicCylindrical</span>,
<span style="font-weight: bold;"> paraboloidal</span>,
<span style="font-weight: bold;"> polar</span>,
<span style="font-weight: bold;"> prolateSpheroidal</span>,
<span style="font-weight: bold;"> spherical</span>, and
<span style="font-weight: bold;"> toroidal</span>.
Use Browse or the <span class="teletype">)show</span> system command
<span class="index">show</span><a name="chapter-7-174"/>
to get more information.
</p>




</div>



<a name="subsec-7.2.8"/>
<div class="subsection"  id="subsec-7.2.8">
<h3 class="subsectitle">7.2.8  Three-Dimensional Clipping</h3>


<a name="ugGraphClip" class="label"/>


<p>A three-dimensional graph can be explicitly clipped within the <span style="font-weight: bold;"> draw</span>
<span class="index">graphics:advanced:clip</span><a name="chapter-7-175"/>
command by indicating a minimum and maximum threshold for the
<span class="index">clipping</span><a name="chapter-7-176"/>
given function definition.
These thresholds can be defined using the FriCAS <span style="font-weight: bold;"> min</span>
and <span style="font-weight: bold;"> max</span> functions.
</p>




<div class="verbatim"><br />
gamma(x,y)&nbsp;==<br />
&nbsp;&nbsp;g&nbsp;:=&nbsp;Gamma&nbsp;complex(x,y)<br />
&nbsp;&nbsp;point&nbsp;[x,&nbsp;y,&nbsp;max(&nbsp;min(real&nbsp;g,&nbsp;4),&nbsp;-4),&nbsp;argument&nbsp;g]<br />
</div>



<p>Here is an example that clips
the gamma function in order to eliminate the extreme divergence it creates.
</p>




<div class="spadgraph" style="width: 32em">
draw(gamma,-%pi..%pi,-%pi..%pi,var1Steps==50,var2Steps==50) 
</div>








</div>



<a name="subsec-7.2.9"/>
<div class="subsection"  id="subsec-7.2.9">
<h3 class="subsectitle">7.2.9  Three-Dimensional Control-Panel</h3>


<a name="ugGraphThreeDControl" class="label"/>


<p><span class="index">graphics:3D control-panel</span><a name="chapter-7-177"/>
Once you have created a viewport, move your mouse to the viewport
and click with your left mouse button.
This displays a control-panel on the side of the viewport
that is closest to where you clicked.
</p>



<div class="image">
<img src="ps/3Dctrl.png" alt="picture"/>
<div class="figcaption">Three-dimensional control-panel.</div>
</div>


<a name="subsubsec-7.2.9.1"/>
<div class="subsubsection"  id="subsubsec-7.2.9.1">
<h3 class="subsubsectitle">7.2.9.1  Transformations</h3>



<p>We recommend you first select the <span style="font-weight: bold;"> Bounds</span> button while
<span class="index">graphics:3D control-panel:transformations</span><a name="chapter-7-178"/>
executing transformations since the bounding box displayed
indicates the object's position as it changes.
</p>


<p><dl>
<dt>Rotate:</dt>
<dd>  A rotation transformation occurs by clicking the mouse
<span class="index">graphics:3D control-panel:rotate</span><a name="chapter-7-179"/>
within the <span style="font-weight: bold;"> Rotate</span> window in the upper left corner of the
control-panel.
The rotation is computed in spherical coordinates, using the
horizontal mouse position to increment or decrement the value of
the longitudinal angle  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03B8;</mi></mstyle></math> within the
range of 0 to 2 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03C0;</mi></mstyle></math> and the vertical mouse position
to increment or decrement the value of the latitudinal angle
 <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math> within the range of - <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03C0;</mi></mstyle></math>
to  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03C0;</mi></mstyle></math>.
The active mode of rotation is displayed in green on a color
monitor or in clear text on a black and white monitor, while the
inactive mode is displayed in red for color display or a mottled
pattern for black and white.
<dl>
<dt>origin:</dt>
<dd>  The <span style="font-weight: bold;"> origin</span> button indicates that the
rotation is to occur with respect to the origin of the viewing space, that is
indicated by the axes.
</dd>
<dt>object:</dt>
<dd>  The <span style="font-weight: bold;"> object</span> button indicates that the
rotation is to occur with respect to the center of volume of the object,
independent of the axes' origin position.
</dd>
</dl>
</dd>
<dt>Scale:</dt>
<dd>  A scaling transformation occurs by clicking the mouse
<span class="index">graphics:3D control-panel:scale</span><a name="chapter-7-180"/>
within the <span style="font-weight: bold;"> Scale</span> window in the upper center of the
control-panel, containing a zoom arrow.
The axes along which the scaling is to occur are indicated by
selecting the appropriate button above the zoom arrow window.
The selected axes are displayed in green on a color monitor or in
clear text on a black and white monitor, while the unselected axes
are displayed in red for a color display or a mottled pattern for
black and white.
<dl>
<dt>uniform:</dt>
<dd>  Uniform scaling along the <span class="teletype">x</span>, <span class="teletype">y</span>
and <span class="teletype">z</span> axes occurs when all the axes buttons are selected.
</dd>
<dt>non-uniform:</dt>
<dd>  If any of the axes buttons are
not selected, non-uniform scaling occurs, that is, scaling occurs only in the
direction of the axes that are selected.
</dd>
</dl>
</dd>
<dt>Translate:</dt>
<dd>  Translation occurs by indicating with the mouse in the
<span class="index">graphics:3D control-panel:translate</span><a name="chapter-7-181"/>
<span style="font-weight: bold;"> Translate</span> window the direction you want the graph to move.
This window is located in the upper right corner of the
control-panel and contains a potentiometer with crossed arrows
pointing up, down, left and right.
Along the top of the <span style="font-weight: bold;"> Translate</span> window are three buttons
(<span style="font-weight: bold;"> XY</span>,
<span style="font-weight: bold;"> XZ</span>, and <span style="font-weight: bold;"> YZ</span>) indicating the three orthographic projection planes.
Each orientates the group as a view into that plane.
Any translation of the graph occurs only along this plane.
</dd>
</dl>
</p>




</div>



<a name="subsubsec-7.2.9.2"/>
<div class="subsubsection"  id="subsubsec-7.2.9.2">
<h3 class="subsubsectitle">7.2.9.2  Messages</h3>



<p><span class="index">graphics:3D control-panel:messages</span><a name="chapter-7-182"/>
</p>


<p>The window directly below the potentiometer windows for transformations is
used to display system messages relating to the viewport, the control-panel
and the current graph displaying status.
</p>




</div>



<a name="subsubsec-7.2.9.3"/>
<div class="subsubsection"  id="subsubsec-7.2.9.3">
<h3 class="subsubsectitle">7.2.9.3  Colormap</h3>



<p><span class="index">graphics:3D control-panel:color map</span><a name="chapter-7-183"/>
</p>


<p>Directly below the message window is the colormap range indicator
window.
<span class="index">colormap</span><a name="chapter-7-184"/>
The FriCAS Colormap shows a sampling of the spectrum from
which hues can be drawn to represent the colors of a surface.
The Colormap is composed of five shades for each of the hues along
this spectrum.
By moving the markers above and below the Colormap, the range of
hues that are used to color the existing surface are set.
The bottom marker shows the hue for the low end of the color range
and the top marker shows the hue for the upper end of the range.
Setting the bottom and top markers at the same hue results in
monochromatic smooth shading of the graph when <span style="font-weight: bold;"> Smooth</span> mode is selected.
At each end of the Colormap are <span style="font-weight: bold;"> +</span> and <span style="font-weight: bold;"> -</span> buttons.
When clicked on, these increment or decrement the top or bottom
marker.
</p>




</div>



<a name="subsubsec-7.2.9.4"/>
<div class="subsubsection"  id="subsubsec-7.2.9.4">
<h3 class="subsubsectitle">7.2.9.4  Buttons</h3>


<p><span class="index">graphics:3D control-panel:buttons</span><a name="chapter-7-185"/>
</p>


<p>Below the Colormap window and to the left are located various
buttons that determine the characteristics of a graph.
The buttons along the bottom and right hand side all have special
meanings; the remaining buttons in the first row indicate the mode
or style used to display the graph.
The second row are toggles that turn on or off a property of the
graph.
On a color monitor, the property is on if green (clear text, on a
monochrome monitor) and off if red (mottled pattern, on a
monochrome monitor).
Here is a list of their functions.
</p>


<p><dl>
<dt>Wire</dt>
<dd> displays surface and tube plots as a
<span class="index">graphics:3D control-panel:wire</span><a name="chapter-7-186"/>
wireframe image in a single color (blue) with no hidden surfaces removed,
or displays space curve plots in colors based upon their parametric variables.
This is the fastest mode for displaying a graph.
This is very useful when you
want to find a good orientation of your graph.
</dd>
<dt>Solid</dt>
<dd> displays the graph with hidden
<span class="index">graphics:3D control-panel:solid</span><a name="chapter-7-187"/>
surfaces removed, drawing each polygon beginning with the furthest
from the viewer.
The edges of the polygons are displayed in the hues specified by
the range in the Colormap window.
</dd>
<dt>Shade</dt>
<dd> displays the graph with hidden
<span class="index">graphics:3D control-panel:shade</span><a name="chapter-7-188"/>
surfaces removed and with the polygons shaded, drawing each
polygon beginning with the furthest from the viewer.
Polygons are shaded in the hues specified by the range in the
Colormap window using the Phong illumination model.
<span class="index">Phong:illumination model</span><a name="chapter-7-189"/>
</dd>
<dt>Smooth</dt>
<dd> displays the graph using a
<span class="index">graphics:3D control-panel:smooth</span><a name="chapter-7-190"/>
renderer that computes the graph one line at a time.
The location and color of the graph at each visible point on the
screen are determined and displayed using the Phong illumination
<span class="index">Phong:illumination model</span><a name="chapter-7-191"/>
model.
Smooth shading is done in one of two ways, depending on the range
selected in the colormap window and the number of colors available
from the hardware and/or window manager.
When the top and bottom markers of the colormap range are set to
different hues, the graph is rendered by dithering between the
<span class="index">dithering</span><a name="chapter-7-192"/>
transitions in color hue.
When the top and bottom markers of the colormap range are set to
the same hue, the graph is rendered using the Phong smooth shading
model.
<span class="index">Phong:smooth shading model</span><a name="chapter-7-193"/>
However, if enough colors cannot be allocated for this purpose,
the renderer reverts to the color dithering method until a
sufficient color supply is available.
For this reason, it may not be possible to render multiple Phong
smooth shaded graphs at the same time on some systems.
</dd>
<dt>Bounds</dt>
<dd> encloses the entire volume of the
viewgraph within a bounding box, or removes the box if previously selected.
<span class="index">graphics:3D control-panel:bounds</span><a name="chapter-7-194"/>
The region that encloses the entire volume of the viewport graph is displayed.
</dd>
<dt>Axes</dt>
<dd> displays Cartesian
<span class="index">graphics:3D control-panel:axes</span><a name="chapter-7-195"/>
coordinate axes of the space, or turns them off if previously selected.
</dd>
<dt>Outline</dt>
<dd> causes
<span class="index">graphics:3D control-panel:outline</span><a name="chapter-7-196"/>
quadrilateral polygons forming the graph surface to be outlined in black when
the graph is displayed in <span style="font-weight: bold;"> Shade</span> mode.
</dd>
<dt>BW</dt>
<dd> converts a color viewport to black and white, or vice-versa.
<span class="index">graphics:3D control-panel:bw</span><a name="chapter-7-197"/>
When this button is selected the
control-panel and viewport switch to an immutable colormap composed of a range
of grey scale patterns or tiles that are used wherever shading is necessary.
</dd>
<dt>Light</dt>
<dd> takes you to a control-panel described below.
</dd>
<dt>ViewVolume</dt>
<dd> takes you to another control-panel as described below.
<span class="index">graphics:3D control-panel:save</span><a name="chapter-7-198"/>
</dd>
<dt>Save</dt>
<dd> creates a menu of the possible file types that can
be written using the control-panel.
The <span style="font-weight: bold;"> Exit</span> button leaves the save menu.
The <span style="font-weight: bold;"> Pixmap</span> button writes an FriCAS pixmap of
<span class="index">graphics:3D control-panel:pixmap</span><a name="chapter-7-199"/>
the current viewport contents.  The file is called <span style="font-weight: bold;"> axiom3D.pixmap</span> and is
located in the directory from which FriCAS or <span style="font-weight: bold;"> viewAlone</span> was
started.
The <span style="font-weight: bold;"> PS</span> button writes the current viewport contents to
<span class="index">graphics:3D control-panel:ps</span><a name="chapter-7-200"/>
PostScript output rather than to the viewport window.
By default the file is called <span style="font-weight: bold;"> axiom3D.ps</span>; however, if a file
<span class="index">file:.Xdefaults @<span style="font-weight: bold;"> .Xdefaults</span><a name="chapter-7-201"/></span>
name is specified in the user's <span style="font-weight: bold;"> .Xdefaults</span> file it is
<span class="index">graphics:.Xdefaults:PostScript file name</span><a name="chapter-7-202"/>
used.
The file is placed in the directory from which the FriCAS or
<span style="font-weight: bold;"> viewAlone</span> session was begun.
See also the <span class="spadfunFrom" >write</span><span class="index">write</span><a name="chapter-7-203"/><span class="index">ThreeDimensionalViewport</span><a name="chapter-7-204"/>
function.
<span class="index">PostScript</span><a name="chapter-7-205"/>
</dd>
<dt>Reset</dt>
<dd> returns the object transformation
<span class="index">graphics:3D control-panel:reset</span><a name="chapter-7-206"/>
characteristics back to their initial states.
</dd>
<dt>Hide</dt>
<dd> causes the control-panel for the
<span class="index">graphics:3D control-panel:hide</span><a name="chapter-7-207"/>
corresponding viewport to disappear from the screen.
</dd>
<dt>Quit</dt>
<dd>  queries whether the current viewport
<span class="index">graphics:3D control-panel:quit</span><a name="chapter-7-208"/>
session should be terminated.
</dd>
</dl>
</p>




</div>



<a name="subsubsec-7.2.9.5"/>
<div class="subsubsection"  id="subsubsec-7.2.9.5">
<h3 class="subsubsectitle">7.2.9.5  Light</h3>



<p><span class="index">graphics:3D control-panel:light</span><a name="chapter-7-209"/>
</p>









<p>The <span style="font-weight: bold;"> Light</span> button changes the control-panel into the
<span style="font-weight: bold;"> Lighting Control-Panel</span>.  At the top of this panel, the three axes
are shown with the same orientation as the object.  A light vector from
the origin of the axes shows the current position of the light source
relative to the object.  At the bottom of the panel is an <span style="font-weight: bold;"> Abort</span>
button that cancels any changes to the lighting that were made, and a
<span style="font-weight: bold;"> Return</span> button that carries out the current set of lighting changes
on the graph.
</p>


<p><dl>
<dt>XY:</dt>
<dd>  The <span style="font-weight: bold;"> XY</span> lighting axes window is below the
<span class="index">graphics:3D control-panel:move xy</span><a name="chapter-7-210"/>
<span style="font-weight: bold;"> Lighting Control-Panel</span> title and to the left.
This changes the light vector within the <span style="font-weight: bold;"> XY</span> view plane.
</dd>
<dt>Z:</dt>
<dd>  The <span style="font-weight: bold;"> Z</span> lighting axis window is below the
<span class="index">graphics:3D control-panel:move z</span><a name="chapter-7-211"/>
<span style="font-weight: bold;"> Lighting Control-Panel</span> title and in the center.  This
changes the <span style="font-weight: bold;"> Z</span>
location of the light vector.
</dd>
<dt>Intensity:</dt>
<dd>
Below the <span style="font-weight: bold;"> Lighting Control-Panel</span> title
<span class="index">graphics:3D control-panel:intensity</span><a name="chapter-7-212"/>
and to the right is the light intensity meter.
Moving the intensity indicator down decreases the amount of
light emitted from the light source.
When the indicator is at the top of the meter the light source is
emitting at 100% intensity.
At the bottom of the meter the light source is emitting at a level
slightly above ambient lighting.
</dd>
</dl>
</p>




</div>



<a name="subsubsec-7.2.9.6"/>
<div class="subsubsection"  id="subsubsec-7.2.9.6">
<h3 class="subsubsectitle">7.2.9.6  View Volume</h3>



<p><span class="index">graphics:3D control-panel:view volume</span><a name="chapter-7-213"/>
</p>


<p>The <span style="font-weight: bold;"> View Volume</span> button changes the control-panel into
the <span style="font-weight: bold;"> Viewing Volume Panel</span>.
At the bottom of the viewing panel is an <span style="font-weight: bold;"> Abort</span> button that
cancels any changes to the viewing volume that were made and a
<span class="italic">Return</span> button that carries out the current set of
viewing changes to the graph.
</p>









<p><dl>
<dt>Eye Reference:</dt>
<dd>  At the top of this panel is the
<span class="index">graphics:3D control-panel:eye reference</span><a name="chapter-7-214"/>
<span style="font-weight: bold;"> Eye Reference</span> window.
It shows a planar projection of the viewing pyramid from the eye
of the viewer relative to the location of the object.
This has a bounding region represented by the rectangle on the
left.
Below the object rectangle is the <span style="font-weight: bold;"> Hither</span> window.
By moving the slider in this window the hither clipping plane sets
<span class="index">hither clipping plane</span><a name="chapter-7-215"/>
the front of the view volume.
As a result of this depth clipping all points of the object closer
to the eye than this hither plane are not shown.
The <span style="font-weight: bold;"> Eye Distance</span> slider to the right of the <span style="font-weight: bold;"> Hither</span>
slider is used to change the degree of perspective in the image.
</dd>
<dt>Clip Volume:</dt>
<dd>  The <span style="font-weight: bold;"> Clip Volume</span> window is at the
<span class="index">graphics:3D control-panel:clip volume</span><a name="chapter-7-216"/>
bottom of the <span style="font-weight: bold;"> Viewing Volume Panel</span>.
On the right is a <span style="font-weight: bold;"> Settings</span> menu.
In this menu are buttons to select viewing attributes.
Selecting the <span style="font-weight: bold;"> Perspective</span> button computes the image using
perspective projection.
<span class="index">graphics:3D control-panel:perspective</span><a name="chapter-7-217"/>
The <span style="font-weight: bold;"> Show Region</span> button indicates whether the clipping region
of the
<span class="index">graphics:3D control-panel:show clip region</span><a name="chapter-7-218"/>
volume is to be drawn in the viewport and the <span style="font-weight: bold;"> Clipping On</span>
button shows whether the view volume clipping is to be in effect
when the image
<span class="index">graphics:3D control-panel:clipping on</span><a name="chapter-7-219"/>
is drawn.
The left side of the <span style="font-weight: bold;"> Clip Volume</span> window shows the clipping
<span class="index">graphics:3D control-panel:clip volume</span><a name="chapter-7-220"/>
boundary of the graph.
Moving the knobs along the <span style="font-weight: bold;"> X</span>, <span style="font-weight: bold;"> Y</span>, and <span style="font-weight: bold;"> Z</span> sliders
adjusts the volume of the clipping region accordingly.
</dd>
</dl>
</p>




</div>




</div>



<a name="subsec-7.2.10"/>
<div class="subsection"  id="subsec-7.2.10">
<h3 class="subsectitle">7.2.10  Operations for Three-Dimensional Graphics</h3>


<a name="ugGraphThreeDops" class="label"/>



<p>Here is a summary of useful FriCAS operations for three-dimensional
graphics.
Each operation name is followed by a list of arguments.
Each argument is written as a variable informally named according
to the type of the argument (for example, <span class="italic">integer</span>).
If appropriate, a default value for an argument is given in
parentheses immediately following the name.
</p>




<p><dl>
<dt><span style="font-weight: bold;"> adaptive3D?</span>&nbsp;<span class="funArgs">()</span></dt>
<dd>
tests whether space curves are to be plotted
<span class="index">graphics:plot3d defaults:adaptive</span><a name="chapter-7-221"/>
according to the
<span class="index">adaptive plotting</span><a name="chapter-7-222"/>
adaptive refinement algorithm.
</dd>
<dt><span style="font-weight: bold;"> axes</span>&nbsp;<span class="funArgs">(viewport, string<span class="argDef" >("on")</span>)</span></dt>
<dd>
turns the axes on and off.
<span class="index">graphics:3D commands:axes</span><a name="chapter-7-223"/>
</dd>
<dt><span style="font-weight: bold;"> close</span>&nbsp;<span class="funArgs">(viewport)</span></dt>
<dd>
closes the viewport.
<span class="index">graphics:3D commands:close</span><a name="chapter-7-224"/>
</dd>
<dt><span style="font-weight: bold;"> colorDef</span>&nbsp;<span class="funArgs">(viewport,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>color</mtext></mrow><mn>1</mn></msub></mrow></mstyle></math><span class="argDef" >(1)</span>,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>color</mtext></mrow><mn>2</mn></msub></mrow></mstyle></math><span class="argDef" >(27)</span>)</span></dt>
<dd>
sets the colormap
<span class="index">graphics:3D commands:define color</span><a name="chapter-7-225"/>
range to be from
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>color</mtext></mrow><mn>1</mn></msub></mrow></mstyle></math> to  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>color</mtext></mrow><mn>2</mn></msub></mrow></mstyle></math>.
</dd>
<dt><span style="font-weight: bold;"> controlPanel</span>&nbsp;<span class="funArgs">(viewport, string<span class="argDef" >("off")</span>)</span></dt>
<dd>
declares whether the
<span class="index">graphics:3D commands:control-panel</span><a name="chapter-7-226"/>
control-panel for the viewport is to be displayed or not.
</dd>
<dt><span style="font-weight: bold;"> diagonals</span>&nbsp;<span class="funArgs">(viewport, string<span class="argDef" >("off")</span>)</span></dt>
<dd>
declares whether the
<span class="index">graphics:3D commands:diagonals</span><a name="chapter-7-227"/>
polygon outline includes the diagonals or not.
</dd>
<dt><span style="font-weight: bold;"> drawStyle</span>&nbsp;<span class="funArgs">(viewport, style)</span></dt>
<dd>
selects which of four drawing styles
<span class="index">graphics:3D commands:drawing style</span><a name="chapter-7-228"/>
are used: <span class="teletype">"wireMesh", "solid", "shade",</span> or <span class="teletype">"smooth".</span>
</dd>
<dt><span style="font-weight: bold;"> eyeDistance</span>&nbsp;<span class="funArgs">(viewport,float<span class="argDef" >(500)</span>)</span></dt>
<dd>
sets the distance of the eye from the origin of the object
<span class="index">graphics:3D commands:eye distance</span><a name="chapter-7-229"/>
for use in the <span class="spadfunFrom" >perspective</span><span class="index">perspective</span><a name="chapter-7-230"/><span class="index">ThreeDimensionalViewport</span><a name="chapter-7-231"/>.
</dd>
<dt><span style="font-weight: bold;"> key</span>&nbsp;<span class="funArgs">(viewport)</span></dt>
<dd>
returns the operating
<span class="index">graphics:3D commands:key</span><a name="chapter-7-232"/>
system process ID number for the viewport.
</dd>
<dt><span style="font-weight: bold;"> lighting</span>&nbsp;<span class="funArgs">(viewport,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>float</mi><mi>x</mi></msub></mrow></mstyle></math><span class="argDef" >(-0.5)</span>,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>float</mi><mi>y</mi></msub></mrow></mstyle></math><span class="argDef" >(0.5)</span>,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>float</mi><mi>z</mi></msub></mrow></mstyle></math><span class="argDef" >(0.5)</span>)</span></dt>
<dd>
sets the Cartesian
<span class="index">graphics:3D commands:lighting</span><a name="chapter-7-233"/>
coordinates of the light source.
</dd>
<dt><span style="font-weight: bold;"> modifyPointData</span>&nbsp;<span class="funArgs">(viewport,integer,point)</span></dt>
<dd>
replaces the coordinates of the point with
<span class="index">graphics:3D commands:modify point data</span><a name="chapter-7-234"/>
the index <span class="italic">integer</span> with <span class="italic">point</span>.
</dd>
<dt><span style="font-weight: bold;"> move</span>&nbsp;<span class="funArgs">(viewport,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>integer</mi><mi>x</mi></msub></mrow></mstyle></math><span class="argDef" >(viewPosDefault)</span>,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>integer</mi><mi>y</mi></msub></mrow></mstyle></math><span class="argDef" >(viewPosDefault)</span>)</span></dt>
<dd>
moves the upper
<span class="index">graphics:3D commands:move</span><a name="chapter-7-235"/>
left-hand corner of the viewport to screen position
({  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>integer</mi><mi>x</mi></msub></mrow></mstyle></math>,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>integer</mi><mi>y</mi></msub></mrow></mstyle></math>}).
</dd>
<dt><span style="font-weight: bold;"> options</span>&nbsp;<span class="funArgs">(viewport)</span></dt>
<dd>
returns a list of all current draw options.
</dd>
<dt><span style="font-weight: bold;"> outlineRender</span>&nbsp;<span class="funArgs">(viewport, string<span class="argDef" >("off")</span>)</span></dt>
<dd>
turns polygon outlining
<span class="index">graphics:3D commands:outline</span><a name="chapter-7-236"/>
off or on when drawing in <span class="teletype">"shade"</span> mode.
</dd>
<dt><span style="font-weight: bold;"> perspective</span>&nbsp;<span class="funArgs">(viewport, string<span class="argDef" >("on")</span>)</span></dt>
<dd>
turns perspective
<span class="index">graphics:3D commands:perspective</span><a name="chapter-7-237"/>
viewing on and off.
</dd>
<dt><span style="font-weight: bold;"> reset</span>&nbsp;<span class="funArgs">(viewport)</span></dt>
<dd>
resets the attributes of a viewport to their
<span class="index">graphics:3D commands:reset</span><a name="chapter-7-238"/>
initial settings.
</dd>
<dt><span style="font-weight: bold;"> resize</span>&nbsp;<span class="funArgs">(viewport,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>integer</mi><mi>width</mi></msub></mrow></mstyle></math> <span class="argDef" >(viewSizeDefault)</span>,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>integer</mi><mi>height</mi></msub></mrow></mstyle></math> <span class="argDef" >(viewSizeDefault)</span>)</span></dt>
<dd>
resets the width and height
<span class="index">graphics:3D commands:resize</span><a name="chapter-7-239"/>
values for a viewport.
</dd>
<dt><span style="font-weight: bold;"> rotate</span>&nbsp;<span class="funArgs">(viewport,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>number</mi><mi>&#x03B8;</mi></msub></mrow></mstyle></math><span class="argDef" >(viewThetaDefapult)</span>,
 <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math><span class="argDef" >(viewPhiDefault)</span>)</span></dt>
<dd>
rotates the viewport by rotation angles for longitude
(<span class="italic"> <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03B8;</mi></mstyle></math></span>) and
latitude (<span class="italic"> <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math></span>).
Angles designate radians if given as floats, or degrees if given
<span class="index">graphics:3D commands:rotate</span><a name="chapter-7-240"/>
as integers.
</dd>
<dt><span style="font-weight: bold;"> setAdaptive3D</span>&nbsp;<span class="funArgs">(boolean<span class="argDef" >(true)</span>)</span></dt>
<dd>
sets whether space curves are to be plotted
<span class="index">graphics:plot3d defaults:set adaptive</span><a name="chapter-7-241"/>
according to the adaptive
<span class="index">adaptive plotting</span><a name="chapter-7-242"/>
refinement algorithm.
</dd>
<dt><span style="font-weight: bold;"> setMaxPoints3D</span>&nbsp;<span class="funArgs">(integer<span class="argDef" >(1000)</span>)</span></dt>
<dd>
 sets the default maximum number of possible
<span class="index">graphics:plot3d defaults:set max points</span><a name="chapter-7-243"/>
points to be used when constructing a three-dimensional space curve.
</dd>
<dt><span style="font-weight: bold;"> setMinPoints3D</span>&nbsp;<span class="funArgs">(integer<span class="argDef" >(49)</span>)</span></dt>
<dd>
sets the default minimum number of possible
<span class="index">graphics:plot3d defaults:set min points</span><a name="chapter-7-244"/>
points to be used when constructing a three-dimensional space curve.
</dd>
<dt><span style="font-weight: bold;"> setScreenResolution3D</span>&nbsp;<span class="funArgs">(integer<span class="argDef" >(49)</span>)</span></dt>
<dd>
sets the default screen resolution constant
<span class="index">graphics:plot3d defaults:set screen resolution</span><a name="chapter-7-245"/>
used in setting the computation limit of adaptively
<span class="index">adaptive plotting</span><a name="chapter-7-246"/>
generated three-dimensional space curve plots.
</dd>
<dt><span style="font-weight: bold;"> showRegion</span>&nbsp;<span class="funArgs">(viewport, string<span class="argDef" >("off")</span>)</span></dt>
<dd>
declares whether the bounding
<span class="index">graphics:3D commands:showRegion</span><a name="chapter-7-247"/>
box of a graph is shown or not.
</dd>
<dt><span style="font-weight: bold;"> subspace</span>&nbsp;<span class="funArgs">(viewport)</span></dt>
<dd>
returns the space component.
</dd>
<dt><span style="font-weight: bold;"> subspace</span>&nbsp;<span class="funArgs">(viewport, subspace)</span></dt>
<dd>
resets the space component
<span class="index">graphics:3D commands:subspace</span><a name="chapter-7-248"/>
to <span class="italic">subspace</span>.
</dd>
<dt><span style="font-weight: bold;"> title</span>&nbsp;<span class="funArgs">(viewport, string)</span></dt>
<dd>
gives the viewport the
<span class="index">graphics:3D commands:title</span><a name="chapter-7-249"/>
title <span class="italic">string</span>.
</dd>
<dt><span style="font-weight: bold;"> translate</span>&nbsp;<span class="funArgs">(viewport,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>float</mi><mi>x</mi></msub></mrow></mstyle></math><span class="argDef" >(viewDeltaXDefault)</span>,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>float</mi><mi>y</mi></msub></mrow></mstyle></math><span class="argDef" >(viewDeltaYDefault)</span>)</span></dt>
<dd>
translates
<span class="index">graphics:3D commands:translate</span><a name="chapter-7-250"/>
the object horizontally and vertically relative to the center of the viewport.
</dd>
<dt><span style="font-weight: bold;"> intensity</span>&nbsp;<span class="funArgs">(viewport,float<span class="argDef" >(1.0)</span>)</span></dt>
<dd>
resets the intensity <span class="italic">I</span> of the light source,
<span class="index">graphics:3D commands:intensity</span><a name="chapter-7-251"/>
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>0</mn><mo>&#x2264;</mo><mi>I</mi><mo>&#x2264;</mo><mn>1</mn><mo>.</mo></mrow></mstyle></math>
</dd>
<dt><span style="font-weight: bold;"> tubePointsDefault</span>&nbsp;<span class="funArgs">(<span class="optArg">[integer<span class="argDef" >(6)</span>]</span>)</span></dt>
<dd>
sets or indicates the default number of
<span class="index">graphics:3D defaults:tube points</span><a name="chapter-7-252"/>
vertices defining the polygon that is used to create a tube around
a space curve.
</dd>
<dt><span style="font-weight: bold;"> tubeRadiusDefault</span>&nbsp;<span class="funArgs">(<span class="optArg">[float<span class="argDef" >(0.5)</span>]</span>)</span></dt>
<dd>
sets or indicates the default radius of
<span class="index">graphics:3D defaults:tube radius</span><a name="chapter-7-253"/>
the tube that encircles a space curve.
</dd>
<dt><span style="font-weight: bold;"> var1StepsDefault</span>&nbsp;<span class="funArgs">(<span class="optArg">[integer<span class="argDef" >(27)</span>]</span>)</span></dt>
<dd>
sets or indicates the default number of
<span class="index">graphics:3D defaults:var1 steps</span><a name="chapter-7-254"/>
increments into which the grid defining a surface plot is subdivided with
respect to the first parameter declared in the surface function.
</dd>
<dt><span style="font-weight: bold;"> var2StepsDefault</span>&nbsp;<span class="funArgs">(<span class="optArg">[integer<span class="argDef" >(27)</span>]</span>)</span></dt>
<dd>
sets or indicates the default number of
<span class="index">graphics:3D defaults:var2 steps</span><a name="chapter-7-255"/>
increments into which the grid defining a surface plot is subdivided with
respect to the second parameter declared in the surface function.
</dd>
<dt><span style="font-weight: bold;"> viewDefaults</span>&nbsp;<span class="funArgs">(<span class="teletype">[</span> <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>integer</mi><mi>point</mi></msub></mrow></mstyle></math>, 
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>integer</mi><mi>line</mi></msub></mrow></mstyle></math>,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>integer</mi><mi>axes</mi></msub></mrow></mstyle></math>,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>integer</mi><mi>units</mi></msub></mrow></mstyle></math>,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>float</mi><mi>point</mi></msub></mrow></mstyle></math>,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>list</mi><mi>position</mi></msub></mrow></mstyle></math>,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>list</mi><mi>size</mi></msub></mrow></mstyle></math><span class="teletype">]</span>)</span></dt>
<dd>
resets the default settings for the
<span class="index">graphics:3D defaults:reset viewport defaults</span><a name="chapter-7-256"/>
point color, line color, axes color, units color, point size,
viewport upper left-hand corner position, and the viewport size.
</dd>
<dt><span style="font-weight: bold;"> viewDeltaXDefault</span>&nbsp;<span class="funArgs">(<span class="optArg">[float<span class="argDef" >(0)</span>]</span>)</span></dt>
<dd>
resets the default horizontal offset
<span class="index">graphics:3D commands:deltaX default</span><a name="chapter-7-257"/>
from the center of the viewport, or returns the current default offset if no argument is given.
</dd>
<dt><span style="font-weight: bold;"> viewDeltaYDefault</span>&nbsp;<span class="funArgs">(<span class="optArg">[float<span class="argDef" >(0)</span>]</span>)</span></dt>
<dd>
resets the default vertical offset
<span class="index">graphics:3D commands:deltaY default</span><a name="chapter-7-258"/>
from the center of the viewport, or returns the current default offset if no argument is given.
</dd>
<dt><span style="font-weight: bold;"> viewPhiDefault</span>&nbsp;<span class="funArgs">(<span class="optArg">[float<span class="argDef" >(- <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03C0;</mi></mstyle></math>/4)</span>]</span>)</span></dt>
<dd>
resets the default latitudinal view angle,
or returns the current default angle if no argument is given.
<span class="index">graphics:3D commands:phi default</span><a name="chapter-7-259"/>
 <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math> is set to this value.
</dd>
<dt><span style="font-weight: bold;"> viewpoint</span>&nbsp;<span class="funArgs">(viewport,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>float</mi><mi>x</mi></msub></mrow></mstyle></math>,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>float</mi><mi>y</mi></msub></mrow></mstyle></math>,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>float</mi><mi>z</mi></msub></mrow></mstyle></math>)</span></dt>
<dd>
sets the viewing position in Cartesian coordinates.
</dd>
<dt><span style="font-weight: bold;"> viewpoint</span>&nbsp;<span class="funArgs">(viewport,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>float</mi><mi>&#x03B8;</mi></msub></mrow></mstyle></math>,
 <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math>)</span></dt>
<dd>
sets the viewing position in spherical coordinates.
</dd>
<dt><span style="font-weight: bold;"> viewpoint</span>&nbsp;<span class="funArgs">(viewport,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>Float</mi><mi>&#x03B8;</mi></msub></mrow></mstyle></math>,
 <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math>,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>Float</mi><mi>scaleFactor</mi></msub></mrow></mstyle></math>,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>Float</mi><mi>xOffset</mi></msub></mrow></mstyle></math>,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>Float</mi><mi>yOffset</mi></msub></mrow></mstyle></math>)</span></dt>
<dd>
sets the viewing position in spherical coordinates,
the scale factor, and offsets.
<span class="index">graphics:3D commands:viewpoint</span><a name="chapter-7-260"/>
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03B8;</mi></mstyle></math> (longitude) and
 <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math> (latitude) are in radians.
</dd>
<dt><span style="font-weight: bold;"> viewPosDefault</span>&nbsp;<span class="funArgs">(<span class="optArg">[list<span class="argDef" >([0,0])</span>]</span>)</span></dt>
<dd>
sets or indicates the position of the upper
<span class="index">graphics:3D defaults:viewport position</span><a name="chapter-7-261"/>
left-hand corner of a two-dimensional viewport, relative to the display root
window (the upper left-hand corner of the display is  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>[</mo><mn>0</mn><mo>,</mo><mn>0</mn><mo>]</mo></mrow></mstyle></math>).
</dd>
<dt><span style="font-weight: bold;"> viewSizeDefault</span>&nbsp;<span class="funArgs">(<span class="optArg">[list<span class="argDef" >([400,400])</span>]</span>)</span></dt>
<dd>
sets or indicates the width and height dimensions
<span class="index">graphics:3D defaults:viewport size</span><a name="chapter-7-262"/>
of a viewport.
</dd>
<dt><span style="font-weight: bold;"> viewThetaDefault</span>&nbsp;<span class="funArgs">(<span class="optArg">[float<span class="argDef" >( <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03C0;</mi></mstyle></math>/4)</span>]</span>)</span></dt>
<dd>
resets the default longitudinal view angle,
or returns the current default angle if no argument is given.
<span class="index">graphics:3D commands:theta default</span><a name="chapter-7-263"/>
When a parameter is specified, the default longitudinal view angle
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03B8;</mi></mstyle></math> is set to this value.
</dd>
<dt><span style="font-weight: bold;"> viewWriteAvailable</span>&nbsp;<span class="funArgs">(<span class="optArg">[list<span class="argDef" >(["pixmap",
"bitmap", "postscript", "image"])</span>]</span>)</span></dt>
<dd>
indicates the possible file types
<span class="index">graphics:3D defaults:available viewport writes</span><a name="chapter-7-264"/>
that can be created with the <span class="spadfunFrom" >write</span><span class="index">write</span><a name="chapter-7-265"/><span class="index">ThreeDimensionalViewport</span><a name="chapter-7-266"/> function.
</dd>
<dt><span style="font-weight: bold;"> viewWriteDefault</span>&nbsp;<span class="funArgs">(<span class="optArg">[list<span class="argDef" >([])</span>]</span>)</span></dt>
<dd>
sets or indicates the default types of files
that are created in addition to the <span style="font-weight: bold;"> data</span> file when a
<span class="spadfunFrom" >write</span><span class="index">write</span><a name="chapter-7-267"/><span class="index">ThreeDimensionalViewport</span><a name="chapter-7-268"/> command
<span class="index">graphics:3D defaults:viewport writes</span><a name="chapter-7-269"/>
is executed on a viewport.
</dd>
<dt><span style="font-weight: bold;"> viewScaleDefault</span>&nbsp;<span class="funArgs">(<span class="optArg">[float]</span>)</span></dt>
<dd>
sets the default scaling factor, or returns
<span class="index">graphics:3D commands:scale default</span><a name="chapter-7-270"/>
the current factor if no argument is given.
</dd>
<dt><span style="font-weight: bold;"> write</span>&nbsp;<span class="funArgs">(viewport, directory, <span class="optArg">[option]</span>)</span></dt>
<dd>
writes the file <span style="font-weight: bold;"> data</span> for <span class="italic">viewport</span>
in the directory <span class="italic">directory</span>.
An optional third argument specifies a file type (one of <span class="teletype">pixmap</span>, <span class="teletype">bitmap</span>, <span class="teletype">postscript</span>, or <span class="teletype">image</span>), or a
list of file types.
An additional file is written for each file type listed.
</dd>
<dt><span style="font-weight: bold;"> scale</span>&nbsp;<span class="funArgs">(viewport, float<span class="argDef" >(2.5)</span>)</span></dt>
<dd>
specifies the scaling factor.
<span class="index">graphics:3D commands:scale</span><a name="chapter-7-271"/>
<span class="index">scaling graphs</span><a name="chapter-7-272"/>
</dd>
</dl>
</p>





</div>



<a name="subsec-7.2.11"/>
<div class="subsection"  id="subsec-7.2.11">
<h3 class="subsectitle">7.2.11  Customization using .Xdefaults</h3>


<a name="ugXdefaults" class="label"/>


<p><span class="index">graphics:.Xdefaults</span><a name="chapter-7-273"/>
</p>


<p>Both the two-dimensional and three-dimensional drawing facilities consult
the <span style="font-weight: bold;"> .Xdefaults</span> file for various defaults.
<span class="index">file:.Xdefaults @<span style="font-weight: bold;"> .Xdefaults</span><a name="chapter-7-274"/></span>
The list of defaults that are recognized by the graphing routines
is discussed in this section.
These defaults are preceded by <span class="teletype">FriCAS.3D.</span>
for three-dimensional viewport defaults, <span class="teletype">FriCAS.2D.</span>
for two-dimensional viewport defaults, or <span class="teletype">FriCAS*</span> (no dot) for
those defaults that are acceptable to either viewport type.
</p>



<p><dl>
<dt><span class="teletype">FriCAS*buttonFont:&nbsp;<span class="italic">font</span></span></dt>
<dd> &nbsp;<br />
This indicates which
<span class="index">graphics:.Xdefaults:button font</span><a name="chapter-7-275"/>
font type is used for the button text on the control-panel.
<span style="font-weight: bold;"> Rom11</span>
</dd>
<dt><span class="teletype">FriCAS.2D.graphFont:&nbsp;<span class="italic">font</span></span></dt>
<dd> &nbsp; (2D only) <br />
This indicates
<span class="index">graphics:.Xdefaults:graph number font</span><a name="chapter-7-276"/>
which font type is used for displaying the graph numbers and
slots in the <span style="font-weight: bold;"> Graphs</span> section of the two-dimensional control-panel.
<span style="font-weight: bold;"> Rom22</span>
</dd>
<dt><span class="teletype">FriCAS.3D.headerFont:&nbsp;<span class="italic">font</span></span></dt>
<dd> &nbsp;<br />
This indicates which
<span class="index">graphics:.Xdefaults:graph label font</span><a name="chapter-7-277"/>
font type is used for the axes labels and potentiometer
header names on three-dimensional viewport windows.
This is also used for two-dimensional control-panels for indicating
which font type is used for potentionmeter header names and
multiple graph title headers.
<span style="font-weight: bold;"> Itl14</span>
</dd>
<dt><span class="teletype">FriCAS*inverse:&nbsp;<span class="italic">switch</span></span></dt>
<dd> &nbsp;<br />
This indicates whether the
<span class="index">graphics:.Xdefaults:inverting background</span><a name="chapter-7-278"/>
background color is to be inverted from white to black.
If <span class="teletype">on</span>, the graph viewports use black as the background
color.
If <span class="teletype">off</span> or no declaration is made, the graph viewports use a
white background.
<span style="font-weight: bold;"> off</span>
</dd>
<dt><span class="teletype">FriCAS.3D.lightingFont:&nbsp;<span class="italic">font</span></span></dt>
<dd> &nbsp; (3D only) <br />
This indicates which font type is used for the <span style="font-weight: bold;"> x</span>,
<span class="index">graphics:.Xdefaults:lighting font</span><a name="chapter-7-279"/>
<span style="font-weight: bold;"> y</span>, and <span style="font-weight: bold;"> z</span> labels of the two lighting axes potentiometers, and for
the <span style="font-weight: bold;"> Intensity</span> title on the lighting control-panel.
<span style="font-weight: bold;"> Rom10</span>
</dd>
<dt><span class="teletype">FriCAS.2D.messageFont, FriCAS.3D.messageFont:&nbsp;<span class="italic">font</span></span></dt>
<dd> &nbsp;<br />
These indicate the font type
<span class="index">graphics:.Xdefaults:message font</span><a name="chapter-7-280"/>
to be used for the text in the control-panel message window.
<span style="font-weight: bold;"> Rom14</span>
</dd>
<dt><span class="teletype">FriCAS*monochrome:&nbsp;<span class="italic">switch</span></span></dt>
<dd> &nbsp;<br />
This indicates whether the
<span class="index">graphics:.Xdefaults:monochrome</span><a name="chapter-7-281"/>
graph viewports are to be displayed as if the monitor is black and
white, that is, a 1 bit plane.
If <span class="teletype">on</span> is specified, the viewport display is black and white.
If <span class="teletype">off</span> is specified, or no declaration for this default is
given, the viewports are displayed in the normal fashion for the
monitor in use.
<span style="font-weight: bold;"> off</span>
</dd>
<dt><span class="teletype">FriCAS.2D.postScript:&nbsp;<span class="italic">filename</span></span></dt>
<dd> &nbsp;<br />
This specifies
<span class="index">graphics:.Xdefaults:PostScript file name</span><a name="chapter-7-282"/>
the name of the file that is generated when a 2D PostScript graph
<span class="index">PostScript</span><a name="chapter-7-283"/>
is saved.
<span style="font-weight: bold;"> axiom2D.ps</span>
</dd>
<dt><span class="teletype">FriCAS.3D.postScript:&nbsp;<span class="italic">filename</span></span></dt>
<dd> &nbsp;<br />
This specifies
<span class="index">graphics:.Xdefaults:PostScript file name</span><a name="chapter-7-284"/>
the name of the file that is generated when a 3D PostScript graph
<span class="index">PostScript</span><a name="chapter-7-285"/>
is saved.
<span style="font-weight: bold;"> axiom3D.ps</span>
</dd>
<dt><span class="teletype">FriCAS*titleFont <span class="italic">font</span></span></dt>
<dd> &nbsp;<br />
This
<span class="index">graphics:.Xdefaults:title font</span><a name="chapter-7-286"/>
indicates which font type is used
for the title text and, for three-dimensional graphs,
in the lighting and viewing-volume control-panel windows.
<span class="index">graphics:Xdefaults:2d</span><a name="chapter-7-287"/>
<span style="font-weight: bold;"> Rom14</span>
</dd>
<dt><span class="teletype">FriCAS.2D.unitFont:&nbsp;<span class="italic">font</span></span></dt>
<dd> &nbsp; (2D only) <br />
This indicates
<span class="index">graphics:.Xdefaults:unit label font</span><a name="chapter-7-288"/>
which font type is used for displaying the unit labels on
two-dimensional viewport graphs.
<span style="font-weight: bold;"> 6x10</span>
</dd>
<dt><span class="teletype">FriCAS.3D.volumeFont:&nbsp;<span class="italic">font</span></span></dt>
<dd> &nbsp; (3D only) <br />
This indicates which font type is used for the <span style="font-weight: bold;"> x</span>,
<span class="index">graphics:.Xdefaults:volume label font</span><a name="chapter-7-289"/>
<span style="font-weight: bold;"> y</span>, and <span style="font-weight: bold;"> z</span> labels of the clipping region sliders; for the
<span style="font-weight: bold;"> Perspective</span>, <span style="font-weight: bold;"> Show Region</span>, and <span style="font-weight: bold;"> Clipping On</span> buttons under
<span style="font-weight: bold;"> Settings</span>, and above the windows for the <span style="font-weight: bold;"> Hither</span> and
<span style="font-weight: bold;"> Eye Distance</span> sliders in the <span style="font-weight: bold;"> Viewing Volume Panel</span> of the
three-dimensional control-panel.
<span style="font-weight: bold;"> Rom8</span>
</dd>
</dl>
</p>





</div>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-7.1.xhtml" style="margin-right: 10px;">Previous Section 7.1 Two-Dimensional Graphics</a><a href="section-8.0.xhtml" style="margin-right: 10px;">Next Section 8.0 Advanced Problem Solving</a><a href="book-index.xhtml">Book Index</a></body>
</html>