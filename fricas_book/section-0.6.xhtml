<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section0.6</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-0.5.xhtml" style="margin-right: 10px;">Previous Section 0.5 General Points about FriCAS</a><a href="section-0.7.xhtml" style="margin-right: 10px;">Next Section 0.7 Functions, Choices, and Loops</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-0.6">
<h2 class="sectiontitle">0.6  Data Structures in FriCAS</h2>


<p>This chapter is an overview of <span class="slant">some</span> of the data structures provided
by FriCAS.
</p>


<a name="subsec-0.6.1"/>
<div class="subsection"  id="subsec-0.6.1">
<h3 class="subsectitle">0.6.1  Lists</h3>


<p>The FriCAS <span class="teletype">List</span> type constructor is used to create homogenous lists of
finite size. The notation for lists and the names of the functions that 
operate over them are similar to those found in functional languages such
as ML.
</p>


<p>Lists can be created by placing a comma separated list of values inside
square brackets or if a list with just one element is desired then the
function <span style="font-weight: bold;"> list</span> is available:
</p>




<div id="spadComm0-96" class="spadComm" >
<form id="formComm0-96" action="javascript:makeRequest('0-96');" >
<input id="comm0-96" type="text" class="command" style="width: 2em;" value="[4]" />
</form>
<span id="commSav0-96" class="commSav" >[4]</span>
<div id="mathAns0-96" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>4</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





<div id="spadComm0-97" class="spadComm" >
<form id="formComm0-97" action="javascript:makeRequest('0-97');" >
<input id="comm0-97" type="text" class="command" style="width: 5em;" value="list(4)" />
</form>
<span id="commSav0-97" class="commSav" >list(4)</span>
<div id="mathAns0-97" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>4</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





<div id="spadComm0-98" class="spadComm" >
<form id="formComm0-98" action="javascript:makeRequest('0-98');" >
<input id="comm0-98" type="text" class="command" style="width: 10em;" value="[1,2,3,5,7,11]" />
</form>
<span id="commSav0-98" class="commSav" >[1,2,3,5,7,11]</span>
<div id="mathAns0-98" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>11</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>The function <span style="font-weight: bold;"> append</span> takes two lists as arguments and returns the list
consisting of the second argument appended to the first. A single element
can be added to the front of a list using <span style="font-weight: bold;"> cons</span>:
</p>




<div id="spadComm0-99" class="spadComm" >
<form id="formComm0-99" action="javascript:makeRequest('0-99');" >
<input id="comm0-99" type="text" class="command" style="width: 16em;" value="append([1,2,3,5],[7,11])" />
</form>
<span id="commSav0-99" class="commSav" >append([1,2,3,5],[7,11])</span>
<div id="mathAns0-99" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>11</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





<div id="spadComm0-100" class="spadComm" >
<form id="formComm0-100" action="javascript:makeRequest('0-100');" >
<input id="comm0-100" type="text" class="command" style="width: 13em;" value="cons(23,[65,42,19])" />
</form>
<span id="commSav0-100" class="commSav" >cons(23,[65,42,19])</span>
<div id="mathAns0-100" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>23</mn><mo>,</mo><mn>65</mn><mo>,</mo><mn>42</mn><mo>,</mo><mn>19</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>Lists are accessed sequentially so if FriCAS is asked for the value of the
twentieth element in the list it will move from the start of the list over
nineteen elements before it reaches the desired element. Each element of a 
list is stored as a node consisting of the value of the element and a pointer
to the rest of the list. As a result the two main operations on a list are
called <span style="font-weight: bold;"> first</span> and <span style="font-weight: bold;"> rest</span>. Both of these functions take a second
optional argument which specifies the length of the first part of the list:
</p>




<div id="spadComm0-101" class="spadComm" >
<form id="formComm0-101" action="javascript:makeRequest('0-101');" >
<input id="comm0-101" type="text" class="command" style="width: 12em;" value="first([1,5,6,2,3])" />
</form>
<span id="commSav0-101" class="commSav" >first([1,5,6,2,3])</span>
<div id="mathAns0-101" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm0-102" class="spadComm" >
<form id="formComm0-102" action="javascript:makeRequest('0-102');" >
<input id="comm0-102" type="text" class="command" style="width: 14em;" value="first([1,5,6,2,3],2)" />
</form>
<span id="commSav0-102" class="commSav" >first([1,5,6,2,3],2)</span>
<div id="mathAns0-102" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>5</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





<div id="spadComm0-103" class="spadComm" >
<form id="formComm0-103" action="javascript:makeRequest('0-103');" >
<input id="comm0-103" type="text" class="command" style="width: 12em;" value="rest([1,5,6,2,3])" />
</form>
<span id="commSav0-103" class="commSav" >rest([1,5,6,2,3])</span>
<div id="mathAns0-103" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>5</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





<div id="spadComm0-104" class="spadComm" >
<form id="formComm0-104" action="javascript:makeRequest('0-104');" >
<input id="comm0-104" type="text" class="command" style="width: 13em;" value="rest([1,5,6,2,3],2)" />
</form>
<span id="commSav0-104" class="commSav" >rest([1,5,6,2,3],2)</span>
<div id="mathAns0-104" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>6</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>Other functions are <span style="font-weight: bold;"> empty?</span> which tests to see if a list contains no
elements, <span style="font-weight: bold;"> member?</span> which tests to see if the first argument is a member
of the second, <span style="font-weight: bold;"> reverse</span> which reverses the order of the list, <span style="font-weight: bold;"> sort</span>
which sorts a list, and <span style="font-weight: bold;"> removeDuplicates</span> which removes any duplicates.
The length of a list can be obtained using the `` #'' operator.
</p>




<div id="spadComm0-105" class="spadComm" >
<form id="formComm0-105" action="javascript:makeRequest('0-105');" >
<input id="comm0-105" type="text" class="command" style="width: 12em;" value="empty?([7,2,-1,2])" />
</form>
<span id="commSav0-105" class="commSav" >empty?([7,2,-1,2])</span>
<div id="mathAns0-105" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>





<div id="spadComm0-106" class="spadComm" >
<form id="formComm0-106" action="javascript:makeRequest('0-106');" >
<input id="comm0-106" type="text" class="command" style="width: 15em;" value="member?(-1,[7,2,-1,2])" />
</form>
<span id="commSav0-106" class="commSav" >member?(-1,[7,2,-1,2])</span>
<div id="mathAns0-106" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>





<div id="spadComm0-107" class="spadComm" >
<form id="formComm0-107" action="javascript:makeRequest('0-107');" >
<input id="comm0-107" type="text" class="command" style="width: 13em;" value="reverse([7,2,-1,2])" />
</form>
<span id="commSav0-107" class="commSav" >reverse([7,2,-1,2])</span>
<div id="mathAns0-107" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mo>-</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>





<div id="spadComm0-108" class="spadComm" >
<form id="formComm0-108" action="javascript:makeRequest('0-108');" >
<input id="comm0-108" type="text" class="command" style="width: 11em;" value="sort([7,2,-1,2])" />
</form>
<span id="commSav0-108" class="commSav" >sort([7,2,-1,2])</span>
<div id="mathAns0-108" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mo>-</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>





<div id="spadComm0-109" class="spadComm" >
<form id="formComm0-109" action="javascript:makeRequest('0-109');" >
<input id="comm0-109" type="text" class="command" style="width: 22em;" value="removeDuplicates([1,5,3,5,1,1,2])" />
</form>
<span id="commSav0-109" class="commSav" >removeDuplicates([1,5,3,5,1,1,2])</span>
<div id="mathAns0-109" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>2</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





<div id="spadComm0-110" class="spadComm" >
<form id="formComm0-110" action="javascript:makeRequest('0-110');" >
<input id="comm0-110" type="text" class="command" style="width: 8em;" value=" #[7,2,-1,2]" />
</form>
<span id="commSav0-110" class="commSav" > #[7,2,-1,2]</span>
<div id="mathAns0-110" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>4</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Lists in FriCAS are mutable and so their contents (the elements and the links)
can be modified in place. Functions that operator over lists in this way have
names ending in the symbol ``!''. For example, <span style="font-weight: bold;"> concat!</span> takes two lists
as arguments and appends the second argument to the first (except when the
first argument is an empty list) and <span style="font-weight: bold;"> setrest!</span> changes the link 
emanating from the first argument to point to the second argument:
</p>




<div id="spadComm0-111" class="spadComm" >
<form id="formComm0-111" action="javascript:makeRequest('0-111');" >
<input id="comm0-111" type="text" class="command" style="width: 10em;" value="u := [9,2,4,7]" />
</form>
<span id="commSav0-111" class="commSav" >u := [9,2,4,7]</span>
<div id="mathAns0-111" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>9</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





<div id="spadComm0-112" class="spadComm" >
<form id="formComm0-112" action="javascript:makeRequest('0-112');" >
<input id="comm0-112" type="text" class="command" style="width: 15em;" value="concat!(u,[1,5,42]); u" />
</form>
<span id="commSav0-112" class="commSav" >concat!(u,[1,5,42]); u</span>
<div id="mathAns0-112" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>9</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>42</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





<div id="spadComm0-113" class="spadComm" >
<form id="formComm0-113" action="javascript:makeRequest('0-113');" >
<input id="comm0-113" type="text" class="command" style="width: 13em;" value="endOfu := rest(u,4)" />
</form>
<span id="commSav0-113" class="commSav" >endOfu := rest(u,4)</span>
<div id="mathAns0-113" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>42</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





<div id="spadComm0-114" class="spadComm" >
<form id="formComm0-114" action="javascript:makeRequest('0-114');" >
<input id="comm0-114" type="text" class="command" style="width: 14em;" value="partOfu := rest(u,2)" />
</form>
<span id="commSav0-114" class="commSav" >partOfu := rest(u,2)</span>
<div id="mathAns0-114" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>4</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>42</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





<div id="spadComm0-115" class="spadComm" >
<form id="formComm0-115" action="javascript:makeRequest('0-115');" >
<input id="comm0-115" type="text" class="command" style="width: 18em;" value="setrest!(endOfu,partOfu); u" />
</form>
<span id="commSav0-115" class="commSav" >setrest!(endOfu,partOfu); u</span>
<div id="mathAns0-115" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="http://www.w3.org/1998/Math/MathML" mathsize="big" display="block">
<mo>[</mo><mn>9</mn><mo>,</mo><mn>2</mn><mo>,</mo><mrow><mover accent='true'><mrow><mrow><mn>4</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>1</mn></mrow></mrow><mo stretchy='true'>&OverBar;</mo></mover></mrow><mo>]</mo>
</math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>From this it can be seen that the lists returned by <span style="font-weight: bold;"> first</span> and <span style="font-weight: bold;"> rest</span>
are pointers to the original list and <span class="slant">not</span> a copy. Thus great care must
be taken when dealing with lists in FriCAS.
</p>


<p>Although the <span class="slant">n</span>th element of the list <span class="slant">l</span> can be obtained by 
applying the <span style="font-weight: bold;"> first</span> function to  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>-</mo><mn>1</mn></mrow></mstyle></math> applications of <span style="font-weight: bold;"> rest</span>
to <span class="slant">l</span>, FriCAS provides a more useful access method in the form of
the <span class="italic">.</span> operator:
</p>




<div id="spadComm0-116" class="spadComm" >
<form id="formComm0-116" action="javascript:makeRequest('0-116');" >
<input id="comm0-116" type="text" class="command" style="width: 2em;" value="u.3" />
</form>
<span id="commSav0-116" class="commSav" >u.3</span>
<div id="mathAns0-116" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>4</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm0-117" class="spadComm" >
<form id="formComm0-117" action="javascript:makeRequest('0-117');" >
<input id="comm0-117" type="text" class="command" style="width: 2em;" value="u.5" />
</form>
<span id="commSav0-117" class="commSav" >u.5</span>
<div id="mathAns0-117" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm0-118" class="spadComm" >
<form id="formComm0-118" action="javascript:makeRequest('0-118');" >
<input id="comm0-118" type="text" class="command" style="width: 2em;" value="u.6" />
</form>
<span id="commSav0-118" class="commSav" >u.6</span>
<div id="mathAns0-118" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>4</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm0-119" class="spadComm" >
<form id="formComm0-119" action="javascript:makeRequest('0-119');" >
<input id="comm0-119" type="text" class="command" style="width: 22em;" value="first rest rest u -- Same as u.3" />
</form>
<span id="commSav0-119" class="commSav" >first rest rest u -- Same as u.3</span>
<div id="mathAns0-119" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>4</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm0-120" class="spadComm" >
<form id="formComm0-120" action="javascript:makeRequest('0-120');" >
<input id="comm0-120" type="text" class="command" style="width: 5em;" value="u.first" />
</form>
<span id="commSav0-120" class="commSav" >u.first</span>
<div id="mathAns0-120" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>9</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm0-121" class="spadComm" >
<form id="formComm0-121" action="javascript:makeRequest('0-121');" >
<input id="comm0-121" type="text" class="command" style="width: 3em;" value="u(3)" />
</form>
<span id="commSav0-121" class="commSav" >u(3)</span>
<div id="mathAns0-121" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>4</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>The operation <span class="slant">u.i</span> is referred to as <span class="slant">indexing into u</span> or 
<span class="slant">elting into u</span>. The latter term comes from the <span style="font-weight: bold;"> elt</span> function
which is used to extract elements (the first element of the list is at
index  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math>).
</p>




<div id="spadComm0-122" class="spadComm" >
<form id="formComm0-122" action="javascript:makeRequest('0-122');" >
<input id="comm0-122" type="text" class="command" style="width: 6em;" value="elt(u,4)" />
</form>
<span id="commSav0-122" class="commSav" >elt(u,4)</span>
<div id="mathAns0-122" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>7</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>If a list has no cycles then any attempt to access an element beyond the
end of the list will generate an error. However, in the example above there
was a cycle starting at the third element so the access to the sixth
element wrapped around to give the third element. Since lists are mutable it
is possible to modify elements directly:
</p>




<div id="spadComm0-123" class="spadComm" >
<form id="formComm0-123" action="javascript:makeRequest('0-123');" >
<input id="comm0-123" type="text" class="command" style="width: 8em;" value="u.3 := 42; u" />
</form>
<span id="commSav0-123" class="commSav" >u.3 := 42; u</span>
<div id="mathAns0-123" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="http://www.w3.org/1998/Math/MathML" mathsize="big" display="block">
<mo>[</mo><mn>9</mn><mo>,</mo><mn>2</mn><mo>,</mo><mrow><mover accent='true'><mrow><mrow><mrow><mn>42</mn></mrow><mo>,</mo><mn>7</mn><mo>,</mo><mn>1</mn></mrow></mrow><mo stretchy='true'>&OverBar;</mo></mover></mrow><mo>]</mo>
</math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>Other list operations are:
</p>



<div id="spadComm0-124" class="spadComm" >
<form id="formComm0-124" action="javascript:makeRequest('0-124');" >
<input id="comm0-124" type="text" class="command" style="width: 13em;" value="L := [9,3,4,7];  #L" />
</form>
<span id="commSav0-124" class="commSav" >L := [9,3,4,7];  #L</span>
<div id="mathAns0-124" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>4</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm0-125" class="spadComm" >
<form id="formComm0-125" action="javascript:makeRequest('0-125');" >
<input id="comm0-125" type="text" class="command" style="width: 5em;" value="last(L)" />
</form>
<span id="commSav0-125" class="commSav" >last(L)</span>
<div id="mathAns0-125" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>7</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm0-126" class="spadComm" >
<form id="formComm0-126" action="javascript:makeRequest('0-126');" >
<input id="comm0-126" type="text" class="command" style="width: 4em;" value="L.last" />
</form>
<span id="commSav0-126" class="commSav" >L.last</span>
<div id="mathAns0-126" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>7</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm0-127" class="spadComm" >
<form id="formComm0-127" action="javascript:makeRequest('0-127');" >
<input id="comm0-127" type="text" class="command" style="width: 8em;" value="L.( #L - 1)" />
</form>
<span id="commSav0-127" class="commSav" >L.( #L - 1)</span>
<div id="mathAns0-127" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>4</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Note that using the `` #'' operator on a list with cycles causes FriCAS to
enter an infinite loop.
</p>


<p>Note that any operation on a list <span class="slant">L</span> that returns a list  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>L</mi><msup><mi>L</mi><mo>&prime;</mo></msup></mstyle></math>
will, in general, be such that any changes to  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>L</mi><msup><mi>L</mi><mo>&prime;</mo></msup></mstyle></math> will have the
side-effect of altering <span class="slant">L</span>. For example:
</p>




<div id="spadComm0-128" class="spadComm" >
<form id="formComm0-128" action="javascript:makeRequest('0-128');" >
<input id="comm0-128" type="text" class="command" style="width: 10em;" value="m := rest(L,2)" />
</form>
<span id="commSav0-128" class="commSav" >m := rest(L,2)</span>
<div id="mathAns0-128" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>4</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





<div id="spadComm0-129" class="spadComm" >
<form id="formComm0-129" action="javascript:makeRequest('0-129');" >
<input id="comm0-129" type="text" class="command" style="width: 8em;" value="m.1 := 20; L" />
</form>
<span id="commSav0-129" class="commSav" >m.1 := 20; L</span>
<div id="mathAns0-129" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>9</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>20</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





<div id="spadComm0-130" class="spadComm" >
<form id="formComm0-130" action="javascript:makeRequest('0-130');" >
<input id="comm0-130" type="text" class="command" style="width: 4em;" value="n := L" />
</form>
<span id="commSav0-130" class="commSav" >n := L</span>
<div id="mathAns0-130" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>9</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>20</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





<div id="spadComm0-131" class="spadComm" >
<form id="formComm0-131" action="javascript:makeRequest('0-131');" >
<input id="comm0-131" type="text" class="command" style="width: 8em;" value="n.2 := 99; L" />
</form>
<span id="commSav0-131" class="commSav" >n.2 := 99; L</span>
<div id="mathAns0-131" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>9</mn><mo>,</mo><mn>99</mn><mo>,</mo><mn>20</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





<div id="spadComm0-132" class="spadComm" >
<form id="formComm0-132" action="javascript:makeRequest('0-132');" >
<input id="comm0-132" type="text" class="command" style="width: 1em;" value="n" />
</form>
<span id="commSav0-132" class="commSav" >n</span>
<div id="mathAns0-132" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>9</mn><mo>,</mo><mn>99</mn><mo>,</mo><mn>20</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>Thus the only save way of copying lists is to copy each element from one to
another and not use the assignment operator:
</p>




<div id="spadComm0-133" class="spadComm" >
<form id="formComm0-133" action="javascript:makeRequest('0-133');" >
<input id="comm0-133" type="text" class="command" style="width: 30em;" value="p := [i for i in n] -- Same as `p := copy(n)'" />
</form>
<span id="commSav0-133" class="commSav" >p := [i for i in n] -- Same as `p := copy(n)'</span>
<div id="mathAns0-133" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>9</mn><mo>,</mo><mn>99</mn><mo>,</mo><mn>20</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





<div id="spadComm0-134" class="spadComm" >
<form id="formComm0-134" action="javascript:makeRequest('0-134');" >
<input id="comm0-134" type="text" class="command" style="width: 8em;" value="p.2 := 5; p" />
</form>
<span id="commSav0-134" class="commSav" >p.2 := 5; p</span>
<div id="mathAns0-134" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>9</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>20</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





<div id="spadComm0-135" class="spadComm" >
<form id="formComm0-135" action="javascript:makeRequest('0-135');" >
<input id="comm0-135" type="text" class="command" style="width: 1em;" value="n" />
</form>
<span id="commSav0-135" class="commSav" >n</span>
<div id="mathAns0-135" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>9</mn><mo>,</mo><mn>99</mn><mo>,</mo><mn>20</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>In the previous example a new way of constructing lists was given. This is
a powerful method which gives the reader more information about the contents
of the list than before and which is extremely flexible. The example
</p>




<div id="spadComm0-136" class="spadComm" >
<form id="formComm0-136" action="javascript:makeRequest('0-136');" >
<input id="comm0-136" type="text" class="command" style="width: 12em;" value="[i for i in 1..10]" />
</form>
<span id="commSav0-136" class="commSav" >[i for i in 1..10]</span>
<div id="mathAns0-136" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>10</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>should be read as
</p>




<div class="center" style="text-align: center;">


<p>``Using the expression <span class="slant">i</span>, generate each element of the list by
iterating the symbol <span class="slant">i</span> over the range of integers [1,10]''
</p>



</div>



<p>To generate the list of the squares of the first ten elements we just use:
</p>




<div id="spadComm0-137" class="spadComm" >
<form id="formComm0-137" action="javascript:makeRequest('0-137');" >
<input id="comm0-137" type="text" class="command" style="width: 14em;" value="[i^2 for i in 1..10]" />
</form>
<span id="commSav0-137" class="commSav" >[i^2 for i in 1..10]</span>
<div id="mathAns0-137" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>16</mn><mo>,</mo><mn>25</mn><mo>,</mo><mn>36</mn><mo>,</mo><mn>49</mn><mo>,</mo><mn>64</mn><mo>,</mo><mn>81</mn><mo>,</mo><mn>100</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>For more complex lists we can apply a condition to the elements that are to
be placed into the list to obtain a list of even numbers between 0 and 11:
</p>




<div id="spadComm0-138" class="spadComm" >
<form id="formComm0-138" action="javascript:makeRequest('0-138');" >
<input id="comm0-138" type="text" class="command" style="width: 20em;" value="[i for i in 1..10 | even?(i)]" />
</form>
<span id="commSav0-138" class="commSav" >[i for i in 1..10 | even?(i)]</span>
<div id="mathAns0-138" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>10</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>This example should be read as:
</p>



<div class="center" style="text-align: center;">


<p>``Using the expression <span class="slant">i</span>, generate each element of the list
by iterating the symbol <span class="slant">i</span> over the range of integers [1,10] such that 
<span class="slant">i</span> is even''
</p>



</div>



<p>The following achieves the same result:
</p>




<div id="spadComm0-139" class="spadComm" >
<form id="formComm0-139" action="javascript:makeRequest('0-139');" >
<input id="comm0-139" type="text" class="command" style="width: 16em;" value="[i for i in 2..10 by 2]" />
</form>
<span id="commSav0-139" class="commSav" >[i for i in 2..10 by 2]</span>
<div id="mathAns0-139" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>10</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





</div>



<a name="subsec-0.6.2"/>
<div class="subsection"  id="subsec-0.6.2">
<h3 class="subsectitle">0.6.2  Segmented Lists</h3>


<p>A segmented list is one in which some of the elements are ranges of values.
The <span style="font-weight: bold;"> expand</span> function converts lists of this type into ordinary lists:
</p>




<div id="spadComm0-140" class="spadComm" >
<form id="formComm0-140" action="javascript:makeRequest('0-140');" >
<input id="comm0-140" type="text" class="command" style="width: 5em;" value="[1..10]" />
</form>
<span id="commSav0-140" class="commSav" >[1..10]</span>
<div id="mathAns0-140" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mn>1</mn><mo>.</mo><mo>.</mo><mn>10</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Segment PositiveInteger
</div>





<div id="spadComm0-141" class="spadComm" >
<form id="formComm0-141" action="javascript:makeRequest('0-141');" >
<input id="comm0-141" type="text" class="command" style="width: 11em;" value="[1..3,5,6,8..10]" />
</form>
<span id="commSav0-141" class="commSav" >[1..3,5,6,8..10]</span>
<div id="mathAns0-141" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mn>1</mn><mo>.</mo><mo>.</mo><mn>3</mn></mrow><mo>,</mo><mrow><mn>5</mn><mo>.</mo><mo>.</mo><mn>5</mn></mrow><mo>,</mo><mrow><mn>6</mn><mo>.</mo><mo>.</mo><mn>6</mn></mrow><mo>,</mo><mrow><mn>8</mn><mo>.</mo><mo>.</mo><mn>10</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Segment PositiveInteger
</div>





<div id="spadComm0-142" class="spadComm" >
<form id="formComm0-142" action="javascript:makeRequest('0-142');" >
<input id="comm0-142" type="text" class="command" style="width: 7em;" value="expand(%)" />
</form>
<span id="commSav0-142" class="commSav" >expand(%)</span>
<div id="mathAns0-142" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>10</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>If the upper bound of a segment is omitted then a different type of 
segmented list is obtained and expanding it will produce a stream (which
will be considered in the next section):
</p>




<div id="spadComm0-143" class="spadComm" >
<form id="formComm0-143" action="javascript:makeRequest('0-143');" >
<input id="comm0-143" type="text" class="command" style="width: 4em;" value="[1..]" />
</form>
<span id="commSav0-143" class="commSav" >[1..]</span>
<div id="mathAns0-143" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mn>1</mn><mo>.</mo><mo>.</mo></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List UniversalSegment PositiveInteger
</div>





<div id="spadComm0-144" class="spadComm" >
<form id="formComm0-144" action="javascript:makeRequest('0-144');" >
<input id="comm0-144" type="text" class="command" style="width: 7em;" value="expand(%)" />
</form>
<span id="commSav0-144" class="commSav" >expand(%)</span>
<div id="mathAns0-144" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>10</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Integer
</div>





</div>



<a name="subsec-0.6.3"/>
<div class="subsection"  id="subsec-0.6.3">
<h3 class="subsectitle">0.6.3  Streams</h3>


<p>Streams are infinite lists which have the ability to calculate the next
element should it be required. For example, a stream of positive integers
and a list of prime numbers can be generated by:
</p>




<div id="spadComm0-145" class="spadComm" >
<form id="formComm0-145" action="javascript:makeRequest('0-145');" >
<input id="comm0-145" type="text" class="command" style="width: 11em;" value="[i for i in 1..]" />
</form>
<span id="commSav0-145" class="commSav" >[i for i in 1..]</span>
<div id="mathAns0-145" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>10</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream PositiveInteger
</div>





<div id="spadComm0-146" class="spadComm" >
<form id="formComm0-146" action="javascript:makeRequest('0-146');" >
<input id="comm0-146" type="text" class="command" style="width: 19em;" value="[i for i in 1.. | prime?(i)]" />
</form>
<span id="commSav0-146" class="commSav" >[i for i in 1.. | prime?(i)]</span>
<div id="mathAns0-146" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>11</mn><mo>,</mo><mn>13</mn><mo>,</mo><mn>17</mn><mo>,</mo><mn>19</mn><mo>,</mo><mn>23</mn><mo>,</mo><mn>29</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream PositiveInteger
</div>



<p>In each case the first few elements of the stream are calculated for display
purposes but the rest of the stream remains unevaluated. The value of items
in a stream are only calculated when they are needed which gives rise to
their alternative name of <span class="italic">lazy lists</span>.
</p>


<p>Another method of creating streams is to use the <span style="font-weight: bold;"> generate(f,a)</span> function.
This applies its first argument repeatedly onto its second to produce the
stream  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>[</mo><mi>a</mi><mo>,</mo><mi>f</mi><mo>(</mo><mi>a</mi><mo>)</mo><mo>,</mo><mi>f</mi><mo>(</mo><mi>f</mi><mo>(</mo><mi>a</mi><mo>)</mo><mo>)</mo><mo>,</mo><mi>f</mi><mo>(</mo><mi>f</mi><mo>(</mo><mi>f</mi><mo>(</mo><mi>a</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>. Given that the function
<span style="font-weight: bold;"> nextPrime</span> returns the lowest prime number greater than its argument we
can generate a stream of primes as follows:
</p>



<div id="spadComm0-147" class="spadComm" >
<form id="formComm0-147" action="javascript:makeRequest('0-147');" >
<input id="comm0-147" type="text" class="command" style="width: 24em;" value="generate(nextPrime,2)$Stream Integer" />
</form>
<span id="commSav0-147" class="commSav" >generate(nextPrime,2)$Stream Integer</span>
<div id="mathAns0-147" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>11</mn><mo>,</mo><mn>13</mn><mo>,</mo><mn>17</mn><mo>,</mo><mn>19</mn><mo>,</mo><mn>23</mn><mo>,</mo><mn>29</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Integer
</div>



<p>As a longer example a stream of Fibonacci numbers will be computed. The
Fibonacci numbers start at  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math> and each following number is the addition
of the two numbers that precede it so the Fibonacci sequence is:
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>8</mn><mo>,</mo><mo>&#x2026;</mo></mrow></mstyle></math>. 
</p>


<p>Since the generation of any Fibonacci number only relies on knowing the 
previous two numbers we can look at the series through a window of two
elements. To create the series the window is placed at the start over
the values  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>]</mo></mrow></mstyle></math> and their sum obtained. The window is now shifted to 
the right by one position and the sum placed into the empty slot of the
window; the process is then repeated. To implement this we require a 
function that takes a list of two elements (the current view of the window),
adds them, and outputs the new window. The result is the function
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>[</mo><mi>a</mi><mo>,</mo><mi>b</mi><mo>]</mo><mo>&#x2192;</mo><mi>b</mi><mo>,</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>]</mo></mrow></mstyle></math>:
</p>



<div id="spadComm0-148" class="spadComm" >
<form id="formComm0-148" action="javascript:makeRequest('0-148');" >
<input id="comm0-148" type="text" class="command" style="width: 23em;" value="win : List Integer -> List Integer" />
</form>
<span id="commSav0-148" class="commSav" >win : List Integer -> List Integer</span>
<div id="mathAns0-148" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm0-149" class="spadComm" >
<form id="formComm0-149" action="javascript:makeRequest('0-149');" >
<input id="comm0-149" type="text" class="command" style="width: 18em;" value="win(x) == [x.2, x.1 + x.2]" />
</form>
<span id="commSav0-149" class="commSav" >win(x) == [x.2, x.1 + x.2]</span>
<div id="mathAns0-149" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm0-150" class="spadComm" >
<form id="formComm0-150" action="javascript:makeRequest('0-150');" >
<input id="comm0-150" type="text" class="command" style="width: 7em;" value="win([1,1])" />
</form>
<span id="commSav0-150" class="commSav" >win([1,1])</span>
<div id="mathAns0-150" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>





<div id="spadComm0-151" class="spadComm" >
<form id="formComm0-151" action="javascript:makeRequest('0-151');" >
<input id="comm0-151" type="text" class="command" style="width: 5em;" value="win(%)" />
</form>
<span id="commSav0-151" class="commSav" >win(%)</span>
<div id="mathAns0-151" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>Thus it can be seen that repeatedly applying <span style="font-weight: bold;"> win</span> to the <span class="slant">results</span>
of the previous invocation each element of the series is obtained. Clearly
<span style="font-weight: bold;"> win</span> is an ideal function to construct streams using the <span style="font-weight: bold;"> generate</span>
function:
</p>



<div id="spadComm0-152" class="spadComm" >
<form id="formComm0-152" action="javascript:makeRequest('0-152');" >
<input id="comm0-152" type="text" class="command" style="width: 20em;" value="fibs := [generate(win,[1,1])]" />
</form>
<span id="commSav0-152" class="commSav" >fibs := [generate(win,[1,1])]</span>
<div id="mathAns0-152" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>]</mo></mrow><mo>,</mo><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>]</mo></mrow><mo>,</mo><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>]</mo></mrow><mo>,</mo><mrow><mo>[</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>]</mo></mrow><mo>,</mo><mrow><mo>[</mo><mn>5</mn><mo>,</mo><mn>8</mn><mo>]</mo></mrow><mo>,</mo><mrow><mo>[</mo><mn>8</mn><mo>,</mo><mn>13</mn><mo>]</mo></mrow><mo>,</mo><mrow><mo>[</mo><mn>13</mn><mo>,</mo><mn>21</mn><mo>]</mo></mrow><mo>,</mo><mrow><mo>[</mo><mn>21</mn><mo>,</mo><mn>34</mn><mo>]</mo></mrow><mo>,</mo><mrow><mo>[</mo><mn>34</mn><mo>,</mo><mn>55</mn><mo>]</mo></mrow><mo>,</mo><mrow><mo>[</mo><mn>55</mn><mo>,</mo><mn>89</mn><mo>]</mo></mrow><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream List Integer
</div>



<p>This isn't quite what is wanted -- we need to extract the first element of
each list and place that in our series:
</p>



<div id="spadComm0-153" class="spadComm" >
<form id="formComm0-153" action="javascript:makeRequest('0-153');" >
<input id="comm0-153" type="text" class="command" style="width: 30em;" value="fibs := [i.1 for i in [generate(win,[1,1])] ]" />
</form>
<span id="commSav0-153" class="commSav" >fibs := [i.1 for i in [generate(win,[1,1])] ]</span>
<div id="mathAns0-153" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>13</mn><mo>,</mo><mn>21</mn><mo>,</mo><mn>34</mn><mo>,</mo><mn>55</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Integer
</div>



<p>Obtaining the 200th Fibonacci number is trivial:
</p>



<div id="spadComm0-154" class="spadComm" >
<form id="formComm0-154" action="javascript:makeRequest('0-154');" >
<input id="comm0-154" type="text" class="command" style="width: 6em;" value="fibs.200" />
</form>
<span id="commSav0-154" class="commSav" >fibs.200</span>
<div id="mathAns0-154" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>280571172992510140037611932413038677189525</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>One other function of interest is <span style="font-weight: bold;"> complete</span> which expands a finite
stream derived from an infinite one (and thus was still stored as an
infinite stream) to form a finite stream.
</p>




</div>



<a name="subsec-0.6.4"/>
<div class="subsection"  id="subsec-0.6.4">
<h3 class="subsectitle">0.6.4  Arrays, Vectors, Strings, and Bits</h3>


<p>The simplest array data structure is the <span class="slant">one-dimensional array</span> which
can be obtained by applying the <span style="font-weight: bold;"> oneDimensionalArray</span> function to a list:
</p>



<div id="spadComm0-155" class="spadComm" >
<form id="formComm0-155" action="javascript:makeRequest('0-155');" >
<input id="comm0-155" type="text" class="command" style="width: 23em;" value="oneDimensionalArray([7,2,5,4,1,9])" />
</form>
<span id="commSav0-155" class="commSav" >oneDimensionalArray([7,2,5,4,1,9])</span>
<div id="mathAns0-155" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>7</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>9</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: OneDimensionalArray PositiveInteger
</div>



<p>One-dimensional array are homogenous (all elements must have the same type)
and mutable (elements can be changed) like lists but unlike lists they are
constant in size and have uniform access times (it is just as quick to read
the last element of a one-dimensional array as it is to read the first; this
is not true for lists).
</p>


<p>Since these arrays are mutable all the warnings that apply to lists apply to
arrays. That is, it is possible to modify an element in a copy of an array
and change the original:
</p>



<div id="spadComm0-156" class="spadComm" >
<form id="formComm0-156" action="javascript:makeRequest('0-156');" >
<input id="comm0-156" type="text" class="command" style="width: 26em;" value="x := oneDimensionalArray([7,2,5,4,1,9])" />
</form>
<span id="commSav0-156" class="commSav" >x := oneDimensionalArray([7,2,5,4,1,9])</span>
<div id="mathAns0-156" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>7</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>9</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: OneDimensionalArray PositiveInteger
</div>





<div id="spadComm0-157" class="spadComm" >
<form id="formComm0-157" action="javascript:makeRequest('0-157');" >
<input id="comm0-157" type="text" class="command" style="width: 4em;" value="y := x" />
</form>
<span id="commSav0-157" class="commSav" >y := x</span>
<div id="mathAns0-157" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>7</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>9</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: OneDimensionalArray PositiveInteger
</div>





<div id="spadComm0-158" class="spadComm" >
<form id="formComm0-158" action="javascript:makeRequest('0-158');" >
<input id="comm0-158" type="text" class="command" style="width: 9em;" value="y.3 := 20 ; x" />
</form>
<span id="commSav0-158" class="commSav" >y.3 := 20 ; x</span>
<div id="mathAns0-158" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>7</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>20</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>9</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: OneDimensionalArray PositiveInteger
</div>



<p>Note that because these arrays are of fixed size the <span style="font-weight: bold;"> concat!</span> function
cannot be applied to them without generating an error. If arrays of this 
type are required use the <span style="font-weight: bold;"> FlexibleArray</span> constructor.
</p>


<p>One-dimensional arrays can be created using <span style="font-weight: bold;"> new</span> which specifies the size
of the array and the initial value for each of the elements. Other operations
that can be applied to one-dimensional arrays are <span style="font-weight: bold;"> map!</span> which applies
a mapping onto each element, <span style="font-weight: bold;"> swap!</span> which swaps two elements and
<span style="font-weight: bold;"> copyInto!(a,b,c)</span> which copies the array <span class="slant">b</span> onto <span class="slant">a</span> starting at
position <span class="slant">c</span>.
</p>



<div id="spadComm0-159" class="spadComm" >
<form id="formComm0-159" action="javascript:makeRequest('0-159');" >
<input id="comm0-159" type="text" class="command" style="width: 26em;" value="a : ARRAY1 PositiveInteger := new(10,3)" />
</form>
<span id="commSav0-159" class="commSav" >a : ARRAY1 PositiveInteger := new(10,3)</span>
<div id="mathAns0-159" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>3</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>3</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: OneDimensionalArray PositiveInteger
</div>



<p>(note that <span class="teletype">ARRAY1</span> is an abbreviation for the type 
<span class="teletype">OneDimensionalArray</span>.) Other types based on one-dimensional arrays are
<span class="teletype">Vector</span>, <span class="teletype">String</span>, and <span class="teletype">Bits</span>.
</p>




<div id="spadComm0-160" class="spadComm" >
<form id="formComm0-160" action="javascript:makeRequest('0-160');" >
<input id="comm0-160" type="text" class="command" style="width: 14em;" value="map!(i +-> i+1,a); a" />
</form>
<span id="commSav0-160" class="commSav" >map!(i +-> i+1,a); a</span>
<div id="mathAns0-160" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>4</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>4</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: OneDimensionalArray PositiveInteger
</div>





<div id="spadComm0-161" class="spadComm" >
<form id="formComm0-161" action="javascript:makeRequest('0-161');" >
<input id="comm0-161" type="text" class="command" style="width: 25em;" value="b := oneDimensionalArray([2,3,4,5,6])" />
</form>
<span id="commSav0-161" class="commSav" >b := oneDimensionalArray([2,3,4,5,6])</span>
<div id="mathAns0-161" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>6</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: OneDimensionalArray PositiveInteger
</div>





<div id="spadComm0-162" class="spadComm" >
<form id="formComm0-162" action="javascript:makeRequest('0-162');" >
<input id="comm0-162" type="text" class="command" style="width: 10em;" value="swap!(b,2,3); b" />
</form>
<span id="commSav0-162" class="commSav" >swap!(b,2,3); b</span>
<div id="mathAns0-162" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>6</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: OneDimensionalArray PositiveInteger
</div>





<div id="spadComm0-163" class="spadComm" >
<form id="formComm0-163" action="javascript:makeRequest('0-163');" >
<input id="comm0-163" type="text" class="command" style="width: 11em;" value="copyInto!(a,b,3)" />
</form>
<span id="commSav0-163" class="commSav" >copyInto!(a,b,3)</span>
<div id="mathAns0-163" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>4</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>4</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: OneDimensionalArray PositiveInteger
</div>





<div id="spadComm0-164" class="spadComm" >
<form id="formComm0-164" action="javascript:makeRequest('0-164');" >
<input id="comm0-164" type="text" class="command" style="width: 1em;" value="a" />
</form>
<span id="commSav0-164" class="commSav" >a</span>
<div id="mathAns0-164" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>4</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>4</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: OneDimensionalArray PositiveInteger
</div>





<div id="spadComm0-165" class="spadComm" >
<form id="formComm0-165" action="javascript:makeRequest('0-165');" >
<input id="comm0-165" type="text" class="command" style="width: 15em;" value="vector([1/2,1/3,1/14])" />
</form>
<span id="commSav0-165" class="commSav" >vector([1/2,1/3,1/14])</span>
<div id="mathAns0-165" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo>,</mo><mfrac><mn>1</mn><mn>3</mn></mfrac><mo>,</mo><mfrac><mn>1</mn><mn>14</mn></mfrac><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Vector Fraction Integer
</div>





<div id="spadComm0-166" class="spadComm" >
<form id="formComm0-166" action="javascript:makeRequest('0-166');" >
<input id="comm0-166" type="text" class="command" style="width: 10em;" value='"Hello, World"' />
</form>
<span id="commSav0-166" class="commSav" >"Hello, World"</span>
<div id="mathAns0-166" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"Hello,World"</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: String
</div>





<div id="spadComm0-167" class="spadComm" >
<form id="formComm0-167" action="javascript:makeRequest('0-167');" >
<input id="comm0-167" type="text" class="command" style="width: 8em;" value="bits(8,true)" />
</form>
<span id="commSav0-167" class="commSav" >bits(8,true)</span>
<div id="mathAns0-167" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"11111111"</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Bits
</div>



<p>A vector is similar to a one-dimensional array except that if its 
components belong to a ring then arithmetic operations are provided.
</p>




</div>



<a name="subsec-0.6.5"/>
<div class="subsection"  id="subsec-0.6.5">
<h3 class="subsectitle">0.6.5  Flexible Arrays</h3>


<p>Flexible arrays are designed to provide the efficiency of one-dimensional
arrays while retaining the flexibility of lists. They are implemented by
allocating a fixed block of storage for the array. If the array needs to
be expanded then a larger block of storage is allocated and the contents
of the old block are copied into the new one.
</p>


<p>There are several operations that can be applied to this type, most of
which modify the array in place. As a result these functions all have 
names ending in ``!''. The <span style="font-weight: bold;"> physicalLength</span> returns the actual length
of the array as stored in memory while the <span style="font-weight: bold;"> physicalLength!</span> allows this
value to be changed by the user.
</p>



<div id="spadComm0-168" class="spadComm" >
<form id="formComm0-168" action="javascript:makeRequest('0-168');" >
<input id="comm0-168" type="text" class="command" style="width: 18em;" value="f : FARRAY INT := new(6,1)" />
</form>
<span id="commSav0-168" class="commSav" >f : FARRAY INT := new(6,1)</span>
<div id="mathAns0-168" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FlexibleArray Integer
</div>





<div id="spadComm0-169" class="spadComm" >
<form id="formComm0-169" action="javascript:makeRequest('0-169');" >
<input id="comm0-169" type="text" class="command" style="width: 24em;" value="f.1:=4; f.2:=3 ; f.3:=8 ; f.5:=2 ; f" />
</form>
<span id="commSav0-169" class="commSav" >f.1:=4; f.2:=3 ; f.3:=8 ; f.5:=2 ; f</span>
<div id="mathAns0-169" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>4</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>1</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FlexibleArray Integer
</div>





<div id="spadComm0-170" class="spadComm" >
<form id="formComm0-170" action="javascript:makeRequest('0-170');" >
<input id="comm0-170" type="text" class="command" style="width: 12em;" value="insert!(42,f,3); f" />
</form>
<span id="commSav0-170" class="commSav" >insert!(42,f,3); f</span>
<div id="mathAns0-170" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>4</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>42</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>1</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FlexibleArray Integer
</div>





<div id="spadComm0-171" class="spadComm" >
<form id="formComm0-171" action="javascript:makeRequest('0-171');" >
<input id="comm0-171" type="text" class="command" style="width: 12em;" value="insert!(28,f,8); f" />
</form>
<span id="commSav0-171" class="commSav" >insert!(28,f,8); f</span>
<div id="mathAns0-171" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>4</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>42</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>28</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FlexibleArray Integer
</div>





<div id="spadComm0-172" class="spadComm" >
<form id="formComm0-172" action="javascript:makeRequest('0-172');" >
<input id="comm0-172" type="text" class="command" style="width: 14em;" value="removeDuplicates!(f)" />
</form>
<span id="commSav0-172" class="commSav" >removeDuplicates!(f)</span>
<div id="mathAns0-172" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>4</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>42</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>28</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FlexibleArray Integer
</div>





<div id="spadComm0-173" class="spadComm" >
<form id="formComm0-173" action="javascript:makeRequest('0-173');" >
<input id="comm0-173" type="text" class="command" style="width: 8em;" value="delete!(f,5)" />
</form>
<span id="commSav0-173" class="commSav" >delete!(f,5)</span>
<div id="mathAns0-173" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>4</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>42</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>28</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FlexibleArray Integer
</div>





<div id="spadComm0-174" class="spadComm" >
<form id="formComm0-174" action="javascript:makeRequest('0-174');" >
<input id="comm0-174" type="text" class="command" style="width: 7em;" value="g:=f(3..5)" />
</form>
<span id="commSav0-174" class="commSav" >g:=f(3..5)</span>
<div id="mathAns0-174" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>42</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>2</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FlexibleArray Integer
</div>





<div id="spadComm0-175" class="spadComm" >
<form id="formComm0-175" action="javascript:makeRequest('0-175');" >
<input id="comm0-175" type="text" class="command" style="width: 6em;" value="g.2:=7; f" />
</form>
<span id="commSav0-175" class="commSav" >g.2:=7; f</span>
<div id="mathAns0-175" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>4</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>42</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>28</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FlexibleArray Integer
</div>





<div id="spadComm0-176" class="spadComm" >
<form id="formComm0-176" action="javascript:makeRequest('0-176');" >
<input id="comm0-176" type="text" class="command" style="width: 10em;" value="insert!(g,f,1)" />
</form>
<span id="commSav0-176" class="commSav" >insert!(g,f,1)</span>
<div id="mathAns0-176" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>42</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>42</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>28</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FlexibleArray Integer
</div>





<div id="spadComm0-177" class="spadComm" >
<form id="formComm0-177" action="javascript:makeRequest('0-177');" >
<input id="comm0-177" type="text" class="command" style="width: 12em;" value="physicalLength(f)" />
</form>
<span id="commSav0-177" class="commSav" >physicalLength(f)</span>
<div id="mathAns0-177" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>10</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm0-178" class="spadComm" >
<form id="formComm0-178" action="javascript:makeRequest('0-178');" >
<input id="comm0-178" type="text" class="command" style="width: 14em;" value="physicalLength!(f,20)" />
</form>
<span id="commSav0-178" class="commSav" >physicalLength!(f,20)</span>
<div id="mathAns0-178" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>42</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>42</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>28</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FlexibleArray Integer
</div>





<div id="spadComm0-179" class="spadComm" >
<form id="formComm0-179" action="javascript:makeRequest('0-179');" >
<input id="comm0-179" type="text" class="command" style="width: 17em;" value="merge!(sort!(f),sort!(g))" />
</form>
<span id="commSav0-179" class="commSav" >merge!(sort!(f),sort!(g))</span>
<div id="mathAns0-179" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>28</mn><mo>,</mo><mn>42</mn><mo>,</mo><mn>42</mn><mo>,</mo><mn>42</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FlexibleArray Integer
</div>





<div id="spadComm0-180" class="spadComm" >
<form id="formComm0-180" action="javascript:makeRequest('0-180');" >
<input id="comm0-180" type="text" class="command" style="width: 27em;" value="shrinkable(false)$FlexibleArray(Integer)" />
</form>
<span id="commSav0-180" class="commSav" >shrinkable(false)$FlexibleArray(Integer)</span>
<div id="mathAns0-180" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>There are several things to point out concerning these
examples. First, although flexible arrays are mutable, making copies
of these arrays creates separate entities. This can be seen by the
fact that the modification of element <span class="slant">b.2</span> above did not alter
<span class="slant">a</span>. Second, the <span style="font-weight: bold;"> merge!</span>  function can take an extra argument
before the two arrays are merged. The argument is a comparison
function and defaults to <span class="italic"><span class="teletype">&lt;=</span></span> if omitted. Lastly, 
<span style="font-weight: bold;"> shrinkable</span> tells the system whether or not to let flexible arrays
contract when elements are deleted from them. An explicit package
reference must be given as in the example above.
</p>




</div>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-0.5.xhtml" style="margin-right: 10px;">Previous Section 0.5 General Points about FriCAS</a><a href="section-0.7.xhtml" style="margin-right: 10px;">Next Section 0.7 Functions, Choices, and Loops</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>