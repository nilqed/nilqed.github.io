<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section9.37</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-9.36.xhtml" style="margin-right: 10px;">Previous Section 9.36 IntegerNumberTheoryFunctions</a><a href="section-9.38.xhtml" style="margin-right: 10px;">Next Section 9.38  KeyedAccessFile</a><a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-9.37">
<h2 class="sectiontitle">9.37  Kernel</h2>


<a name="KernelXmpPage" class="label"/>


<p>A <span class="italic">kernel</span> is a symbolic function application (such as <span class="teletype">sin(x+ y)</span>) 
or a symbol (such as <span class="teletype">x</span>).  More precisely, a non-symbol
kernel over a set <span class="italic">S</span> is an operator applied to a given list of
arguments from <span class="italic">S</span>.  The operator has type <span class="teletype">BasicOperator</span>
(see <a href="section-9.3.xhtml#BasicOperatorXmpPage" class="ref" >BasicOperatorXmpPage</a> ) 
and the kernel object is usually part of an expression object (see 
<a href="section-9.21.xhtml#ExpressionXmpPage" class="ref" >ExpressionXmpPage</a> ).
</p>


<p>Kernels are created implicitly for you when you create expressions.
</p>




<div id="spadComm9-168" class="spadComm" >
<form id="formComm9-168" action="javascript:makeRequest('9-168');" >
<input id="comm9-168" type="text" class="command" style="width: 16em;" value="x :: Expression Integer" />
</form>
<span id="commSav9-168" class="commSav" >x :: Expression Integer</span>
<div id="mathAns9-168" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>x</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Expression Integer
</div>



<p>You can directly create a <span class="italic">symbol</span> kernel by using the
<span class="spadfunFrom" >kernel</span><span class="index">kernel</span><a name="chapter-9-122"/><span class="index">Kernel</span><a name="chapter-9-123"/> operation.
</p>




<div id="spadComm9-169" class="spadComm" >
<form id="formComm9-169" action="javascript:makeRequest('9-169');" >
<input id="comm9-169" type="text" class="command" style="width: 6em;" value="kernel x" />
</form>
<span id="commSav9-169" class="commSav" >kernel x</span>
<div id="mathAns9-169" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>x</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Kernel Expression Integer
</div>



<p>This expression has two different kernels.
</p>




<div id="spadComm9-170" class="spadComm" >
<form id="formComm9-170" action="javascript:makeRequest('9-170');" >
<input id="comm9-170" type="text" class="command" style="width: 11em;" value="sin(x) + cos(x) " />
</form>
<span id="commSav9-170" class="commSav" >sin(x) + cos(x) </span>
<div id="mathAns9-170" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mo>sin</mo><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mo>+</mo><mrow><mo>cos</mo><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Expression Integer
</div>



<p>The operator <span class="spadfunFrom" >kernels</span><span class="index">kernels</span><a name="chapter-9-124"/><span class="index">Expression</span><a name="chapter-9-125"/> returns a list of the
kernels in an object of type <span class="teletype">Expression</span>.
</p>




<div id="spadComm9-171" class="spadComm" >
<form id="formComm9-171" action="javascript:makeRequest('9-171');" >
<input id="comm9-171" type="text" class="command" style="width: 8em;" value="kernels % " />
</form>
<span id="commSav9-171" class="commSav" >kernels % </span>
<div id="mathAns9-171" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mo>sin</mo><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mo>,</mo><mrow><mo>cos</mo><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Kernel Expression Integer
</div>



<p>This expression also has two different kernels.
</p>




<div id="spadComm9-172" class="spadComm" >
<form id="formComm9-172" action="javascript:makeRequest('9-172');" >
<input id="comm9-172" type="text" class="command" style="width: 19em;" value="sin(x)^2 + sin(x) + cos(x) " />
</form>
<span id="commSav9-172" class="commSav" >sin(x)^2 + sin(x) + cos(x) </span>
<div id="mathAns9-172" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mrow><mo>sin</mo><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mn>2</mn></msup></mrow><mo>+</mo><mrow><mo>sin</mo><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mo>+</mo><mrow><mo>cos</mo><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Expression Integer
</div>



<p>The <span class="teletype">sin(x)</span> kernel is used twice.
</p>




<div id="spadComm9-173" class="spadComm" >
<form id="formComm9-173" action="javascript:makeRequest('9-173');" >
<input id="comm9-173" type="text" class="command" style="width: 8em;" value="kernels % " />
</form>
<span id="commSav9-173" class="commSav" >kernels % </span>
<div id="mathAns9-173" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mo>sin</mo><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mo>,</mo><mrow><mo>cos</mo><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Kernel Expression Integer
</div>



<p>An expression need not contain any kernels.
</p>




<div id="spadComm9-174" class="spadComm" >
<form id="formComm9-174" action="javascript:makeRequest('9-174');" >
<input id="comm9-174" type="text" class="command" style="width: 22em;" value="kernels(1 :: Expression Integer)" />
</form>
<span id="commSav9-174" class="commSav" >kernels(1 :: Expression Integer)</span>
<div id="mathAns9-174" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mspace width="0.5 em" /><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Kernel Expression Integer
</div>



<p>If one or more kernels are present, one of them is
designated the <span class="italic">main</span> kernel.
</p>




<div id="spadComm9-175" class="spadComm" >
<form id="formComm9-175" action="javascript:makeRequest('9-175');" >
<input id="comm9-175" type="text" class="command" style="width: 18em;" value="mainKernel(cos(x) + tan(x))" />
</form>
<span id="commSav9-175" class="commSav" >mainKernel(cos(x) + tan(x))</span>
<div id="mathAns9-175" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>tan</mo><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union(Kernel Expression Integer,...)
</div>



<p>Kernels can be nested. Use <span class="spadfunFrom" >height</span><span class="index">height</span><a name="chapter-9-126"/><span class="index">Kernel</span><a name="chapter-9-127"/> to determine
the nesting depth.
</p>




<div id="spadComm9-176" class="spadComm" >
<form id="formComm9-176" action="javascript:makeRequest('9-176');" >
<input id="comm9-176" type="text" class="command" style="width: 10em;" value="height kernel x" />
</form>
<span id="commSav9-176" class="commSav" >height kernel x</span>
<div id="mathAns9-176" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>This has height 2 because the <span class="teletype">x</span> has height 1 and then we apply
an operator to that.
</p>




<div id="spadComm9-177" class="spadComm" >
<form id="formComm9-177" action="javascript:makeRequest('9-177');" >
<input id="comm9-177" type="text" class="command" style="width: 16em;" value="height mainKernel(sin x)" />
</form>
<span id="commSav9-177" class="commSav" >height mainKernel(sin x)</span>
<div id="mathAns9-177" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm9-178" class="spadComm" >
<form id="formComm9-178" action="javascript:makeRequest('9-178');" >
<input id="comm9-178" type="text" class="command" style="width: 19em;" value="height mainKernel(sin cos x)" />
</form>
<span id="commSav9-178" class="commSav" >height mainKernel(sin cos x)</span>
<div id="mathAns9-178" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>3</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm9-179" class="spadComm" >
<form id="formComm9-179" action="javascript:makeRequest('9-179');" >
<input id="comm9-179" type="text" class="command" style="width: 28em;" value="height mainKernel(sin cos (tan x + sin x))" />
</form>
<span id="commSav9-179" class="commSav" >height mainKernel(sin cos (tan x + sin x))</span>
<div id="mathAns9-179" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>4</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Use the <span class="spadfunFrom" >operator</span><span class="index">operator</span><a name="chapter-9-128"/><span class="index">Kernel</span><a name="chapter-9-129"/> operation to extract the
operator component of the kernel.  The operator has type <span class="teletype">BasicOperator</span>.
</p>




<div id="spadComm9-180" class="spadComm" >
<form id="formComm9-180" action="javascript:makeRequest('9-180');" >
<input id="comm9-180" type="text" class="command" style="width: 30em;" value="operator mainKernel(sin cos (tan x + sin x))" />
</form>
<span id="commSav9-180" class="commSav" >operator mainKernel(sin cos (tan x + sin x))</span>
<div id="mathAns9-180" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mo>sin</mo></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: BasicOperator
</div>



<p>Use the <span class="spadfunFrom" >name</span><span class="index">name</span><a name="chapter-9-130"/><span class="index">Kernel</span><a name="chapter-9-131"/> operation to extract the name of
the operator component of the kernel.  The name has type <span class="teletype">Symbol</span>.
This is really just a shortcut for a two-step process of extracting
the operator and then calling <span class="spadfunFrom" >name</span><span class="index">name</span><a name="chapter-9-132"/><span class="index">BasicOperator</span><a name="chapter-9-133"/> on
the operator.
</p>




<div id="spadComm9-181" class="spadComm" >
<form id="formComm9-181" action="javascript:makeRequest('9-181');" >
<input id="comm9-181" type="text" class="command" style="width: 27em;" value="name mainKernel(sin cos (tan x + sin x))" />
</form>
<span id="commSav9-181" class="commSav" >name mainKernel(sin cos (tan x + sin x))</span>
<div id="mathAns9-181" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mo>sin</mo></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Symbol
</div>



<p>FriCAS knows about functions such as <span class="teletype">sin</span>, <span class="teletype">cos</span> and so on and
can make kernels and then expressions using them.  To create a kernel
and expression using an arbitrary operator, use
<span class="spadfunFrom" >operator</span><span class="index">operator</span><a name="chapter-9-134"/><span class="index">BasicOperator</span><a name="chapter-9-135"/>.
</p>


<p>Now <span class="teletype">f</span> can be used to create symbolic function applications.
</p>




<div id="spadComm9-182" class="spadComm" >
<form id="formComm9-182" action="javascript:makeRequest('9-182');" >
<input id="comm9-182" type="text" class="command" style="width: 12em;" value="f := operator 'f " />
</form>
<span id="commSav9-182" class="commSav" >f := operator 'f </span>
<div id="mathAns9-182" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>f</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: BasicOperator
</div>





<div id="spadComm9-183" class="spadComm" >
<form id="formComm9-183" action="javascript:makeRequest('9-183');" >
<input id="comm9-183" type="text" class="command" style="width: 12em;" value="e := f(x, y, 10) " />
</form>
<span id="commSav9-183" class="commSav" >e := f(x, y, 10) </span>
<div id="mathAns9-183" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mi>f</mi><mo>(</mo><mrow><mi>x</mi><mo>,</mo><mi>y</mi><mo>,</mo><mn>10</mn></mrow><mo>)</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Expression Integer
</div>



<p>Use the <span class="spadfunFrom" >is?</span><span class="index">is?</span><a name="chapter-9-136"/><span class="index">Kernel</span><a name="chapter-9-137"/> operation to learn if the
operator component of a kernel is equal to a given operator.
</p>




<div id="spadComm9-184" class="spadComm" >
<form id="formComm9-184" action="javascript:makeRequest('9-184');" >
<input id="comm9-184" type="text" class="command" style="width: 7em;" value="is?(e, f) " />
</form>
<span id="commSav9-184" class="commSav" >is?(e, f) </span>
<div id="mathAns9-184" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>You can also use a symbol or a string as the second argument to
<span class="spadfunFrom" >is?</span><span class="index">is?</span><a name="chapter-9-138"/><span class="index">Kernel</span><a name="chapter-9-139"/>.
</p>




<div id="spadComm9-185" class="spadComm" >
<form id="formComm9-185" action="javascript:makeRequest('9-185');" >
<input id="comm9-185" type="text" class="command" style="width: 8em;" value="is?(e, 'f) " />
</form>
<span id="commSav9-185" class="commSav" >is?(e, 'f) </span>
<div id="mathAns9-185" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>Use the <span class="spadfunFrom" >argument</span><span class="index">argument</span><a name="chapter-9-140"/><span class="index">Kernel</span><a name="chapter-9-141"/> operation to get a list containing
the argument component of a kernel.
</p>




<div id="spadComm9-186" class="spadComm" >
<form id="formComm9-186" action="javascript:makeRequest('9-186');" >
<input id="comm9-186" type="text" class="command" style="width: 15em;" value="argument mainKernel e " />
</form>
<span id="commSav9-186" class="commSav" >argument mainKernel e </span>
<div id="mathAns9-186" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo>,</mo><mn>10</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Expression Integer
</div>



<p>Conceptually, an object of type <span class="teletype">Expression</span> can be thought of a
quotient of multivariate polynomials, where the <span class="italic">variables</span> are
kernels.  The arguments of the kernels are again expressions and so
the structure recurses.  See <a href="section-9.21.xhtml#ExpressionXmpPage" class="ref" >ExpressionXmpPage</a>  for examples of
using kernels to take apart expression objects.
</p>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-9.36.xhtml" style="margin-right: 10px;">Previous Section 9.36 IntegerNumberTheoryFunctions</a><a href="section-9.38.xhtml" style="margin-right: 10px;">Next Section 9.38  KeyedAccessFile</a><a href="book-index.xhtml">Book Index</a></body>
</html>