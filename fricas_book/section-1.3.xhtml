<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section1.3</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-1.2.xhtml" style="margin-right: 10px;">Previous Section 1.2 Typographic Conventions</a><a href="section-1.4.xhtml" style="margin-right: 10px;">Next Section 1.4 Numbers</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-1.3">
<h2 class="sectiontitle">1.3  The FriCAS Language</h2>


<a name="ugIntroExpressions" class="label"/>

<p>The FriCAS language is a rich language for performing interactive
computations and for building components of the FriCAS library.
Here we present only some basic aspects of the language that you need
to know for the rest of this chapter.  Our discussion here is
intentionally informal, with details unveiled on an <span class="italic">as needed</span>
basis.  For more information on a particular construct, we suggest you
consult the index.
</p>



<a name="subsec-1.3.1"/>
<div class="subsection"  id="subsec-1.3.1">
<h3 class="subsectitle">1.3.1  Arithmetic Expressions</h3>


<a name="ugIntroArithmetic" class="label"/>

<p>For arithmetic expressions, use the ``<span class="teletype">+</span>'' and <span class="italic"><span class="teletype">-</span></span> operator
as in mathematics.  Use <span class="italic"><span class="teletype">*</span></span> for multiplication, and <span class="italic"><span class="teletype">^</span></span>
for exponentiation.  To create a fraction, use <span class="italic"><span class="teletype">/</span></span>.  When an
expression contains several operators, those of highest
<span class="italic">precedence</span> are evaluated first.  For arithmetic operators,
<span class="italic"><span class="teletype">^</span></span> has highest precedence, <span class="italic"><span class="teletype">*</span></span> and <span class="italic"><span class="teletype">/</span></span> have the
next highest precedence, and ``<span class="teletype">+</span>'' and <span class="italic"><span class="teletype">-</span></span> have the lowest
precedence.
</p>


<p>FriCAS puts implicit parentheses around operations of higher
precedence, and groups those of equal precedence from left to right.
</p>



<div id="spadComm1-1" class="spadComm" >
<form id="formComm1-1" action="javascript:makeRequest('1-1');" >
<input id="comm1-1" type="text" class="command" style="width: 18em;" value="1 + 2 - 3 / 4 * 3 ^ 2 - 1" />
</form>
<span id="commSav1-1" class="commSav" >1 + 2 - 3 / 4 * 3 ^ 2 - 1</span>
<div id="mathAns1-1" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mfrac><mn>19</mn><mn>4</mn></mfrac></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Integer
</div>



<p>The above expression is equivalent to this.
</p>



<div id="spadComm1-2" class="spadComm" >
<form id="formComm1-2" action="javascript:makeRequest('1-2');" >
<input id="comm1-2" type="text" class="command" style="width: 24em;" value="((1 + 2) - ((3 / 4) * (3 ^ 2))) - 1" />
</form>
<span id="commSav1-2" class="commSav" >((1 + 2) - ((3 / 4) * (3 ^ 2))) - 1</span>
<div id="mathAns1-2" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mfrac><mn>19</mn><mn>4</mn></mfrac></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Integer
</div>



<p>If an expression contains subexpressions enclosed in parentheses,
the parenthesized subexpressions are evaluated first (from left to
right, from inside out).
</p>



<div id="spadComm1-3" class="spadComm" >
<form id="formComm1-3" action="javascript:makeRequest('1-3');" >
<input id="comm1-3" type="text" class="command" style="width: 20em;" value="1 + 2 - 3/ (4 * 3 ^ (2 - 1))" />
</form>
<span id="commSav1-3" class="commSav" >1 + 2 - 3/ (4 * 3 ^ (2 - 1))</span>
<div id="mathAns1-3" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mfrac><mn>11</mn><mn>4</mn></mfrac></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Integer
</div>





</div>



<a name="subsec-1.3.2"/>
<div class="subsection"  id="subsec-1.3.2">
<h3 class="subsectitle">1.3.2  Previous Results</h3>


<a name="ugIntroPrevious" class="label"/>

<p>Use the percent sign ``<span class="teletype">%</span>'' to refer to the last result.
<span class="index">result:previous</span><a name="chapter-1-12"/> Also, use ``<span class="teletype">%%</span>" to refer to
previous results.  <span class="index">percentpercent@{%%}</span><a name="chapter-1-13"/> ``<span class="teletype">%%(-1)</span>'' is
equivalent to ``<span class="teletype">%</span>'', ``<span class="teletype">%%(-2)</span>'' returns the next to
the last result, and so on.  ``<span class="teletype">%%(1)</span>'' returns the result from
step number 1, ``<span class="teletype">%%(2)</span>'' returns the result from step number 2,
and so on.  ``<span class="teletype">%%(0)</span>'' is not defined.
</p>


<p>This is ten to the tenth power.
</p>



<div id="spadComm1-4" class="spadComm" >
<form id="formComm1-4" action="javascript:makeRequest('1-4');" >
<input id="comm1-4" type="text" class="command" style="width: 6em;" value="10 ^ 10" />
</form>
<span id="commSav1-4" class="commSav" >10 ^ 10</span>
<div id="mathAns1-4" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>10000000000</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>This is the last result minus one.
</p>



<div id="spadComm1-5" class="spadComm" >
<form id="formComm1-5" action="javascript:makeRequest('1-5');" >
<input id="comm1-5" type="text" class="command" style="width: 4em;" value="% - 1" />
</form>
<span id="commSav1-5" class="commSav" >% - 1</span>
<div id="mathAns1-5" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>9999999999</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>This is the last result.
</p>



<div id="spadComm1-6" class="spadComm" >
<form id="formComm1-6" action="javascript:makeRequest('1-6');" >
<input id="comm1-6" type="text" class="command" style="width: 6em;" value="%%(-1)" />
</form>
<span id="commSav1-6" class="commSav" >%%(-1)</span>
<div id="mathAns1-6" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>9999999999</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>This is the result from step number 1.
</p>



<div id="spadComm1-7" class="spadComm" >
<form id="formComm1-7" action="javascript:makeRequest('1-7');" >
<input id="comm1-7" type="text" class="command" style="width: 5em;" value="%%(1)" />
</form>
<span id="commSav1-7" class="commSav" >%%(1)</span>
<div id="mathAns1-7" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>10000000000</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





</div>



<a name="subsec-1.3.3"/>
<div class="subsection"  id="subsec-1.3.3">
<h3 class="subsectitle">1.3.3  Some Types</h3>


<a name="ugIntroTypes" class="label"/>

<p>Everything in FriCAS has a type.  The type determines what operations
you can perform on an object and how the object can be used.
Chapter~<a href="section-2.0.xhtml#ugTypes" class="ref" >ugTypes</a>  is dedicated to the
interactive use of types.  Several of the final chapters discuss how
types are built and how they are organized in the FriCAS library.
</p>


<p>Positive integers are given type <span style="font-weight: bold;"> PositiveInteger</span>.
</p>



<div id="spadComm1-8" class="spadComm" >
<form id="formComm1-8" action="javascript:makeRequest('1-8');" >
<input id="comm1-8" type="text" class="command" style="width: 1em;" value="8" />
</form>
<span id="commSav1-8" class="commSav" >8</span>
<div id="mathAns1-8" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>8</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Negative ones are given type <span style="font-weight: bold;"> Integer</span>.  This fine
distinction is helpful to the FriCAS interpreter.
</p>




<div id="spadComm1-9" class="spadComm" >
<form id="formComm1-9" action="javascript:makeRequest('1-9');" >
<input id="comm1-9" type="text" class="command" style="width: 2em;" value="-8" />
</form>
<span id="commSav1-9" class="commSav" >-8</span>
<div id="mathAns1-9" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mn>8</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Integer
</div>



<p>Here a positive integer exponent gives a polynomial result.
</p>



<div id="spadComm1-10" class="spadComm" >
<form id="formComm1-10" action="javascript:makeRequest('1-10');" >
<input id="comm1-10" type="text" class="command" style="width: 3em;" value="x^8" />
</form>
<span id="commSav1-10" class="commSav" >x^8</span>
<div id="mathAns1-10" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><msup><mi>x</mi><mn>8</mn></msup></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Integer
</div>



<p>Here a negative integer exponent produces a fraction.
</p>



<div id="spadComm1-11" class="spadComm" >
<form id="formComm1-11" action="javascript:makeRequest('1-11');" >
<input id="comm1-11" type="text" class="command" style="width: 5em;" value="x^(-8)" />
</form>
<span id="commSav1-11" class="commSav" >x^(-8)</span>
<div id="mathAns1-11" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mfrac><mn>1</mn><mrow><msup><mi>x</mi><mn>8</mn></msup></mrow></mfrac></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Polynomial Integer
</div>





</div>



<a name="subsec-1.3.4"/>
<div class="subsection"  id="subsec-1.3.4">
<h3 class="subsectitle">1.3.4  Symbols, Variables, Assignments, and Declarations</h3>


<a name="ugIntroAssign" class="label"/>

<p>A <span class="italic">symbol</span> is a literal used for the input of things like
the <span class="italic">variables</span> in polynomials and power series.
</p>


<p>We use the three symbols <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math>, <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math>, and <math xmlns="&mathml;" mathsize="big"><mstyle><mi>z</mi></mstyle></math> in
entering this polynomial.
</p>



<div id="spadComm1-12" class="spadComm" >
<form id="formComm1-12" action="javascript:makeRequest('1-12');" >
<input id="comm1-12" type="text" class="command" style="width: 8em;" value="(x - y*z)^2" />
</form>
<span id="commSav1-12" class="commSav" >(x - y*z)^2</span>
<div id="mathAns1-12" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow><mo></mo><mrow><msup><mi>z</mi><mn>2</mn></msup></mrow></mrow><mo>-</mo><mrow><mn>2</mn><mo></mo><mi>x</mi><mo></mo><mi>y</mi><mo></mo><mi>z</mi></mrow><mo>+</mo><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Integer
</div>



<p>A symbol has a name beginning with an uppercase or lowercase
alphabetic <span class="index">symbol:naming</span><a name="chapter-1-14"/> character, ``<span class="teletype">%</span>'', or
``<span class="teletype">!</span>''.  Successive characters (if any) can be any of the
above, digits, or <span class="italic"><span class="teletype">?</span></span>.  Case is distinguished: the symbol
<span class="teletype">points</span> is different from the symbol <span class="teletype">Points</span>.
</p>


<p>A symbol can also be used in FriCAS as a <span class="italic">variable</span>.  A variable
refers to a value.  To <span style="font-style: italic;"> assign</span> a value to a variable,
<span class="index">variable:naming</span><a name="chapter-1-15"/> the operator ``<span class="teletype">:=</span>'' <span class="index">assignment</span><a name="chapter-1-16"/>
is used.  <span class="footnote">FriCAS actually has two forms of assignment: 
<span class="italic">immediate</span> assignment, as discussed here, and <span class="italic">delayed
assignment</span>.  See Section <a href="section-5.1.xhtml#ugLangAssign" class="ref" >ugLangAssign</a> 
for details.</span>  A variable initially has no restrictions on the kinds
of <span class="index">declaration</span><a name="chapter-1-17"/> values to which it can refer.
</p>


<p>This assignment gives the value <math xmlns="&mathml;" mathsize="big"><mstyle><mn>4</mn></mstyle></math> (an integer) to
a variable named <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math>.
</p>



<div id="spadComm1-13" class="spadComm" >
<form id="formComm1-13" action="javascript:makeRequest('1-13');" >
<input id="comm1-13" type="text" class="command" style="width: 4em;" value="x := 4" />
</form>
<span id="commSav1-13" class="commSav" >x := 4</span>
<div id="mathAns1-13" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>4</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>This gives the value <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>z</mi><mo>+</mo><mn>3</mn><mo>/</mo><mn>5</mn></mrow></mstyle></math> (a polynomial)  to <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math>.
</p>



<div id="spadComm1-14" class="spadComm" >
<form id="formComm1-14" action="javascript:makeRequest('1-14');" >
<input id="comm1-14" type="text" class="command" style="width: 8em;" value="x := z + 3/5" />
</form>
<span id="commSav1-14" class="commSav" >x := z + 3/5</span>
<div id="mathAns1-14" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mi>z</mi><mo>+</mo><mfrac><mn>3</mn><mn>5</mn></mfrac></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Fraction Integer
</div>



<p>To restrict the types of objects that can be assigned to a variable,
use a <span class="italic">declaration</span>
</p>



<div id="spadComm1-15" class="spadComm" >
<form id="formComm1-15" action="javascript:makeRequest('1-15');" >
<input id="comm1-15" type="text" class="command" style="width: 8em;" value="y : Integer" />
</form>
<span id="commSav1-15" class="commSav" >y : Integer</span>
<div id="mathAns1-15" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>After a variable is declared to be of some type, only values
of that type can be assigned to that variable.
</p>



<div id="spadComm1-16" class="spadComm" >
<form id="formComm1-16" action="javascript:makeRequest('1-16');" >
<input id="comm1-16" type="text" class="command" style="width: 5em;" value="y := 89" />
</form>
<span id="commSav1-16" class="commSav" >y := 89</span>
<div id="mathAns1-16" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>89</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Integer
</div>



<p>The declaration for <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math> forces values assigned to <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math> to
be converted to integer values.
</p>



<div id="spadComm1-17" class="spadComm" >
<form id="formComm1-17" action="javascript:makeRequest('1-17');" >
<input id="comm1-17" type="text" class="command" style="width: 9em;" value="y := sin %pi" />
</form>
<span id="commSav1-17" class="commSav" >y := sin %pi</span>
<div id="mathAns1-17" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>0</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Integer
</div>



<p>If no such conversion is possible,
FriCAS refuses to assign a value to <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math>.
</p>



<div id="spadComm1-18" class="spadComm" >
<form id="formComm1-18" action="javascript:makeRequest('1-18');" >
<input id="comm1-18" type="text" class="command" style="width: 6em;" value="y := 2/3" />
</form>
<span id="commSav1-18" class="commSav" >y := 2/3</span>
<div id="mathAns1-18" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Cannot&nbsp;convert&nbsp;right-hand&nbsp;side&nbsp;of&nbsp;assignment<br />
&nbsp;&nbsp;&nbsp;2<br />
&nbsp;&nbsp;&nbsp;-<br />
&nbsp;&nbsp;&nbsp;3<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;an&nbsp;object&nbsp;of&nbsp;the&nbsp;type&nbsp;Integer&nbsp;of&nbsp;the&nbsp;left-hand&nbsp;side.<br />
</div>



<p>A type declaration can also be given together with an assignment.
The declaration can assist FriCAS in choosing the correct
operations to apply.
</p>



<div id="spadComm1-19" class="spadComm" >
<form id="formComm1-19" action="javascript:makeRequest('1-19');" >
<input id="comm1-19" type="text" class="command" style="width: 11em;" value="f : Float := 2/3" />
</form>
<span id="commSav1-19" class="commSav" >f : Float := 2/3</span>
<div id="mathAns1-19" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>0</mn><mo>.</mo><mn>6666666666</mn><mo></mo><mn>6666666667</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>



<p>Any number of expressions can be given on input line.
Just separate them by semicolons.
Only the result of evaluating the last expression is displayed.
</p>


<p>These two expressions have the same effect as
the previous single expression.
</p>




<div id="spadComm1-20" class="spadComm" >
<form id="formComm1-20" action="javascript:makeRequest('1-20');" >
<input id="comm1-20" type="text" class="command" style="width: 13em;" value="f : Float; f := 2/3" />
</form>
<span id="commSav1-20" class="commSav" >f : Float; f := 2/3</span>
<div id="mathAns1-20" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>0</mn><mo>.</mo><mn>6666666666</mn><mo></mo><mn>6666666667</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>



<p>The type of a symbol is either <span class="teletype">Symbol</span>
or <span class="teletype">Variable(<span class="italic">name</span>)</span> where <span class="italic">name</span> is the name
of the symbol.
</p>


<p>By default, the interpreter
gives this symbol the type <span class="teletype">Variable(q)</span>.
</p>




<div id="spadComm1-21" class="spadComm" >
<form id="formComm1-21" action="javascript:makeRequest('1-21');" >
<input id="comm1-21" type="text" class="command" style="width: 1em;" value="q" />
</form>
<span id="commSav1-21" class="commSav" >q</span>
<div id="mathAns1-21" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>q</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Variable q
</div>



<p>When multiple symbols are involved, <span class="teletype">Symbol</span> is used.
</p>



<div id="spadComm1-22" class="spadComm" >
<form id="formComm1-22" action="javascript:makeRequest('1-22');" >
<input id="comm1-22" type="text" class="command" style="width: 4em;" value="[q, r]" />
</form>
<span id="commSav1-22" class="commSav" >[q, r]</span>
<div id="mathAns1-22" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mi>q</mi><mo>,</mo><mi>r</mi><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List OrderedVariableList [q,r]
</div>



<p>What happens when you try to use a symbol that is the name of a variable?
</p>



<div id="spadComm1-23" class="spadComm" >
<form id="formComm1-23" action="javascript:makeRequest('1-23');" >
<input id="comm1-23" type="text" class="command" style="width: 1em;" value="f" />
</form>
<span id="commSav1-23" class="commSav" >f</span>
<div id="mathAns1-23" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>0</mn><mo>.</mo><mn>6666666666</mn><mo></mo><mn>6666666667</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>



<p>Use a single quote ``<span class="teletype">'</span>'' before <span class="index">quote</span><a name="chapter-1-18"/> the name to get the symbol.
</p>




<div id="spadComm1-24" class="spadComm" >
<form id="formComm1-24" action="javascript:makeRequest('1-24');" >
<input id="comm1-24" type="text" class="command" style="width: 2em;" value="'f" />
</form>
<span id="commSav1-24" class="commSav" >'f</span>
<div id="mathAns1-24" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>f</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Variable f
</div>



<p>Quoting a name creates a symbol by preventing evaluation of the name
as a variable.  Experience will teach you when you are most likely
going to need to use a quote.  We try to point out the location of
such trouble spots.
</p>




</div>



<a name="subsec-1.3.5"/>
<div class="subsection"  id="subsec-1.3.5">
<h3 class="subsectitle">1.3.5  Conversion</h3>


<a name="ugIntroConversion" class="label"/>

<p>Objects of one type can usually be <span class="italic">converted</span> to objects of several
other types.  To <span style="font-style: italic;"> convert</span> an object to a new type, use the ``<span class="teletype">::</span>'' 
infix operator.  <span class="footnote">Conversion is discussed in detail in
<a href="section-2.7.xhtml#ugTypesConvert" class="ref" >ugTypesConvert</a>.</span>  For example,
to display an object, it is necessary to convert the object to type
<span class="teletype">OutputForm</span>.
</p>


<p>This produces a polynomial with rational number coefficients.
</p>




<div id="spadComm1-25" class="spadComm" >
<form id="formComm1-25" action="javascript:makeRequest('1-25');" >
<input id="comm1-25" type="text" class="command" style="width: 10em;" value="p := r^2 + 2/3" />
</form>
<span id="commSav1-25" class="commSav" >p := r^2 + 2/3</span>
<div id="mathAns1-25" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mi>r</mi><mn>2</mn></msup></mrow><mo>+</mo><mfrac><mn>2</mn><mn>3</mn></mfrac></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Fraction Integer
</div>



<p>Create a quotient of polynomials with integer coefficients
by using ``<span class="teletype">::</span>''.
</p>




<div id="spadComm1-26" class="spadComm" >
<form id="formComm1-26" action="javascript:makeRequest('1-26');" >
<input id="comm1-26" type="text" class="command" style="width: 22em;" value="p :: Fraction Polynomial Integer " />
</form>
<span id="commSav1-26" class="commSav" >p :: Fraction Polynomial Integer </span>
<div id="mathAns1-26" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mfrac><mrow><mrow><mn>3</mn><mo></mo><mrow><msup><mi>r</mi><mn>2</mn></msup></mrow></mrow><mo>+</mo><mn>2</mn></mrow><mn>3</mn></mfrac></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Polynomial Integer
</div>



<p>Some conversions can be performed automatically when FriCAS tries
to evaluate your input.  Others conversions must be explicitly
requested.
</p>




</div>



<a name="subsec-1.3.6"/>
<div class="subsection"  id="subsec-1.3.6">
<h3 class="subsectitle">1.3.6  Calling Functions</h3>


<a name="ugIntroCallFun" class="label"/>

<p>As we saw earlier, when you want to add or subtract two values, you
place the arithmetic operator ``<span class="teletype">+</span>'' or <span class="italic"><span class="teletype">-</span></span> between the two
arguments denoting the values.  To use most other FriCAS
operations, however, you use another syntax: <span class="index">function:calling</span><a name="chapter-1-19"/>
write the name of the operation first, then an open parenthesis, then
each of the arguments separated by commas, and, finally, a closing
parenthesis.  If the operation takes only one argument and the
argument is a number or a symbol, you can omit the parentheses.
</p>


<p>This calls the operation <span style="font-weight: bold;"> factor</span> with the single integer argument <math xmlns="&mathml;" mathsize="big"><mstyle><mn>120</mn></mstyle></math>.
</p>




<div id="spadComm1-27" class="spadComm" >
<form id="formComm1-27" action="javascript:makeRequest('1-27');" >
<input id="comm1-27" type="text" class="command" style="width: 8em;" value="factor(120)" />
</form>
<span id="commSav1-27" class="commSav" >factor(120)</span>
<div id="mathAns1-27" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mn>2</mn><mn>3</mn></msup></mrow><mo></mo><mn>3</mn><mo></mo><mn>5</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Factored Integer
</div>



<p>This is a call to <span style="font-weight: bold;"> divide</span> with the two integer arguments
<math xmlns="&mathml;" mathsize="big"><mstyle><mn>125</mn></mstyle></math> and <math xmlns="&mathml;" mathsize="big"><mstyle><mn>7</mn></mstyle></math>.
</p>



<div id="spadComm1-28" class="spadComm" >
<form id="formComm1-28" action="javascript:makeRequest('1-28');" >
<input id="comm1-28" type="text" class="command" style="width: 9em;" value="divide(125,7)" />
</form>
<span id="commSav1-28" class="commSav" >divide(125,7)</span>
<div id="mathAns1-28" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mi>quotient</mi><mo>=</mo><mn>17</mn></mrow><mo>,</mo><mrow><mi>remainder</mi><mo>=</mo><mn>6</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Record(quotient: Integer, remainder: Integer)
</div>



<p>This calls <span style="font-weight: bold;"> quatern</span> with four floating-point arguments.
</p>



<div id="spadComm1-29" class="spadComm" >
<form id="formComm1-29" action="javascript:makeRequest('1-29');" >
<input id="comm1-29" type="text" class="command" style="width: 16em;" value="quatern(3.4,5.6,2.9,0.1)" />
</form>
<span id="commSav1-29" class="commSav" >quatern(3.4,5.6,2.9,0.1)</span>
<div id="mathAns1-29" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>.</mo><mn>4</mn></mrow><mo>+</mo><mrow><mrow><mn>5</mn><mo>.</mo><mn>6</mn></mrow><mo></mo><mi>i</mi></mrow><mo>+</mo><mrow><mrow><mn>2</mn><mo>.</mo><mn>9</mn></mrow><mo></mo><mi>j</mi></mrow><mo>+</mo><mrow><mrow><mn>0</mn><mo>.</mo><mn>1</mn></mrow><mo></mo><mi>k</mi></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Quaternion Float
</div>



<p>This is the same as <span style="font-weight: bold;"> factorial</span>(10).
</p>



<div id="spadComm1-30" class="spadComm" >
<form id="formComm1-30" action="javascript:makeRequest('1-30');" >
<input id="comm1-30" type="text" class="command" style="width: 8em;" value="factorial 10" />
</form>
<span id="commSav1-30" class="commSav" >factorial 10</span>
<div id="mathAns1-30" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>3628800</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>An operation that returns a <span class="teletype">Boolean</span> value (that is,
<span class="teletype">true</span> or <span class="teletype">false</span>) frequently has a name suffixed with
a question mark (<span class="italic">?</span>).  For example, the <span style="font-weight: bold;"> even?</span>
operation returns <span class="teletype">true</span> if its integer argument is an even
number, <span class="teletype">false</span> otherwise.
</p>


<p>An operation that can be destructive on one or more arguments
usually has a name ending in a exclamation point (``!'').
This actually means that it is <span class="italic">allowed</span> to update its
arguments but it is not <span class="italic">required</span> to do so. For example,
the underlying representation of a collection type may not allow
the very last element to be removed and so an empty object may be
returned instead. Therefore it is important that you use the
object returned by the operation and not rely on a physical
change having occurred within the object. Usually destructive
operations are provided for efficiency reasons.
</p>




</div>



<a name="subsec-1.3.7"/>
<div class="subsection"  id="subsec-1.3.7">
<h3 class="subsectitle">1.3.7  Some Predefined Macros</h3>


<a name="ugIntroMacros" class="label"/>

<p>FriCAS provides several macros for your convenience.<span class="footnote">See
<a href="section-6.2.xhtml#ugUserMacros" class="ref" >ugUserMacros</a>  for a discussion on
how to write your own macros.</span>  Macros are names
<span class="index">macro:predefined</span><a name="chapter-1-20"/> (or forms) that expand to larger expressions
for commonly used values.
</p>




<div class="center" style="text-align: center;">


<p><table class="begintabular">
<tr><td><span class="italic">%i</span>             </td><td>  The square root of -1. </td></tr>
<tr><td><span class="italic">%e</span>             </td><td>  The base of the natural logarithm. </td></tr>
<tr><td><span class="italic">%pi</span>            </td><td>  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03C0;</mi></mstyle></math>. </td></tr>
<tr><td><span class="italic">%infinity</span>      </td><td>  <math xmlns="&mathml;" mathsize="big"><mstyle><mo>&#x221E;</mo></mstyle></math>. </td></tr>
<tr><td><span class="italic">%plusInfinity</span>  </td><td>  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>+</mo><mo>&#x221E;</mo></mrow></mstyle></math>. </td></tr>
<tr><td><span class="italic">%minusInfinity</span> </td><td>  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>-</mo><mo>&#x221E;</mo></mrow></mstyle></math>. </td></tr>
</table>
</p>



</div>


<p><span class="index">%i</span><a name="chapter-1-21"/>
<span class="index">%e</span><a name="chapter-1-22"/>
<span class="index">%pi</span><a name="chapter-1-23"/>
<span class="index">pi@{<math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03C0;</mi></mstyle></math> (= %pi)}</span><a name="chapter-1-24"/>
<span class="index">%infinity</span><a name="chapter-1-25"/>
<span class="index">infinity@{<math xmlns="&mathml;" mathsize="big"><mstyle><mo>&#x221E;</mo></mstyle></math> (= %infinity)}</span><a name="chapter-1-26"/>
<span class="index">%plusInfinity</span><a name="chapter-1-27"/>
<span class="index">%minusInfinity</span><a name="chapter-1-28"/>
</p>


<p>To display all the macros (along with anything you have
defined in the workspace), issue the system command <span class="teletype">)display all</span>.
</p>




</div>



<a name="subsec-1.3.8"/>
<div class="subsection"  id="subsec-1.3.8">
<h3 class="subsectitle">1.3.8  Long Lines</h3>


<a name="ugIntroLong" class="label"/>

<p>When you enter FriCAS expressions from your keyboard, there will
be times when they are too long to fit on one line.  FriCAS does
not care how long your lines are, so you can let them continue from
the right margin to the left side of the next line.
</p>


<p>Alternatively, you may want to enter several shorter lines and have
FriCAS glue them together.  To get this glue, put an underscore
(_) at the end of each line you wish to continue.
</p>




<div class="verbatim"><br />
2_<br />
+_<br />
3<br />
</div>


<p>is the same as if you had entered
</p>



<div class="verbatim"><br />
2+3<br />
</div>



<p>FriCAS statements in an input file
(see Section <a href="section-4.1.xhtml#ugInOutIn" class="ref" >ugInOutIn</a> ),
can use indentation to indicate the program structure .
(see Section <a href="section-5.2.xhtml#ugLangBlocks" class="ref" >ugLangBlocks</a> ).
</p>




</div>



<a name="subsec-1.3.9"/>
<div class="subsection"  id="subsec-1.3.9">
<h3 class="subsectitle">1.3.9  Comments</h3>


<a name="ugIntroComments" class="label"/>

<p>Comment statements begin with two consecutive hyphens or two
consecutive plus signs and continue until the end of the line.
</p>


<p>The comment beginning with <span class="italic"><span class="teletype">--</span></span> is ignored by FriCAS.
</p>



<div id="spadComm1-31" class="spadComm" >
<form id="formComm1-31" action="javascript:makeRequest('1-31');" >
<input id="comm1-31" type="text" class="command" style="width: 25em;" value="2 + 3   -- this is rather simple, no?" />
</form>
<span id="commSav1-31" class="commSav" >2 + 3   -- this is rather simple, no?</span>
<div id="mathAns1-31" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>5</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>There is no way to write long multi-line comments other than starting
each line with <span class="italic"><span class="teletype">--</span></span> or ``<span class="teletype">++</span>''.
</p>




</div>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-1.2.xhtml" style="margin-right: 10px;">Previous Section 1.2 Typographic Conventions</a><a href="section-1.4.xhtml" style="margin-right: 10px;">Next Section 1.4 Numbers</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>