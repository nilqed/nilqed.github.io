<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section5.6</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-5.5.xhtml" style="margin-right: 10px;">Previous Section 5.5 Creating Lists and Streams with Iterators</a><a href="section-6.0.xhtml" style="margin-right: 10px;">Next Section 6.0 Functions, Macros and Rules</a><a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-5.6">
<h2 class="sectiontitle">5.6  An Example: Streams of Primes</h2>


<a name="ugLangStreamsPrimes" class="label"/>


<p>We conclude this chapter with an example of the creation and
manipulation of infinite streams of prime integers.  This might be
useful for experiments with numbers or other applications where you
are using sequences of primes over and over again.  As for all
streams, the stream of primes is only computed as far out as you need.
Once computed, however, all the primes up to that point are saved for
future reference.
</p>


<p>Two useful operations provided by the FriCAS library are
<span class="spadfunFrom" >prime?</span><span class="index">prime?</span><a name="chapter-5-61"/><span class="index">IntegerPrimesPackage</span><a name="chapter-5-62"/> and
<span class="spadfunFrom" >nextPrime</span><span class="index">nextPrime</span><a name="chapter-5-63"/><span class="index">IntegerPrimesPackage</span><a name="chapter-5-64"/>.  A straight-forward way
to create a stream of prime numbers is to start with the stream of
positive integers  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mo>.</mo><mo>.</mo><mo>]</mo></mrow></mstyle></math> and filter out those that are prime.
</p>


<p>Create a stream of primes.
</p>



<div id="spadComm5-72" class="spadComm" >
<form id="formComm5-72" action="javascript:makeRequest('5-72');" >
<input id="comm5-72" type="text" class="command" style="width: 36em;" value="primes : Stream Integer := [i for i in 2.. | prime? i]" />
</form>
<span id="commSav5-72" class="commSav" >primes : Stream Integer := [i for i in 2.. | prime? i]</span>
<div id="mathAns5-72" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>11</mn><mo>,</mo><mn>13</mn><mo>,</mo><mn>17</mn><mo>,</mo><mn>19</mn><mo>,</mo><mn>23</mn><mo>,</mo><mn>29</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Integer
</div>



<p>A more elegant way, however, is to use the
<span class="spadfunFrom" >generate</span><span class="index">generate</span><a name="chapter-5-65"/><span class="index">Stream</span><a name="chapter-5-66"/> operation from <span class="teletype">Stream</span>.  Given an
initial value  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> and a function  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math>, <span class="spadfunFrom" >generate</span><span class="index">generate</span><a name="chapter-5-67"/><span class="index">Stream</span><a name="chapter-5-68"/>
constructs the stream  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>[</mo><mi>a</mi><mo>,</mo><mi>f</mi><mo>(</mo><mi>a</mi><mo>)</mo><mo>,</mo><mi>f</mi><mo>(</mo><mi>f</mi><mo>(</mo><mi>a</mi><mo>)</mo><mo>)</mo><mo>,</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>]</mo></mrow></mstyle></math>.  This function gives
you the quickest method of getting the stream of primes.
</p>


<p>This is how you use <span class="spadfunFrom" >generate</span><span class="index">generate</span><a name="chapter-5-69"/><span class="index">Stream</span><a name="chapter-5-70"/> to generate an
infinite stream of primes.
</p>



<div id="spadComm5-73" class="spadComm" >
<form id="formComm5-73" action="javascript:makeRequest('5-73');" >
<input id="comm5-73" type="text" class="command" style="width: 21em;" value="primes := generate(nextPrime,2)" />
</form>
<span id="commSav5-73" class="commSav" >primes := generate(nextPrime,2)</span>
<div id="mathAns5-73" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>11</mn><mo>,</mo><mn>13</mn><mo>,</mo><mn>17</mn><mo>,</mo><mn>19</mn><mo>,</mo><mn>23</mn><mo>,</mo><mn>29</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Integer
</div>



<p>Once the stream is generated, you might only be interested in primes
starting at a particular value.
</p>



<div id="spadComm5-74" class="spadComm" >
<form id="formComm5-74" action="javascript:makeRequest('5-74');" >
<input id="comm5-74" type="text" class="command" style="width: 30em;" value="smallPrimes := [p for p in primes | p > 1000]" />
</form>
<span id="commSav5-74" class="commSav" >smallPrimes := [p for p in primes | p > 1000]</span>
<div id="mathAns5-74" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1009</mn><mo>,</mo><mn>1013</mn><mo>,</mo><mn>1019</mn><mo>,</mo><mn>1021</mn><mo>,</mo><mn>1031</mn><mo>,</mo><mn>1033</mn><mo>,</mo><mn>1039</mn><mo>,</mo><mn>1049</mn><mo>,</mo><mn>1051</mn><mo>,</mo><mn>1061</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Integer
</div>



<p>Here are the first 11 primes greater than 1000.
</p>



<div id="spadComm5-75" class="spadComm" >
<form id="formComm5-75" action="javascript:makeRequest('5-75');" >
<input id="comm5-75" type="text" class="command" style="width: 26em;" value="[p for p in smallPrimes for i in 1..11]" />
</form>
<span id="commSav5-75" class="commSav" >[p for p in smallPrimes for i in 1..11]</span>
<div id="mathAns5-75" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1009</mn><mo>,</mo><mn>1013</mn><mo>,</mo><mn>1019</mn><mo>,</mo><mn>1021</mn><mo>,</mo><mn>1031</mn><mo>,</mo><mn>1033</mn><mo>,</mo><mn>1039</mn><mo>,</mo><mn>1049</mn><mo>,</mo><mn>1051</mn><mo>,</mo><mn>1061</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Integer
</div>



<p>Here is a stream of primes between 1000 and 1200.
</p>



<div id="spadComm5-76" class="spadComm" >
<form id="formComm5-76" action="javascript:makeRequest('5-76');" >
<input id="comm5-76" type="text" class="command" style="width: 26em;" value="[p for p in smallPrimes while p &lt; 1200]" />
</form>
<span id="commSav5-76" class="commSav" >[p for p in smallPrimes while p &lt; 1200]</span>
<div id="mathAns5-76" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1009</mn><mo>,</mo><mn>1013</mn><mo>,</mo><mn>1019</mn><mo>,</mo><mn>1021</mn><mo>,</mo><mn>1031</mn><mo>,</mo><mn>1033</mn><mo>,</mo><mn>1039</mn><mo>,</mo><mn>1049</mn><mo>,</mo><mn>1051</mn><mo>,</mo><mn>1061</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Integer
</div>



<p>To get these expanded into a finite stream, you call
<span class="spadfunFrom" >complete</span><span class="index">complete</span><a name="chapter-5-71"/><span class="index">Stream</span><a name="chapter-5-72"/> on the stream.
</p>



<div id="spadComm5-77" class="spadComm" >
<form id="formComm5-77" action="javascript:makeRequest('5-77');" >
<input id="comm5-77" type="text" class="command" style="width: 8em;" value="complete %" />
</form>
<span id="commSav5-77" class="commSav" >complete %</span>
<div id="mathAns5-77" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1009</mn><mo>,</mo><mn>1013</mn><mo>,</mo><mn>1019</mn><mo>,</mo><mn>1021</mn><mo>,</mo><mn>1031</mn><mo>,</mo><mn>1033</mn><mo>,</mo><mn>1039</mn><mo>,</mo><mn>1049</mn><mo>,</mo><mn>1051</mn><mo>,</mo><mn>1061</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Integer
</div>



<p>Twin primes are consecutive odd number pairs which are prime.
Here is the stream of twin primes.
</p>



<div id="spadComm5-78" class="spadComm" >
<form id="formComm5-78" action="javascript:makeRequest('5-78');" >
<input id="comm5-78" type="text" class="command" style="width: 38em;" value="twinPrimes := [ [p,p+2] for p in primes | prime?(p + 2)]" />
</form>
<span id="commSav5-78" class="commSav" >twinPrimes := [ [p,p+2] for p in primes | prime?(p + 2)]</span>
<div id="mathAns5-78" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtable><mtr><mtd><mo>[</mo><mrow><mo>[</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>]</mo></mrow><mo>,</mo><mrow><mo>[</mo><mn>5</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow><mo>,</mo><mrow><mo>[</mo><mn>11</mn><mo>,</mo><mn>13</mn><mo>]</mo></mrow><mo>,</mo><mrow><mo>[</mo><mn>17</mn><mo>,</mo><mn>19</mn><mo>]</mo></mrow><mo>,</mo><mrow><mo>[</mo><mn>29</mn><mo>,</mo><mn>31</mn><mo>]</mo></mrow><mo>,</mo><mrow><mo>[</mo><mn>41</mn><mo>,</mo><mn>43</mn><mo>]</mo></mrow><mo>,</mo><mrow><mo>[</mo><mn>59</mn><mo>,</mo><mn>61</mn><mo>]</mo></mrow><mo>,</mo><mrow><mo>[</mo><mn>71</mn><mo>,</mo><mn>73</mn><mo>]</mo></mrow><mo>,</mo><mo>.</mo></mtd></mtr><mtr><mtd></mtd></mtr><mtr><mtd><mo>.</mo><mrow><mo>[</mo><mn>101</mn><mo>,</mo><mn>103</mn><mo>]</mo></mrow><mo>,</mo><mrow><mo>[</mo><mn>107</mn><mo>,</mo><mn>109</mn><mo>]</mo></mrow><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mtd></mtr></mtable></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream List Integer
</div>



<p>Since we already have the primes computed we can avoid the call to
<span class="spadfunFrom" >prime?</span><span class="index">prime?</span><a name="chapter-5-73"/><span class="index">IntegerPrimesPackage</span><a name="chapter-5-74"/> by using a double
iteration.  This time we'll just generate a stream of the first of the
twin primes.
</p>



<div id="spadComm5-79" class="spadComm" >
<form id="formComm5-79" action="javascript:makeRequest('5-79');" >
<input id="comm5-79" type="text" class="command" style="width: 42em;" value="firstOfTwins:= [p for p in primes for q in rest primes | q=p+2]" />
</form>
<span id="commSav5-79" class="commSav" >firstOfTwins:= [p for p in primes for q in rest primes | q=p+2]</span>
<div id="mathAns5-79" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>11</mn><mo>,</mo><mn>17</mn><mo>,</mo><mn>29</mn><mo>,</mo><mn>41</mn><mo>,</mo><mn>59</mn><mo>,</mo><mn>71</mn><mo>,</mo><mn>101</mn><mo>,</mo><mn>107</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Integer
</div>



<p>Let's try to compute the infinite stream of triplet primes, the set of
primes  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>p</mi></mstyle></math> such that  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>[</mo><mi>p</mi><mo>,</mo><mi>p</mi><mo>+</mo><mn>2</mn><mo>,</mo><mi>p</mi><mo>+</mo><mn>4</mn><mo>]</mo></mrow></mstyle></math> are primes. For example,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>[</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow></mstyle></math>
is a triple prime.  We could do this by a triple <span class="teletype">for</span> iteration.  A
more economical way is to use <span style="font-weight: bold;">firstOfTwins</span>.  This time however,
put a semicolon at the end of the line.
</p>


<p>Create the stream of firstTriplets.  Put a semicolon at the end so
that no elements are computed.
</p>



<div id="spadComm5-80" class="spadComm" >
<form id="formComm5-80" action="javascript:makeRequest('5-80');" >
<input id="comm5-80" type="text" class="command" style="width: 54em;" value="firstTriplets := [p for p in firstOfTwins for q in rest firstOfTwins | q = p+2];" />
</form>
<span id="commSav5-80" class="commSav" >firstTriplets := [p for p in firstOfTwins for q in rest firstOfTwins | q = p+2];</span>
<div id="mathAns5-80" ></div>
</div>




<div class="returnType">
Type: Stream Integer
</div>



<p>What happened?  As you know, by default FriCAS displays the first ten
elements of a stream when you first display it.  And, therefore, it
needs to compute them!  If you want <span class="italic">no</span> elements computed, just
terminate the expression by a semicolon (<span class="italic"><span class="teletype">;</span></span>).  The semi-colon
prevents the display of the result of evaluating the expression.
Since no stream elements are needed for display (or anything else, so
far), none are computed.
</p>


<p>Compute the first triplet prime.
</p>



<div id="spadComm5-81" class="spadComm" >
<form id="formComm5-81" action="javascript:makeRequest('5-81');" >
<input id="comm5-81" type="text" class="command" style="width: 10em;" value="firstTriplets.1" />
</form>
<span id="commSav5-81" class="commSav" >firstTriplets.1</span>
<div id="mathAns5-81" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>3</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>If you want to compute another, just ask for it.  But wait a second!
Given three consecutive odd integers, one of them must be divisible by
 <math xmlns="&mathml;" mathsize="big"><mstyle><mn>3</mn></mstyle></math>. Thus there is only one triplet prime.  But suppose that you did not
know this and wanted to know what was the tenth triplet prime.
</p>



<div class="verbatim"><br />
firstTriples.10<br />
</div>



<p>To compute the tenth triplet prime, FriCAS first must compute the
second, the third, and so on.  But since there isn't even a second
triplet prime, FriCAS will compute forever.  Nonetheless, this effort
can produce a useful result.  After waiting a bit, hit <span style="font-weight: bold;">Ctrl-c</span>.
The system responds as follows.
</p>



<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;&gt;&gt;&nbsp;System&nbsp;error:<br />
&nbsp;&nbsp;&nbsp;Console&nbsp;interrupt.<br />
&nbsp;&nbsp;&nbsp;You&nbsp;are&nbsp;being&nbsp;returned&nbsp;to&nbsp;the&nbsp;top&nbsp;level&nbsp;of<br />
&nbsp;&nbsp;&nbsp;the&nbsp;interpreter.<br />
</div>



<p>If you want to know how many primes have been computed, type:
</p>



<div class="verbatim"><br />
numberOfComputedEntries&nbsp;primes<br />
</div>



<p>and, for this discussion, let's say that the result is  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>2045</mn></mstyle></math>.
How big is the  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>2045</mn></mstyle></math>-th prime?
</p>



<div id="spadComm5-82" class="spadComm" >
<form id="formComm5-82" action="javascript:makeRequest('5-82');" >
<input id="comm5-82" type="text" class="command" style="width: 8em;" value="primes.2045" />
</form>
<span id="commSav5-82" class="commSav" >primes.2045</span>
<div id="mathAns5-82" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>17837</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>What you have learned is that there are no triplet primes between 5
and 17837.  Although this result is well known (some might even say
trivial), there are many experiments you could make where the result
is not known.  What you see here is a paradigm for testing of
hypotheses.  Here our hypothesis could have been: <span class="italic">there is more than
one triplet prime.</span>  We have tested this hypothesis for 17837 cases.
With streams, you can let your machine run, interrupt it to see how
far it has progressed, then start it up and let it continue from where
it left off.
</p>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-5.5.xhtml" style="margin-right: 10px;">Previous Section 5.5 Creating Lists and Streams with Iterators</a><a href="section-6.0.xhtml" style="margin-right: 10px;">Next Section 6.0 Functions, Macros and Rules</a><a href="book-index.xhtml">Book Index</a></body>
</html>