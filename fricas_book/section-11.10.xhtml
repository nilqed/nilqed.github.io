<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section11.10</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-11.9.xhtml" style="margin-right: 10px;">Previous Section 11.9 Testing</a><a href="section-12.0.xhtml" style="margin-right: 10px;">Next Section 12.0 Categories</a><a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-11.10">
<h2 class="sectiontitle">11.10  How Packages Work</h2>


<a name="ugPackagesHow" class="label"/>



<p>Recall that packages as abstract datatypes are compiled independently
and put into the library.
The curious reader may ask: ``How is the interpreter able to find an
operation such as <span style="font-weight: bold;"> bubbleSort!</span>?
Also, how is a single compiled function such as <span style="font-weight: bold;"> bubbleSort!</span> able
to sort data of different types?''
</p>


<p>After the interpreter loads the package <span class="teletype">SortPackage</span>, the four
operations from the package become known to the interpreter.
Each of these operations is expressed as a <span class="italic">modemap</span> in which the type
<span class="index">modemap</span><a name="chapter-11-23"/>
of the operation is written in terms of symbolic domains.
</p>


<p>See the modemaps for <span style="font-weight: bold;"> bubbleSort!</span>.
</p>


<p>)display op bubbleSort!
</p>




<div class="verbatim"><br />
There&nbsp;are&nbsp;2&nbsp;exposed&nbsp;functions&nbsp;called&nbsp;bubbleSort!&nbsp;:<br />
<br />
&nbsp;&nbsp;&nbsp;[1]&nbsp;D1&nbsp;-&gt;&nbsp;D1&nbsp;from&nbsp;SortPackage(D2,D1)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;D2&nbsp;has&nbsp;ORDSET&nbsp;and&nbsp;D2&nbsp;has&nbsp;OBJECT&nbsp;and&nbsp;D1&nbsp;has<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexedAggregate(Integer,&nbsp;D2)&nbsp;with<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finiteAggregate<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shallowlyMutable<br />
<br />
&nbsp;&nbsp;&nbsp;[2]&nbsp;(D1,((D3,D3)&nbsp;-&gt;&nbsp;Boolean))&nbsp;-&gt;&nbsp;D1&nbsp;from&nbsp;SortPackage(D3,D1)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;D3&nbsp;has&nbsp;OBJECT&nbsp;and&nbsp;D1&nbsp;has<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexedAggregate(Integer,D3)&nbsp;with<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finiteAggregate<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shallowlyMutable<br />
</div>



<p>What happens if you ask for <span class="teletype">bubbleSort!([1,-5,3])</span>?
There is a unique modemap for an operation named
<span style="font-weight: bold;"> bubbleSort!</span> with one argument.
Since <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mo>-</mo><mn>5</mn><mo>,</mo><mn>3</mn><mo>]</mo></mrow></mstyle></math> is a list of integers, the symbolic domain
<math xmlns="&mathml;" mathsize="big"><mstyle><mi>D1</mi></mstyle></math> is defined as <span class="teletype">List(Integer)</span>.
For some operation to apply, it must satisfy the predicate for
some <math xmlns="&mathml;" mathsize="big"><mstyle><mi>D2</mi></mstyle></math>.
What <math xmlns="&mathml;" mathsize="big"><mstyle><mi>D2</mi></mstyle></math>?
The third expression of the <span class="teletype">and</span> requires <span class="teletype">D1 has
IndexedAggregate(Integer, D2) with</span> two attributes.
So the interpreter searches for an <span class="teletype">IndexedAggregate</span>
among the ancestors of <span class="teletype">List (Integer)</span> (see
<a href="section-12.4.xhtml#ugCategoriesHier" class="ref" >ugCategoriesHier</a> ).
It finds one: <span class="teletype">IndexedAggregate(Integer, Integer)</span>.
The interpreter tries defining <math xmlns="&mathml;" mathsize="big"><mstyle><mi>D2</mi></mstyle></math> as <span class="teletype">Integer</span>.
After substituting for <math xmlns="&mathml;" mathsize="big"><mstyle><mi>D1</mi></mstyle></math> and <math xmlns="&mathml;" mathsize="big"><mstyle><mi>D2</mi></mstyle></math>, the predicate
evaluates to <span class="teletype">true</span>.
An applicable operation has been found!
</p>


<p>Now FriCAS builds the package
<span class="teletype">SortPackage(List(Integer), Integer)</span>.
According to its definition, this package exports the required
operation: <span style="font-weight: bold;"> bubbleSort!</span>: List Integer->List
Integer.
The interpreter then asks the package for a function implementing
this operation.
The package gets all the functions it needs (for example,
<span style="font-weight: bold;"> rest</span> and <span style="font-weight: bold;"> swap</span>) from the appropriate
domains and then it
returns a <span style="font-weight: bold;"> bubbleSort!</span> to the interpreter together with
the local environment for <span style="font-weight: bold;"> bubbleSort!</span>.
The interpreter applies the function to the argument <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mo>-</mo><mn>5</mn><mo>,</mo><mn>3</mn><mo>]</mo></mrow></mstyle></math>.
The <span style="font-weight: bold;"> bubbleSort!</span> function is executed in its local
environment and produces the result.
</p>





</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-11.9.xhtml" style="margin-right: 10px;">Previous Section 11.9 Testing</a><a href="section-12.0.xhtml" style="margin-right: 10px;">Next Section 12.0 Categories</a><a href="book-index.xhtml">Book Index</a></body>
</html>