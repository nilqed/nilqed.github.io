<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section2.9</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-2.8.xhtml" style="margin-right: 10px;">Previous Section 2.8 Subdomains Again</a><a href="section-2.10.xhtml" style="margin-right: 10px;">Next Section 2.10 Resolving Types</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-2.9">
<h2 class="sectiontitle">2.9  Package Calling and Target Types</h2>


<a name="ugTypesPkgCall" class="label"/>


<p>FriCAS works hard to figure out what you mean by an expression without
your having to qualify it with type information.  Nevertheless, there
are times when you need to help it along by providing hints (or even
orders!) to get FriCAS to do what you want.
</p>


<p>We saw in <a href="section-2.3.xhtml#ugTypesDeclare" class="ref" >ugTypesDeclare</a>  that
declarations using types and modes control the type of the results
produced.  For example, we can either produce a complex object with
polynomial real and imaginary parts or a polynomial with complex
integer coefficients, depending on the declaration.
</p>


<p>Package calling is how you tell FriCAS to use a particular function
from a particular part of the library.
</p>


<p>Use the <span class="spadopFrom" title="Fraction">/</span> from <span class="teletype">Fraction Integer</span> to create
a fraction of two integers.
</p>



<div id="spadComm2-111" class="spadComm" >
<form id="formComm2-111" action="javascript:makeRequest('2-111');" >
<input id="comm2-111" type="text" class="command" style="width: 2em;" value="2/3" />
</form>
<span id="commSav2-111" class="commSav" >2/3</span>
<div id="mathAns2-111" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mfrac><mn>2</mn><mn>3</mn></mfrac></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Integer
</div>



<p>If we wanted a floating point number, we can say <span class="italic">use the
<span class="spadopFrom" title="Float">/</span> in <span class="teletype">Float</span>.</span>
</p>



<div id="spadComm2-112" class="spadComm" >
<form id="formComm2-112" action="javascript:makeRequest('2-112');" >
<input id="comm2-112" type="text" class="command" style="width: 8em;" value="(2/3) $Float" />
</form>
<span id="commSav2-112" class="commSav" >(2/3) $Float</span>
<div id="mathAns2-112" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>0</mn><mo>.</mo><mn>6666666666</mn><mn>6666666667</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>



<p>Perhaps we actually wanted a fraction of complex integers.
</p>



<div id="spadComm2-113" class="spadComm" >
<form id="formComm2-113" action="javascript:makeRequest('2-113');" >
<input id="comm2-113" type="text" class="command" style="width: 22em;" value="(2/3) $Fraction(Complex Integer)" />
</form>
<span id="commSav2-113" class="commSav" >(2/3) $Fraction(Complex Integer)</span>
<div id="mathAns2-113" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mfrac><mn>2</mn><mn>3</mn></mfrac></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>



<p>In each case, AXIOM used the indicated operations, sometimes first
needing to convert the two integers into objects of the appropriate type.
In these examples, <span class="italic">/</span> is written as an infix operator.
</p>




<div class="boxed2">


<div class="boxed">



<p>To use package calling with an infix operator, use the following syntax:
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>(</mo><mo></mo><msub><mi>arg</mi><mn>1</mn></msub><mrow><mtext>&nbsp;op&nbsp;</mtext></mrow><msub><mi>arg</mi><mn>2</mn></msub><mo></mo><mo>)</mo><mi> $type</mi></mrow></mstyle></math>
</p>



</div>
</div>

<p> 
</p>


<p>We used, for example, <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mn>2</mn><mo>/</mo><mn>3</mn><mo>)</mo><mi> $</mi><mrow><mtext>Float</mtext></mrow></mrow></mstyle></math>. The expression <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>2</mn><mo>+</mo><mn>3</mn><mo>+</mo><mn>4</mn></mrow></mstyle></math>
is equivalent to <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mn>2</mn><mo>+</mo><mn>3</mn><mo>)</mo><mo>+</mo><mn>4</mn></mrow></mstyle></math>. Therefore in the expression 
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mn>2</mn><mo>+</mo><mn>3</mn><mo>+</mo><mn>4</mn><mo>)</mo><mi> $</mi><mrow><mtext>Float</mtext></mrow></mrow></mstyle></math> the second ``+'' comes from the  Float
domain. The first ``+'' comes from  Float because the package
call causes AXIOM to convert <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mn>2</mn><mo>+</mo><mn>3</mn><mo>)</mo></mrow></mstyle></math> and <math xmlns="&mathml;" mathsize="big"><mstyle><mn>4</mn></mstyle></math> to type
 Float. Before the sum is converted, it is given a target type
of  Float by AXIOM and then evaluated. The target type causes the
``+'' from <span class="teletype">Float</span> to be used.
</p>




<div class="boxed2">


<div class="boxed">



<p>For an operator written before its arguments, you must use parentheses
around the arguments (even if there is only one), and follow the closing
parenthesis by a `` $'' and then the type.
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mi>fun</mi><mo></mo><mo>(</mo><mo></mo><msub><mi>arg</mi><mn>1</mn></msub><mo>,</mo><msub><mi>arg</mi><mn>2</mn></msub><mo>,</mo><mo>&#x2026;</mo><mo>,</mo><msub><mi>arg</mi><mi>N</mi></msub><mo></mo><mo>)</mo><mi> $type</mi></mrow></mstyle></math>
</p>



</div>
</div>



<p>For example, to call the <span class="italic">minimum</span> function from  SmallFloat on two
integers, you could write <span style="font-weight: bold;"> min</span>(4,89) $<span class="teletype">SmallFloat</span>. Another use of
package calling is to tell AXIOM to use a library function rather than a
function you defined. We discuss this in 
Section <a href="section-6.9.xhtml#ugUserUse" class="ref" >ugUserUse</a> .
</p>


<p>Sometimes rather than specifying where an operation comes from, you
just want to say what type the result should be. We say that you provide a
<span style="font-style: italic;"> target type</span> for the expression. Instead of using a `` $'', use a ``@''
to specify the requested target type. Otherwise, the syntax is the same.
Note that giving a target type is not the same as explicitly doing a
conversion. The first says <span class="italic">try to pick operations so that the result has
such-and-such a type.</span> The second says <span class="italic">compute the result and then convert
to an object of such-and-such a type.</span>
</p>


<p>Sometimes it makes sense, as in this expression, to say ``choose the 
operations in this expression so that the final result is  Float.
</p>



<div id="spadComm2-114" class="spadComm" >
<form id="formComm2-114" action="javascript:makeRequest('2-114');" >
<input id="comm2-114" type="text" class="command" style="width: 8em;" value="(2/3)@Float" />
</form>
<span id="commSav2-114" class="commSav" >(2/3)@Float</span>
<div id="mathAns2-114" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>0</mn><mo>.</mo><mn>6666666666</mn><mn>6666666667</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>



<p>Here we used ``<span class="teletype">@</span>'' to say that the target type of the left-hand side
was <span class="teletype">Float</span>.  In this simple case, there was no real difference
between using ``<span class="teletype"> $</span>'' and ``<span class="teletype">@</span>''.  
You can see the difference if you try the following.
</p>


<p>This says to try to choose ``<span class="teletype">+</span>'' so that the result is a string.
FriCAS cannot do this.
</p>



<div id="spadComm2-115" class="spadComm" >
<form id="formComm2-115" action="javascript:makeRequest('2-115');" >
<input id="comm2-115" type="text" class="command" style="width: 10em;" value="(2 + 3)@String" />
</form>
<span id="commSav2-115" class="commSav" >(2 + 3)@String</span>
<div id="mathAns2-115" ></div>
</div>




<div class="verbatim">&nbsp;<br />
An&nbsp;expression&nbsp;involving&nbsp;@&nbsp;String&nbsp;actually&nbsp;evaluated&nbsp;to&nbsp;one&nbsp;of&nbsp;<br />
&nbsp;&nbsp;&nbsp;type&nbsp;PositiveInteger&nbsp;.&nbsp;Perhaps&nbsp;you&nbsp;should&nbsp;use&nbsp;::&nbsp;String&nbsp;.<br />
</div>



<p>This says to get the <span class="teletype">+</span> from <span class="teletype">String</span> and apply it to the two
integers.  FriCAS also cannot do this because there is no <span class="teletype">+</span>
exported by <span class="teletype">String</span>.
</p>



<div id="spadComm2-116" class="spadComm" >
<form id="formComm2-116" action="javascript:makeRequest('2-116');" >
<input id="comm2-116" type="text" class="command" style="width: 10em;" value="(2 + 3) $String" />
</form>
<span id="commSav2-116" class="commSav" >(2 + 3) $String</span>
<div id="mathAns2-116" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;The&nbsp;function&nbsp;+&nbsp;is&nbsp;not&nbsp;implemented&nbsp;in&nbsp;String&nbsp;.<br />
</div>



<p>(By the way, the operation <span class="spadfunFrom" style="font-weight: bold;">concat</span><span class="index">concat</span><a name="chapter-2-52"/><span class="index">String</span><a name="chapter-2-53"/> or juxtaposition
is used to concatenate two strings.)
<span class="index">String</span><a name="chapter-2-54"/>
</p>


<p>When we have more than one operation in an expression, the difference
is even more evident.  The following two expressions show that FriCAS
uses the target type to create different objects.  
The ``<span class="teletype">+</span>'', <span class="italic"><span class="teletype">*</span></span> and <span class="italic"><span class="teletype">^</span></span> operations are all 
chosen so that an object of the correct final type is created.
</p>


<p>This says that the operations should be chosen so that the result is a
<span class="teletype">Complex</span> object.
</p>



<div id="spadComm2-117" class="spadComm" >
<form id="formComm2-117" action="javascript:makeRequest('2-117');" >
<input id="comm2-117" type="text" class="command" style="width: 32em;" value="((x + y * %i)^2)@(Complex Polynomial Integer)" />
</form>
<span id="commSav2-117" class="commSav" >((x + y * %i)^2)@(Complex Polynomial Integer)</span>
<div id="mathAns2-117" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>2</mn><mo></mo><mi>x</mi><mo></mo><mi>y</mi><mo></mo><mi>i</mi></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Complex Polynomial Integer
</div>



<p>This says that the operations should be chosen so that the result is a
<span class="teletype">Polynomial</span> object.
</p>



<div id="spadComm2-118" class="spadComm" >
<form id="formComm2-118" action="javascript:makeRequest('2-118');" >
<input id="comm2-118" type="text" class="command" style="width: 32em;" value="((x + y * %i)^2)@(Polynomial Complex Integer)" />
</form>
<span id="commSav2-118" class="commSav" >((x + y * %i)^2)@(Polynomial Complex Integer)</span>
<div id="mathAns2-118" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>2</mn><mo></mo><mi>i</mi><mo></mo><mi>x</mi><mo></mo><mi>y</mi></mrow><mo>+</mo><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Complex Integer
</div>



<p>What do you think might happen if we left off all target type and
package call information in this last example?
</p>



<div id="spadComm2-119" class="spadComm" >
<form id="formComm2-119" action="javascript:makeRequest('2-119');" >
<input id="comm2-119" type="text" class="command" style="width: 11em;" value="(x + y * %i)^2" />
</form>
<span id="commSav2-119" class="commSav" >(x + y * %i)^2</span>
<div id="mathAns2-119" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>2</mn><mo></mo><mi>i</mi><mo></mo><mi>x</mi><mo></mo><mi>y</mi></mrow><mo>+</mo><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Complex Integer
</div>



<p>We can convert it to <span class="teletype">Complex</span> as an afterthought.  But this is
more work than just saying making what we want in the first place.
</p>



<div id="spadComm2-120" class="spadComm" >
<form id="formComm2-120" action="javascript:makeRequest('2-120');" >
<input id="comm2-120" type="text" class="command" style="width: 10em;" value="% :: Complex ?" />
</form>
<span id="commSav2-120" class="commSav" >% :: Complex ?</span>
<div id="mathAns2-120" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>2</mn><mo></mo><mi>x</mi><mo></mo><mi>y</mi><mo></mo><mi>i</mi></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Complex Polynomial Integer
</div>



<p>Finally, another use of package calling is to qualify fully an
operation that is passed as an argument to a function.
</p>


<p>Start with a small matrix of integers.
</p>



<div id="spadComm2-121" class="spadComm" >
<form id="formComm2-121" action="javascript:makeRequest('2-121');" >
<input id="comm2-121" type="text" class="command" style="width: 19em;" value="h := matrix [ [8,6],[-4,9] ]" />
</form>
<span id="commSav2-121" class="commSav" >h := matrix [ [8,6],[-4,9] ]</span>
<div id="mathAns2-121" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mtable><mtr><mtd><mn>8</mn></mtd><mtd><mn>6</mn></mtd></mtr><mtr><mtd><mo>-</mo><mn>4</mn></mtd><mtd><mn>9</mn></mtd></mtr></mtable><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Matrix Integer
</div>



<p>We want to produce a new matrix that has for entries the
multiplicative inverses of the entries of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>h</mi></mstyle></math>.  One way to do this is
by calling <span class="spadfunFrom" style="font-weight: bold;">map</span><span class="index">map</span><a name="chapter-2-55"/><span class="index">MatrixCategoryFunctions2</span><a name="chapter-2-56"/> with the
<span class="spadfunFrom" style="font-weight: bold;">inv</span><span class="index">inv</span><a name="chapter-2-57"/><span class="index">Fraction</span><a name="chapter-2-58"/> function from <span class="teletype">Fraction (Integer)</span>.
</p>




<div id="spadComm2-122" class="spadComm" >
<form id="formComm2-122" action="javascript:makeRequest('2-122');" >
<input id="comm2-122" type="text" class="command" style="width: 20em;" value="map(inv $Fraction(Integer),h)" />
</form>
<span id="commSav2-122" class="commSav" >map(inv $Fraction(Integer),h)</span>
<div id="mathAns2-122" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mtable><mtr><mtd><mfrac><mn>1</mn><mn>8</mn></mfrac></mtd><mtd><mfrac><mn>1</mn><mn>6</mn></mfrac></mtd></mtr><mtr><mtd><mo>-</mo><mfrac><mn>1</mn><mn>4</mn></mfrac></mtd><mtd><mfrac><mn>1</mn><mn>9</mn></mfrac></mtd></mtr></mtable><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Matrix Fraction Integer
</div>



<p>We could have been a bit less verbose and used abbreviations.
</p>



<div id="spadComm2-123" class="spadComm" >
<form id="formComm2-123" action="javascript:makeRequest('2-123');" >
<input id="comm2-123" type="text" class="command" style="width: 14em;" value="map(inv $FRAC(INT),h)" />
</form>
<span id="commSav2-123" class="commSav" >map(inv $FRAC(INT),h)</span>
<div id="mathAns2-123" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mtable><mtr><mtd><mfrac><mn>1</mn><mn>8</mn></mfrac></mtd><mtd><mfrac><mn>1</mn><mn>6</mn></mfrac></mtd></mtr><mtr><mtd><mo>-</mo><mfrac><mn>1</mn><mn>4</mn></mfrac></mtd><mtd><mfrac><mn>1</mn><mn>9</mn></mfrac></mtd></mtr></mtable><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Matrix Fraction Integer
</div>



<p>As it turns out, FriCAS is smart enough to know what we mean anyway.
We can just say this.
</p>



<div id="spadComm2-124" class="spadComm" >
<form id="formComm2-124" action="javascript:makeRequest('2-124');" >
<input id="comm2-124" type="text" class="command" style="width: 7em;" value="map(inv,h)" />
</form>
<span id="commSav2-124" class="commSav" >map(inv,h)</span>
<div id="mathAns2-124" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mtable><mtr><mtd><mfrac><mn>1</mn><mn>8</mn></mfrac></mtd><mtd><mfrac><mn>1</mn><mn>6</mn></mfrac></mtd></mtr><mtr><mtd><mo>-</mo><mfrac><mn>1</mn><mn>4</mn></mfrac></mtd><mtd><mfrac><mn>1</mn><mn>9</mn></mfrac></mtd></mtr></mtable><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Matrix Fraction Integer
</div>





</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-2.8.xhtml" style="margin-right: 10px;">Previous Section 2.8 Subdomains Again</a><a href="section-2.10.xhtml" style="margin-right: 10px;">Next Section 2.10 Resolving Types</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>