<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section6.1</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-6.0.xhtml" style="margin-right: 10px;">Previous Section 6.0 Functions, Macros and Rules</a><a href="section-6.2.xhtml" style="margin-right: 10px;">Next Section 6.2 Macros</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-6.1">
<h2 class="sectiontitle">6.1  Functions vs. Macros</h2>


<a name="ugUserFunMac" class="label"/>


<p>A function is a program to perform some <span class="index">function:vs. macro</span><a name="chapter-6-0"/>
computation.  <span class="index">macro:vs. function</span><a name="chapter-6-1"/> Most functions have names so
that it is easy to refer to them.  A simple example of a function is
one named <span class="spadfunFrom" >abs</span><span class="index">abs</span><a name="chapter-6-2"/><span class="index">Integer</span><a name="chapter-6-3"/> which computes the absolute value
of an integer.
</p>


<p>This is a use of the <span class="italic">absolute value</span> library function for integers.
</p>



<div id="spadComm6-1" class="spadComm" >
<form id="formComm6-1" action="javascript:makeRequest('6-1');" >
<input id="comm6-1" type="text" class="command" style="width: 5em;" value="abs(-8)" />
</form>
<span id="commSav6-1" class="commSav" >abs(-8)</span>
<div id="mathAns6-1" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>8</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>This is an unnamed function that does the same thing, using the
<span class="italic">maps-to</span> syntax <span class="teletype">+-></span> that we discuss in 
section <a href="section-6.17.xhtml#ugUserAnon" class="ref" >ugUserAnon</a> .
</p>



<div id="spadComm6-2" class="spadComm" >
<form id="formComm6-2" action="javascript:makeRequest('6-2');" >
<input id="comm6-2" type="text" class="command" style="width: 24em;" value="(x +-> if x &lt; 0 then -x else x)(-8)" />
</form>
<span id="commSav6-2" class="commSav" >(x +-> if x &lt; 0 then -x else x)(-8)</span>
<div id="mathAns6-2" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>8</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Functions can be used alone or serve as the building blocks for larger
programs.  Usually they return a value that you might want to use in
the next stage of a computation, but not always (for example, see
<a href="chapter-9.13-26.xhtml#ExitXmpPage" class="ref" >ExitXmpPage</a>  and <a href="section-9.86.xhtml#VoidXmpPage" class="ref" >VoidXmpPage</a>
).  They may also read data from your
keyboard, move information from one place to another, or format and
display results on your screen.
</p>


<p>In FriCAS, as in mathematics, functions <span class="index">function:parameters</span><a name="chapter-6-4"/> are
usually parameterized.  Each time you <span class="italic">call</span> (some people say 
<span class="italic">apply</span> or invoke) a function, you give <span class="index">parameters to a
function</span><a name="chapter-6-5"/> values to the parameters (variables).  Such a value is
called an <span class="italic">argument</span> of <span class="index">function:arguments</span><a name="chapter-6-6"/> the function.
FriCAS uses the arguments for the computation.  In this way you get
different results depending on what you <span class="italic">feed</span> the function.
</p>


<p>Functions can have local variables or refer to global variables in the
workspace.  FriCAS can often compile functions so that they execute
very efficiently.  Functions can be passed as arguments to other
functions.
</p>


<p>Macros are textual substitutions.  They are used to clarify the
meaning of constants or expressions and to be templates for frequently
used expressions.  Macros can be parameterized but they are not
objects that can be passed as arguments to functions.  In effect,
macros are extensions to the FriCAS expression parser.
</p>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-6.0.xhtml" style="margin-right: 10px;">Previous Section 6.0 Functions, Macros and Rules</a><a href="section-6.2.xhtml" style="margin-right: 10px;">Next Section 6.2 Macros</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>