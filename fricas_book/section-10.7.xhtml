<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section10.7</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-10.6.xhtml" style="margin-right: 10px;">Previous Section 10.6 Diversion: When Things Go Wrong</a><a href="section-10.8.xhtml" style="margin-right: 10px;">Next Section 10.8 Drawing Complex Functions</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-10.7">
<h2 class="sectiontitle">10.7  Drawing Complex Vector Fields</h2>


<a name="ugIntProgVecFields" class="label"/>


<p>We now put our arrows to good use drawing complex vector fields.
These vector fields give a representation of complex-valued
functions of complex variables.
Consider a Cartesian coordinate grid of points  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo>)</mo></mrow></mstyle></math> in
the plane, and some complex-valued function  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math> defined on
this grid.
At every point on this grid, compute the value of  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>+</mo><mi>iy</mi><mo>)</mo></mrow></mstyle></math> and call it  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>z</mi></mstyle></math>.
Since  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>z</mi></mstyle></math> has both a real and imaginary value for a given
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo>)</mo></mrow></mstyle></math> grid point, there are four dimensions to plot.
What do we do?
We represent the values of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>z</mi></mstyle></math> by arrows planted at each
grid point.
Each arrow represents the value of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>z</mi></mstyle></math> in polar coordinates
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mi>r</mi><mo>,</mo><mi>&#x03B8;</mi><mo>)</mo></mrow></mstyle></math>.
The length of the arrow is proportional to  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>r</mi></mstyle></math>.
Its direction is given by  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03B8;</mi></mstyle></math>.
</p>


<p>The code for drawing vector fields is in the file <span style="font-weight: bold;"> vectors.input</span>.
We discuss its contents from top to bottom.
</p>


<p>Before showing you the code, we have two small
matters to take care of.
First, what if the function has large spikes, say, ones that go off
to infinity?
We define a variable  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>clipValue</mi></mstyle></math> for this purpose. When
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>r</mi></mstyle></math> exceeds the value of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>clipValue</mi></mstyle></math>, then the value of
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>clipValue</mi></mstyle></math> is used instead of that for  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>r</mi></mstyle></math>.
For convenience, we define a function  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>clipFun</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mstyle></math> which uses
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>clipValue</mi></mstyle></math> to <span class="italic">clip</span> the value of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math>.
</p>





<div class="verbatim"><br />
clipValue&nbsp;:&nbsp;DFLOAT&nbsp;:=&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Maximum&nbsp;value&nbsp;allowed<br />
clipFun(x)&nbsp;==&nbsp;min(max(x,-clipValue),clipValue)<br />
</div>



<p>Notice that we identify  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>clipValue</mi></mstyle></math> as a small float but do
not declare the type of the function <span style="font-weight: bold;"> clipFun</span>.
As it turns out, <span style="font-weight: bold;"> clipFun</span> is called with a
small float value.
This declaration ensures that <span style="font-weight: bold;"> clipFun</span> never does a
conversion when it is called.
</p>


<p>The second matter concerns the possible <span class="italic">poles</span> of a
function, the actual points where the spikes have infinite
values.
FriCAS uses normal <span class="teletype">DoubleFloat</span> arithmetic  which
does not directly handle infinite values.
If your function has poles, you must adjust your step size to
avoid landing directly on them (FriCAS calls <span style="font-weight: bold;"> error</span>
when asked to divide a value by  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>0</mn></mstyle></math>, for example).
</p>


<p>We set the variables  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>realSteps</mi></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>imagSteps</mi></mstyle></math> to
hold the number of steps taken in the real and imaginary
directions, respectively.
Most examples will have ranges centered around the origin.
To avoid a pole at the origin, the number of points is taken
to be odd.
</p>




<div class="verbatim"><br />
realSteps:&nbsp;INT&nbsp;:=&nbsp;25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Number&nbsp;of&nbsp;real&nbsp;steps<br />
imagSteps:&nbsp;INT&nbsp;:=&nbsp;25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Number&nbsp;of&nbsp;imaginary&nbsp;steps<br />
)read&nbsp;arrows<br />
</div>



<p>Now define the function <span style="font-weight: bold;"> drawComplexVectorField</span> to draw the arrows.
It is good practice to declare the type of the main function in
the file.
This one declaration is usually sufficient to ensure that other
lower-level functions are compiled with the correct types.
</p>




<div class="verbatim"><br />
C&nbsp;:=&nbsp;Complex&nbsp;DoubleFloat<br />
S&nbsp;:=&nbsp;Segment&nbsp;DoubleFloat<br />
drawComplexVectorField:&nbsp;(C&nbsp;-&gt;&nbsp;C,&nbsp;S,&nbsp;S)&nbsp;-&gt;&nbsp;VIEW3D<br />
</div>



<p>The first argument is a function mapping complex small floats into
complex small floats.
The second and third arguments give the range of real and
imaginary values as segments like  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>a</mi><mo>.</mo><mo>.</mo><mi>b</mi></mrow></mstyle></math>.
The result is a three-dimensional viewport.
Here is the full function definition:
</p>




<div class="verbatim"><br />
drawComplexVectorField(f,&nbsp;realRange,imagRange)&nbsp;==<br />
&nbsp;&nbsp;delReal&nbsp;:=&nbsp;(hi(realRange)-lo(realRange))/realSteps&nbsp;The&nbsp;real&nbsp;step&nbsp;size<br />
&nbsp;&nbsp;delImag&nbsp;:=&nbsp;(hi(imagRange)-lo(imagRange))/imagSteps&nbsp;The&nbsp;imaginary&nbsp;step&nbsp;size<br />
&nbsp;&nbsp;sp&nbsp;:=&nbsp;createThreeSpace()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create&nbsp;empty&nbsp;space&nbsp;$sp$<br />
&nbsp;&nbsp;real&nbsp;:=&nbsp;lo(realRange)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;initial&nbsp;real&nbsp;value<br />
&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;1..realSteps+1&nbsp;repeat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Begin&nbsp;real&nbsp;iteration<br />
&nbsp;&nbsp;&nbsp;&nbsp;imag&nbsp;:=&nbsp;lo(imagRange)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initial&nbsp;imaginary&nbsp;value<br />
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;j&nbsp;in&nbsp;1..imagSteps+1&nbsp;repeat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Begin&nbsp;imaginary&nbsp;iteration<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;:=&nbsp;f&nbsp;complex(real,imag)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value&nbsp;of&nbsp;$f$&nbsp;at&nbsp;the&nbsp;point<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg&nbsp;:=&nbsp;argument&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;direction&nbsp;of&nbsp;the&nbsp;arrow<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len&nbsp;:=&nbsp;clipFun&nbsp;sqrt&nbsp;norm&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length&nbsp;of&nbsp;the&nbsp;arrow<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1&nbsp;:=&nbsp;&nbsp;point&nbsp;[real,&nbsp;imag,&nbsp;0.0@DFLOAT,&nbsp;arg]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;base&nbsp;point&nbsp;of&nbsp;the&nbsp;arrow<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scaleLen&nbsp;:=&nbsp;delReal&nbsp;*&nbsp;len&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scaled&nbsp;length&nbsp;of&nbsp;the&nbsp;arrow<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p2&nbsp;:=&nbsp;point&nbsp;[p1.1&nbsp;+&nbsp;scaleLen*cos(arg),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tip&nbsp;point&nbsp;of&nbsp;the&nbsp;arrow<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.2&nbsp;+&nbsp;scaleLen*sin(arg),0.0@DFLOAT,&nbsp;arg]<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrow&nbsp;:=&nbsp;makeArrow(p1,&nbsp;p2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create&nbsp;the&nbsp;arrow<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;a&nbsp;in&nbsp;arrow&nbsp;repeat&nbsp;curve(sp,&nbsp;a)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add&nbsp;arrow&nbsp;to&nbsp;space&nbsp;$sp$<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imag&nbsp;:=&nbsp;imag&nbsp;+&nbsp;delImag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;next&nbsp;imaginary&nbsp;value<br />
&nbsp;&nbsp;&nbsp;&nbsp;real&nbsp;:=&nbsp;real&nbsp;+&nbsp;delReal&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;next&nbsp;real&nbsp;value<br />
&nbsp;&nbsp;makeViewport3D(sp,&nbsp;"Complex&nbsp;Vector&nbsp;Field")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Draw&nbsp;it<br />
</div>



<p>As a first example, let us draw  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>f</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo>=</mo><mo>=</mo><mi>sin</mi><mo>(</mo><mi>z</mi><mo>)</mo></mrow></mstyle></math>.
There is no need to create a user function: just pass the
<span class="spadfunFrom" >sin</span><span class="index">sin</span><a name="chapter-10-5"/><span class="index">Complex DoubleFloat</span><a name="chapter-10-6"/> from <span class="teletype">Complex DoubleFloat</span>.
</p>


<p>Read the file.
</p>




<div id="spadComm10-17" class="spadComm" >
<form id="formComm10-17" action="javascript:makeRequest('10-17');" >
<input id="comm10-17" type="text" class="command" style="width: 10em;" value=")read vectors " />
</form>
<span id="commSav10-17" class="commSav" >)read vectors </span>
<div id="mathAns10-17" ></div>
</div>



<p>Draw the complex vector field of  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mstyle></math>.
</p>




<div class="spadgraph" style="width: 20em">
drawComplexVectorField(sin,-2..2,-2..2) 
</div>



<div class="image">
<img src="ps/vectorSin.png" alt="picture" />
</div>



</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-10.6.xhtml" style="margin-right: 10px;">Previous Section 10.6 Diversion: When Things Go Wrong</a><a href="section-10.8.xhtml" style="margin-right: 10px;">Next Section 10.8 Drawing Complex Functions</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>