<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section5.4</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-5.3.xhtml" style="margin-right: 10px;">Previous Section 5.3 if-then-else</a><a href="section-5.5.xhtml" style="margin-right: 10px;">Next Section 5.5 Creating Lists and Streams with Iterators</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-5.4">
<h2 class="sectiontitle">5.4  Loops</h2>


<a name="ugLangLoops" class="label"/>


<p>A <span class="italic">loop</span> is an expression that contains another expression,
<span class="index">loop</span><a name="chapter-5-25"/> called the <span class="italic">loop body</span>, which is to be evaluated zero
or more <span class="index">loop:body</span><a name="chapter-5-26"/> times.  All loops contain the <span class="teletype">repeat</span>
keyword and return the unique value of <span class="teletype">Void</span>.  Loops can contain
inner loops to any depth.
</p>




<div class="boxed2">


<div class="boxed">



<p>The most basic loop is of the form
</p>



<div class="center" style="text-align: center;">


<p><span class="teletype">repeat&nbsp;</span><span class="italic">loopBody</span>
</p>



</div>



<p>Unless <span class="italic">loopBody</span> contains a <span class="teletype">break</span> or <span class="teletype">return</span> expression, the
loop repeats forever.  The value returned by the loop is the unique
value of <span class="teletype">Void</span>.<br/>
</p>



</div>
</div>




<a name="subsec-5.4.1"/>
<div class="subsection"  id="subsec-5.4.1">
<h3 class="subsectitle">5.4.1  Compiling vs. Interpreting Loops</h3>


<a name="ugLangLoopsCompInt" class="label"/>


<p>FriCAS tries to determine completely the type of every object in a loop
and then to translate the loop body to LISP or even to machine code.
This translation is called compilation.
</p>


<p>If FriCAS decides that it cannot compile the loop, it issues a
<span class="index">loop:compilation</span><a name="chapter-5-27"/> message stating the problem and then the
following message:
</p>



<div class="center" style="text-align: center;">


<p><span style="font-weight: bold;">We will attempt to step through and interpret the code.</span>
</p>



</div>



<p>It is still possible that FriCAS can evaluate the loop but in <span class="italic">interpret-code mode</span>.  See section <a href="section-6.10.xhtml#ugUserCompInt" class="ref" >ugUserCompInt</a>  where this is discussed in terms
<span class="index">panic:avoiding</span><a name="chapter-5-28"/> of compiling versus interpreting functions.
</p>




</div>



<a name="subsec-5.4.2"/>
<div class="subsection"  id="subsec-5.4.2">
<h3 class="subsectitle">5.4.2  return in Loops</h3>


<a name="ugLangLoopsReturn" class="label"/>


<p>A <span class="teletype">return</span> expression is used to exit a function with
<span class="index">loop:leaving via return</span><a name="chapter-5-29"/> a particular value.  In particular, if
a <span class="teletype">return</span> is in a loop within the <span class="index">return</span><a name="chapter-5-30"/> function, the loop
is terminated whenever the <span class="teletype">return</span> is evaluated.
</p>


<p><!-- This is a bug! The compiler should never accept allow
 Void to be the return type of a function when it has to use
 resolve to determine it. -->
</p>


<p>Suppose we start with this.
</p>



<div class="verbatim"><br />
f()&nbsp;==<br />
&nbsp;&nbsp;i&nbsp;:=&nbsp;1<br />
&nbsp;&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;factorial(i)&nbsp;&gt;&nbsp;1000&nbsp;then&nbsp;return&nbsp;i<br />
&nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;:=&nbsp;i&nbsp;+&nbsp;1<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>When <span class="teletype">factorial(i)</span> is big enough, control passes from inside the loop
all the way outside the function, returning the value of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math> (or so we
think).
</p>



<div id="spadComm5-21" class="spadComm" >
<form id="formComm5-21" action="javascript:makeRequest('5-21');" >
<input id="comm5-21" type="text" class="command" style="width: 2em;" value="f()" />
</form>
<span id="commSav5-21" class="commSav" >f()</span>
<div id="mathAns5-21" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>What went wrong?  Isn't it obvious that this function should return an
integer?  Well, FriCAS makes no attempt to analyze the structure of a
loop to determine if it always returns a value because, in general,
this is impossible.  So FriCAS has this simple rule: the type of the
function is determined by the type of its body, in this case a block.
The normal value of a block is the value of its last expression, in
this case, a loop.  And the value of every loop is the unique value of
<span class="teletype">Void</span>.!  So the return type of <span style="font-weight: bold;">f</span> is <span class="teletype">Void</span>.
</p>


<p>There are two ways to fix this.  The best way is for you to tell FriCAS
what the return type of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math> is.  You do this by giving  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math> a
declaration <span class="teletype">f:()->Integer</span> prior to calling for its value.  This
tells FriCAS: <span class="italic">trust me---an integer is returned.</span>  We'll explain
more about this in the next chapter.  Another clumsy way is to add a
dummy expression as follows.
</p>


<p>Since we want an integer, let's stick in a dummy final expression that is
an integer and will never be evaluated.
</p>



<div class="verbatim"><br />
f()&nbsp;==<br />
&nbsp;&nbsp;i&nbsp;:=&nbsp;1<br />
&nbsp;&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;factorial(i)&nbsp;&gt;&nbsp;1000&nbsp;then&nbsp;return&nbsp;i<br />
&nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;:=&nbsp;i&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;0<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>When we try <span style="font-weight: bold;">f</span> again we get what we wanted.  See
<a href="section-6.15.xhtml#ugUserBlocks" class="ref" >ugUserBlocks</a>  for more information.
</p>




<div id="spadComm5-22" class="spadComm" >
<form id="formComm5-22" action="javascript:makeRequest('5-22');" >
<input id="comm5-22" type="text" class="command" style="width: 2em;" value="f()" />
</form>
<span id="commSav5-22" class="commSav" >f()</span>
<div id="mathAns5-22" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;f&nbsp;with&nbsp;type&nbsp;()&nbsp;-&gt;&nbsp;NonNegativeInteger&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>7</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





</div>



<a name="subsec-5.4.3"/>
<div class="subsection"  id="subsec-5.4.3">
<h3 class="subsectitle">5.4.3  break in Loops</h3>


<a name="ugLangLoopsBreak" class="label"/>


<p>The <span class="teletype">break</span> keyword is often more useful <span class="index">break</span><a name="chapter-5-31"/> in terminating
<span class="index">loop:leaving via break</span><a name="chapter-5-32"/> a loop.  A <span class="teletype">break</span> causes control to
transfer to the expression immediately following the loop.  As loops
always return the unique value of <span class="teletype">Void</span>., you cannot return a
value with <span class="teletype">break</span>.  That is, <span class="teletype">break</span> takes no argument.
</p>


<p>This example is a modification of the last example in the previous
section <a href="section-5.4.xhtml#ugLangLoopsReturn" class="ref" >ugLangLoopsReturn</a> .
Instead of using <span class="teletype">return</span>, we'll use <span class="teletype">break</span>.
</p>




<div class="verbatim"><br />
f()&nbsp;==<br />
&nbsp;&nbsp;i&nbsp;:=&nbsp;1<br />
&nbsp;&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;factorial(i)&nbsp;&gt;&nbsp;1000&nbsp;then&nbsp;break<br />
&nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;:=&nbsp;i&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;i<br />
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiled&nbsp;code&nbsp;for&nbsp;f&nbsp;has&nbsp;been&nbsp;cleared.<br />
&nbsp;&nbsp;&nbsp;1&nbsp;old&nbsp;definition(s)&nbsp;deleted&nbsp;for&nbsp;function&nbsp;or&nbsp;rule&nbsp;f&nbsp;<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>The loop terminates when <span class="teletype">factorial(i)</span> gets big enough, the last line
of the function evaluates to the corresponding <span class="italic">good</span> value of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math>,
and the function terminates, returning that value.
</p>




<div id="spadComm5-23" class="spadComm" >
<form id="formComm5-23" action="javascript:makeRequest('5-23');" >
<input id="comm5-23" type="text" class="command" style="width: 2em;" value="f()" />
</form>
<span id="commSav5-23" class="commSav" >f()</span>
<div id="mathAns5-23" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;f&nbsp;with&nbsp;type&nbsp;()&nbsp;-&gt;&nbsp;PositiveInteger&nbsp;<br />
<br />
+++&nbsp;|*0;f;1;G82322|&nbsp;redefined<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>7</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>You can only use <span class="teletype">break</span> to terminate the evaluation of one loop.
Let's consider a loop within a loop, that is, a loop with a nested
loop.  First, we initialize two counter variables.
</p>




<div id="spadComm5-24" class="spadComm" >
<form id="formComm5-24" action="javascript:makeRequest('5-24');" >
<input id="comm5-24" type="text" class="command" style="width: 10em;" value="(i,j) := (1, 1)" />
</form>
<span id="commSav5-24" class="commSav" >(i,j) := (1, 1)</span>
<div id="mathAns5-24" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Nested loops must have multiple <span class="teletype">break</span> <span class="index">loop:nested</span><a name="chapter-5-33"/>
expressions at the appropriate nesting level.  How would you rewrite
this so <span class="teletype">(i + j) > 10</span> is only evaluated once?
</p>



<div class="verbatim"><br />
repeat<br />
&nbsp;&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;+&nbsp;j)&nbsp;&gt;&nbsp;10&nbsp;then&nbsp;break<br />
&nbsp;&nbsp;&nbsp;&nbsp;j&nbsp;:=&nbsp;j&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;if&nbsp;(i&nbsp;+&nbsp;j)&nbsp;&gt;&nbsp;10&nbsp;then&nbsp;break<br />
&nbsp;&nbsp;i&nbsp;:=&nbsp;i&nbsp;+&nbsp;1<br />
</div>




<div class="returnType">
Type: Void
</div>





</div>



<a name="subsec-5.4.4"/>
<div class="subsection"  id="subsec-5.4.4">
<h3 class="subsectitle">5.4.4  break vs. <span class="teletype">=></span> in Loop Bodies</h3>


<a name="ugLangLoopsBreakVs" class="label"/>


<p>Compare the following two loops:
</p>



<div class="verbatim"><br />
i&nbsp;:=&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;:=&nbsp;1<br />
repeat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repeat<br />
&nbsp;&nbsp;i&nbsp;:=&nbsp;i&nbsp;+&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;:=&nbsp;i&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;i&nbsp;&gt;&nbsp;3&nbsp;=&gt;&nbsp;i&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;i&nbsp;&gt;&nbsp;3&nbsp;then&nbsp;break<br />
&nbsp;&nbsp;output(i)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output(i)<br />
</div>



<p>In the example on the left, the values  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>2</mn></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>3</mn></mstyle></math> for  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math> are
displayed but then the <span class="italic"><span class="teletype">=></span></span> does not allow control to reach the
call to <span class="spadfunFrom" >output</span><span class="index">output</span><a name="chapter-5-34"/><span class="index">OutputForm</span><a name="chapter-5-35"/> again.  The loop will not
terminate until you run out of space or interrupt the execution.  The
variable  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math> will continue to be incremented because the <span class="italic"><span class="teletype">=></span></span> only
means to leave the <span class="italic">block</span>, not the loop.
</p>


<p>In the example on the right, upon reaching  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>4</mn></mstyle></math>, the <span class="teletype">break</span> will be
executed, and both the block and the loop will terminate.  This is one
of the reasons why both <span class="italic"><span class="teletype">=></span></span> and <span class="teletype">break</span> are provided.  Using a
<span class="teletype">while</span> clause (see below) with the <span class="italic"><span class="teletype">=></span></span> <span class="index">while</span><a name="chapter-5-36"/> lets you
simulate the action of <span class="teletype">break</span>.
</p>




</div>



<a name="subsec-5.4.5"/>
<div class="subsection"  id="subsec-5.4.5">
<h3 class="subsectitle">5.4.5  More Examples of break</h3>


<a name="ugLangLoopsBreakMore" class="label"/>


<p>Here we give four examples of <span class="teletype">repeat</span> loops that terminate when a
value exceeds a given bound.
</p>


<p>First, initialize  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math> as the loop counter.
</p>



<div id="spadComm5-25" class="spadComm" >
<form id="formComm5-25" action="javascript:makeRequest('5-25');" >
<input id="comm5-25" type="text" class="command" style="width: 4em;" value="i := 0" />
</form>
<span id="commSav5-25" class="commSav" >i := 0</span>
<div id="mathAns5-25" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>0</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: NonNegativeInteger
</div>



<p>Here is the first loop.  When the square of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math> exceeds  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>100</mn></mstyle></math>, the
loop terminates.
</p>



<div class="verbatim"><br />
repeat<br />
&nbsp;&nbsp;i&nbsp;:=&nbsp;i&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;if&nbsp;i^2&nbsp;&gt;&nbsp;100&nbsp;then&nbsp;break<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Upon completion,  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math> should have the value  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>11</mn></mstyle></math>.
</p>



<div id="spadComm5-26" class="spadComm" >
<form id="formComm5-26" action="javascript:makeRequest('5-26');" >
<input id="comm5-26" type="text" class="command" style="width: 1em;" value="i" />
</form>
<span id="commSav5-26" class="commSav" >i</span>
<div id="mathAns5-26" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>11</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: NonNegativeInteger
</div>



<p>Do the same thing except use <span class="italic"><span class="teletype">=></span></span> instead an <span class="teletype">if-then</span> expression.
</p>




<div id="spadComm5-27" class="spadComm" >
<form id="formComm5-27" action="javascript:makeRequest('5-27');" >
<input id="comm5-27" type="text" class="command" style="width: 4em;" value="i := 0" />
</form>
<span id="commSav5-27" class="commSav" >i := 0</span>
<div id="mathAns5-27" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>0</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: NonNegativeInteger
</div>





<div class="verbatim"><br />
repeat<br />
&nbsp;&nbsp;i&nbsp;:=&nbsp;i&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;i^2&nbsp;&gt;&nbsp;100&nbsp;=&gt;&nbsp;break<br />
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm5-28" class="spadComm" >
<form id="formComm5-28" action="javascript:makeRequest('5-28');" >
<input id="comm5-28" type="text" class="command" style="width: 1em;" value="i" />
</form>
<span id="commSav5-28" class="commSav" >i</span>
<div id="mathAns5-28" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>11</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: NonNegativeInteger
</div>



<p>As a third example, we use a simple loop to compute  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>!</mo></mrow></mstyle></math>.
</p>



<div id="spadComm5-29" class="spadComm" >
<form id="formComm5-29" action="javascript:makeRequest('5-29');" >
<input id="comm5-29" type="text" class="command" style="width: 16em;" value="(n, i, f) := (100, 1, 1)" />
</form>
<span id="commSav5-29" class="commSav" >(n, i, f) := (100, 1, 1)</span>
<div id="mathAns5-29" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Use  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math> as the iteration variable and  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math> to compute the factorial.
</p>



<div class="verbatim"><br />
repeat<br />
&nbsp;&nbsp;if&nbsp;i&nbsp;&gt;&nbsp;n&nbsp;then&nbsp;break<br />
&nbsp;&nbsp;f&nbsp;:=&nbsp;f&nbsp;*&nbsp;i<br />
&nbsp;&nbsp;i&nbsp;:=&nbsp;i&nbsp;+&nbsp;1<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Look at the value of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math>.
</p>



<div id="spadComm5-30" class="spadComm" >
<form id="formComm5-30" action="javascript:makeRequest('5-30');" >
<input id="comm5-30" type="text" class="command" style="width: 1em;" value="f" />
</form>
<span id="commSav5-30" class="commSav" >f</span>
<div id="mathAns5-30" ></div>
</div>




<div class="verbatim"><br />
&nbsp;93326215443944152681699238856266700490715968264381621468_<br />
&nbsp;59296389521759999322991560894146397615651828625369792082_<br />
&nbsp;7223758251185210916864000000000000000000000000<br />
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Finally, we show an example of nested loops.  First define a four by
four matrix.
</p>



<div id="spadComm5-31" class="spadComm" >
<form id="formComm5-31" action="javascript:makeRequest('5-31');" >
<input id="comm5-31" type="text" class="command" style="width: 50em;" value="m := matrix [ [21,37,53,14], [8,-24,22,-16], [2,10,15,14], [26,33,55,-13] ]" />
</form>
<span id="commSav5-31" class="commSav" >m := matrix [ [21,37,53,14], [8,-24,22,-16], [2,10,15,14], [26,33,55,-13] ]</span>
<div id="mathAns5-31" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mtable><mtr><mtd><mn>21</mn></mtd><mtd><mn>37</mn></mtd><mtd><mn>53</mn></mtd><mtd><mn>14</mn></mtd></mtr><mtr><mtd><mn>8</mn></mtd><mtd><mo>-</mo><mn>24</mn></mtd><mtd><mn>22</mn></mtd><mtd><mo>-</mo><mn>16</mn></mtd></mtr><mtr><mtd><mn>2</mn></mtd><mtd><mn>10</mn></mtd><mtd><mn>15</mn></mtd><mtd><mn>14</mn></mtd></mtr><mtr><mtd><mn>26</mn></mtd><mtd><mn>33</mn></mtd><mtd><mn>55</mn></mtd><mtd><mo>-</mo><mn>13</mn></mtd></mtr></mtable><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Matrix Integer
</div>



<p>Next, set row counter  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>r</mi></mstyle></math> and column counter  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>c</mi></mstyle></math> to  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math>.  Note: if we
were writing a function, these would all be local variables rather
than global workspace variables.
</p>



<div id="spadComm5-32" class="spadComm" >
<form id="formComm5-32" action="javascript:makeRequest('5-32');" >
<input id="comm5-32" type="text" class="command" style="width: 11em;" value="(r, c) := (1, 1)" />
</form>
<span id="commSav5-32" class="commSav" >(r, c) := (1, 1)</span>
<div id="mathAns5-32" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Also, let <span class="teletype">lastrow</span> and <span class="teletype">lastcol</span> be the final row and column index.
</p>




<div id="spadComm5-33" class="spadComm" >
<form id="formComm5-33" action="javascript:makeRequest('5-33');" >
<input id="comm5-33" type="text" class="command" style="width: 28em;" value="(lastrow, lastcol) := (nrows(m), ncols(m))" />
</form>
<span id="commSav5-33" class="commSav" >(lastrow, lastcol) := (nrows(m), ncols(m))</span>
<div id="mathAns5-33" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>4</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Scan the rows looking for the first negative element.  We remark that
you can reformulate this example in a better, more concise form by
using a <span class="teletype">for</span> clause with <span class="teletype">repeat</span>.  See
<a href="section-5.4.xhtml#ugLangLoopsForIn" class="ref" >ugLangLoopsForIn</a>  for more
information.
</p>




<div class="verbatim"><br />
repeat<br />
&nbsp;&nbsp;if&nbsp;r&nbsp;&gt;&nbsp;lastrow&nbsp;then&nbsp;break<br />
&nbsp;&nbsp;c&nbsp;:=&nbsp;1<br />
&nbsp;&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;c&nbsp;&gt;&nbsp;lastcol&nbsp;then&nbsp;break<br />
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;elt(m,r,c)&nbsp;&lt;&nbsp;0&nbsp;then<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output&nbsp;[r,&nbsp;c,&nbsp;elt(m,r,c)]<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;:=&nbsp;lastrow<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;don't&nbsp;look&nbsp;any&nbsp;further<br />
&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;:=&nbsp;c&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;r&nbsp;:=&nbsp;r&nbsp;+&nbsp;1<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;[2,2,-&nbsp;24]<br />
</div>




<div class="returnType">
Type: Void
</div>





</div>



<a name="subsec-5.4.6"/>
<div class="subsection"  id="subsec-5.4.6">
<h3 class="subsectitle">5.4.6  iterate in Loops</h3>


<a name="ugLangLoopsIterate" class="label"/>


<p>FriCAS provides an <span class="teletype">iterate</span> expression that <span class="index">iterate</span><a name="chapter-5-37"/> skips over
the remainder of a loop body and starts the next loop iteration.
</p>


<p>We first initialize a counter.
</p>




<div id="spadComm5-34" class="spadComm" >
<form id="formComm5-34" action="javascript:makeRequest('5-34');" >
<input id="comm5-34" type="text" class="command" style="width: 4em;" value="i := 0" />
</form>
<span id="commSav5-34" class="commSav" >i := 0</span>
<div id="mathAns5-34" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>0</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: NonNegativeInteger
</div>



<p>Display the even integers from  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>2</mn></mstyle></math> to  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>5</mn></mstyle></math>.
</p>



<div class="verbatim"><br />
repeat<br />
&nbsp;&nbsp;i&nbsp;:=&nbsp;i&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;if&nbsp;i&nbsp;&gt;&nbsp;5&nbsp;then&nbsp;break<br />
&nbsp;&nbsp;if&nbsp;odd?(i)&nbsp;then&nbsp;iterate<br />
&nbsp;&nbsp;output(i)<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;2<br />
&nbsp;&nbsp;&nbsp;4<br />
</div>




<div class="returnType">
Type: Void
</div>





</div>



<a name="subsec-5.4.7"/>
<div class="subsection"  id="subsec-5.4.7">
<h3 class="subsectitle">5.4.7  while Loops</h3>


<a name="ugLangLoopsWhile" class="label"/>


<p>The <span class="teletype">repeat</span> in a loop can be modified by adding one or more <span class="teletype">while</span>
clauses.  <span class="index">while</span><a name="chapter-5-38"/> Each clause contains a <span class="italic">predicate</span>
immediately following the <span class="teletype">while</span> keyword.  The predicate is tested
<span class="italic">before</span> the evaluation of the body of the loop.  The loop body is
evaluated whenever the predicates in a <span class="teletype">while</span> clause are all <span class="teletype">true</span>.
</p>




<div class="boxed2">


<div class="boxed">



<p>The syntax for a simple loop using <span class="teletype">while</span> is
</p>



<div class="center" style="text-align: center;">


<p><span class="teletype">while</span> <span class="italic">predicate</span> <span class="teletype">repeat</span> <span class="italic">loopBody</span>
</p>



</div>


<p>The <span class="italic">predicate</span> is evaluated before <span class="italic">loopBody</span> is evaluated.
A <span class="teletype">while</span> loop terminates immediately when <span class="italic">predicate</span> evaluates
to <span class="teletype">false</span> or when a <span class="teletype">break</span> or <span class="teletype">return</span> expression is evaluated in
<span class="italic">loopBody</span>.  The value returned by the loop is the unique value of
<span class="teletype">Void</span>.<br/>
</p>



</div>
</div>



<p>Here is a simple example of using <span class="teletype">while</span> in a loop.  We first
initialize the counter.
</p>



<div id="spadComm5-35" class="spadComm" >
<form id="formComm5-35" action="javascript:makeRequest('5-35');" >
<input id="comm5-35" type="text" class="command" style="width: 4em;" value="i := 1" />
</form>
<span id="commSav5-35" class="commSav" >i := 1</span>
<div id="mathAns5-35" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>The steps involved in computing this example are<br/>
(1) set  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math> to  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math>,<br/>
(2) test the condition  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>i</mi><mo>&lt;</mo><mn>1</mn></mrow></mstyle></math> and determine that it is not <span class="teletype">true</span>, and<br/>
(3) do not evaluate the loop body and therefore do not display  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>"</mo><mi>hello</mi><mo>"</mo></mrow></mstyle></math>.
</p>



<div class="verbatim"><br />
while&nbsp;i&nbsp;&lt;&nbsp;1&nbsp;repeat<br />
&nbsp;&nbsp;output&nbsp;"hello"<br />
&nbsp;&nbsp;i&nbsp;:=&nbsp;i&nbsp;+&nbsp;1<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>If you have multiple predicates to be tested use the logical <span class="teletype">and</span>
operation to separate them.  FriCAS evaluates these predicates from
left to right.
</p>



<div id="spadComm5-36" class="spadComm" >
<form id="formComm5-36" action="javascript:makeRequest('5-36');" >
<input id="comm5-36" type="text" class="command" style="width: 11em;" value="(x, y) := (1, 1)" />
</form>
<span id="commSav5-36" class="commSav" >(x, y) := (1, 1)</span>
<div id="mathAns5-36" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div class="verbatim"><br />
while&nbsp;x&nbsp;&lt;&nbsp;4&nbsp;and&nbsp;y&nbsp;&lt;&nbsp;10&nbsp;repeat<br />
&nbsp;&nbsp;output&nbsp;[x,y]<br />
&nbsp;&nbsp;x&nbsp;:=&nbsp;x&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;y&nbsp;:=&nbsp;y&nbsp;+&nbsp;2<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;[1,1]<br />
&nbsp;&nbsp;&nbsp;[2,3]<br />
&nbsp;&nbsp;&nbsp;[3,5]<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>A <span class="teletype">break</span> expression can be included in a loop body to terminate a
loop even if the predicate in any <span class="teletype">while</span> clauses are not <span class="teletype">false</span>.
</p>



<div id="spadComm5-37" class="spadComm" >
<form id="formComm5-37" action="javascript:makeRequest('5-37');" >
<input id="comm5-37" type="text" class="command" style="width: 11em;" value="(x, y) := (1, 1)" />
</form>
<span id="commSav5-37" class="commSav" >(x, y) := (1, 1)</span>
<div id="mathAns5-37" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>This loop has multiple <span class="teletype">while</span> clauses and the loop terminates
before any one of their conditions evaluates to <span class="teletype">false</span>.
</p>



<div class="verbatim"><br />
while&nbsp;x&nbsp;&lt;&nbsp;4&nbsp;while&nbsp;y&nbsp;&lt;&nbsp;10&nbsp;repeat<br />
&nbsp;&nbsp;if&nbsp;x&nbsp;+&nbsp;y&nbsp;&gt;&nbsp;7&nbsp;then&nbsp;break<br />
&nbsp;&nbsp;output&nbsp;[x,y]<br />
&nbsp;&nbsp;x&nbsp;:=&nbsp;x&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;y&nbsp;:=&nbsp;y&nbsp;+&nbsp;2<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;[1,1]<br />
&nbsp;&nbsp;&nbsp;[2,3]<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Here's a different version of the nested loops that looked for the
first negative element in a matrix.
</p>



<div id="spadComm5-38" class="spadComm" >
<form id="formComm5-38" action="javascript:makeRequest('5-38');" >
<input id="comm5-38" type="text" class="command" style="width: 50em;" value="m := matrix [ [21,37,53,14], [8,-24,22,-16], [2,10,15,14], [26,33,55,-13] ]" />
</form>
<span id="commSav5-38" class="commSav" >m := matrix [ [21,37,53,14], [8,-24,22,-16], [2,10,15,14], [26,33,55,-13] ]</span>
<div id="mathAns5-38" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mtable><mtr><mtd><mn>21</mn></mtd><mtd><mn>37</mn></mtd><mtd><mn>53</mn></mtd><mtd><mn>14</mn></mtd></mtr><mtr><mtd><mn>8</mn></mtd><mtd><mo>-</mo><mn>24</mn></mtd><mtd><mn>22</mn></mtd><mtd><mo>-</mo><mn>16</mn></mtd></mtr><mtr><mtd><mn>2</mn></mtd><mtd><mn>10</mn></mtd><mtd><mn>15</mn></mtd><mtd><mn>14</mn></mtd></mtr><mtr><mtd><mn>26</mn></mtd><mtd><mn>33</mn></mtd><mtd><mn>55</mn></mtd><mtd><mo>-</mo><mn>13</mn></mtd></mtr></mtable><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Matrix Integer
</div>



<p>Initialized the row index to  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math> and get the number of rows and
columns.  If we were writing a function, these would all be local
variables.
</p>



<div id="spadComm5-39" class="spadComm" >
<form id="formComm5-39" action="javascript:makeRequest('5-39');" >
<input id="comm5-39" type="text" class="command" style="width: 4em;" value="r := 1" />
</form>
<span id="commSav5-39" class="commSav" >r := 1</span>
<div id="mathAns5-39" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm5-40" class="spadComm" >
<form id="formComm5-40" action="javascript:makeRequest('5-40');" >
<input id="comm5-40" type="text" class="command" style="width: 28em;" value="(lastrow, lastcol) := (nrows(m), ncols(m))" />
</form>
<span id="commSav5-40" class="commSav" >(lastrow, lastcol) := (nrows(m), ncols(m))</span>
<div id="mathAns5-40" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>4</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Scan the rows looking for the first negative element.
</p>



<div class="verbatim"><br />
while&nbsp;r&nbsp;&lt;=&nbsp;lastrow&nbsp;repeat<br />
&nbsp;&nbsp;c&nbsp;:=&nbsp;1&nbsp;&nbsp;--&nbsp;index&nbsp;of&nbsp;first&nbsp;column<br />
&nbsp;&nbsp;while&nbsp;c&nbsp;&lt;=&nbsp;lastcol&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;elt(m,r,c)&nbsp;&lt;&nbsp;0&nbsp;then<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output&nbsp;[r,&nbsp;c,&nbsp;elt(m,r,c)]<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;:=&nbsp;lastrow<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;don't&nbsp;look&nbsp;any&nbsp;further<br />
&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;:=&nbsp;c&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;r&nbsp;:=&nbsp;r&nbsp;+&nbsp;1<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;[2,2,-&nbsp;24]<br />
</div>




<div class="returnType">
Type: Void
</div>





</div>



<a name="subsec-5.4.8"/>
<div class="subsection"  id="subsec-5.4.8">
<h3 class="subsectitle">5.4.8  for Loops</h3>


<a name="ugLangLoopsForIn" class="label"/>


<p>FriCAS provides the <span class="teletype">for</span> <span class="index">for</span><a name="chapter-5-39"/> and <span class="teletype">in&nbsp;</span> <span class="index">in</span><a name="chapter-5-40"/> keywords in
<span class="teletype">repeat</span> loops, allowing you to iterate across all <span class="index">iteration</span><a name="chapter-5-41"/>
elements of a list, or to have a variable take on integral values from
a lower bound to an upper bound.  We shall refer to these modifying
clauses of <span class="teletype">repeat</span> loops as <span class="teletype">for</span> clauses.  These clauses can be
present in addition to <span class="teletype">while</span> clauses.  As with all other types of
<span class="teletype">repeat</span> loops, <span class="teletype">break</span> can <span class="index">break</span><a name="chapter-5-42"/> be used to prematurely
terminate the evaluation of the loop.
</p>




<div class="boxed2">


<div class="boxed">



<p>The syntax for a simple loop using <span class="teletype">for</span> is
</p>



<div class="center" style="text-align: center;">


<p><span class="teletype">for</span> <span class="italic">iterator</span> <span class="teletype">repeat</span> <span class="italic">loopBody</span>
</p>



</div>



<p>The <span class="italic">iterator</span> has several forms.  Each form has an end test which
is evaluated before <span class="italic">loopBody</span> is evaluated.  A <span class="teletype">for</span> loop
terminates immediately when the end test succeeds (evaluates to 
<span class="teletype">true</span>) or when a <span class="teletype">break</span> or <span class="teletype">return</span> expression is evaluated
in <span class="italic">loopBody</span>.  The value returned by the loop is the unique value
of <span class="teletype">Void</span>.\&nbsp;
</p>


</div>
</div>





</div>



<a name="subsec-5.4.9"/>
<div class="subsection"  id="subsec-5.4.9">
<h3 class="subsectitle">5.4.9  for i in n..m repeat</h3>


<a name="ugLangLoopsForInNM" class="label"/>


<p>If <span class="teletype">for</span> <span class="index">for</span><a name="chapter-5-43"/> is followed by a variable name, the <span class="teletype">in&nbsp;</span>
<span class="index">in</span><a name="chapter-5-44"/> keyword and then an integer segment of the form  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>.</mo><mo>.</mo><mi>m</mi></mrow></mstyle></math>,
<span class="index">segment</span><a name="chapter-5-45"/> the end test for this loop is the predicate  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>i</mi><mo>&gt;</mo><mi>m</mi></mrow></mstyle></math>.
The body of the loop is evaluated  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>m</mi><mo>-</mo><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mstyle></math> times if this number is
greater than 0.  If this number is less than or equal to 0, the loop
body is not evaluated at all.
</p>


<p>The variable  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math> has the value  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>,</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo>,</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>,</mo><mi>m</mi></mrow></mstyle></math> for successive iterations
of the loop body.The loop variable is a <span class="italic">local variable</span>
within the loop body: its value is not available outside the loop body
and its value and type within the loop body completely mask any outer
definition of a variable with the same name.
</p>


<p>This loop prints the values of
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mn>10</mn><mn>3</mn></msup></mrow></mstyle></math>,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mn>11</mn><mn>3</mn></msup></mrow></mstyle></math>, and  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mn>12</mn><mn>3</mn></msup></mrow></mstyle></math>:
</p>



<div id="spadComm5-41" class="spadComm" >
<form id="formComm5-41" action="javascript:makeRequest('5-41');" >
<input id="comm5-41" type="text" class="command" style="width: 24em;" value="for i in 10..12 repeat output(i^3)" />
</form>
<span id="commSav5-41" class="commSav" >for i in 10..12 repeat output(i^3)</span>
<div id="mathAns5-41" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;1000<br />
&nbsp;&nbsp;&nbsp;1331<br />
&nbsp;&nbsp;&nbsp;1728<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Here is a sample list.
</p>



<div id="spadComm5-42" class="spadComm" >
<form id="formComm5-42" action="javascript:makeRequest('5-42');" >
<input id="comm5-42" type="text" class="command" style="width: 8em;" value="a := [1,2,3]" />
</form>
<span id="commSav5-42" class="commSav" >a := [1,2,3]</span>
<div id="mathAns5-42" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>Iterate across this list, using <span class="italic"><span class="teletype">.</span></span> to access the elements of
a list and the ``<span style="font-weight: bold;">#</span>'' operation to count its elements.
</p>




<div id="spadComm5-43" class="spadComm" >
<form id="formComm5-43" action="javascript:makeRequest('5-43');" >
<input id="comm5-43" type="text" class="command" style="width: 23em;" value="for i in 1.. #a repeat output(a.i)" />
</form>
<span id="commSav5-43" class="commSav" >for i in 1.. #a repeat output(a.i)</span>
<div id="mathAns5-43" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;1<br />
&nbsp;&nbsp;&nbsp;2<br />
&nbsp;&nbsp;&nbsp;3<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>This type of iteration is applicable to anything that uses <span class="italic"><span class="teletype">.</span></span>.
You can also use it with functions that use indices to extract elements.
</p>


<p>Define  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>m</mi></mstyle></math> to be a matrix.
</p>



<div id="spadComm5-44" class="spadComm" >
<form id="formComm5-44" action="javascript:makeRequest('5-44');" >
<input id="comm5-44" type="text" class="command" style="width: 22em;" value="m := matrix [ [1,2],[4,3],[9,0] ]" />
</form>
<span id="commSav5-44" class="commSav" >m := matrix [ [1,2],[4,3],[9,0] ]</span>
<div id="mathAns5-44" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mtable><mtr><mtd><mn>1</mn></mtd><mtd><mn>2</mn></mtd></mtr><mtr><mtd><mn>4</mn></mtd><mtd><mn>3</mn></mtd></mtr><mtr><mtd><mn>9</mn></mtd><mtd><mn>0</mn></mtd></mtr></mtable><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Matrix Integer
</div>



<p>Display the rows of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>m</mi></mstyle></math>.
</p>



<div id="spadComm5-45" class="spadComm" >
<form id="formComm5-45" action="javascript:makeRequest('5-45');" >
<input id="comm5-45" type="text" class="command" style="width: 29em;" value="for i in 1..nrows(m) repeat output row(m,i)" />
</form>
<span id="commSav5-45" class="commSav" >for i in 1..nrows(m) repeat output row(m,i)</span>
<div id="mathAns5-45" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;[1,2]<br />
&nbsp;&nbsp;&nbsp;[4,3]<br />
&nbsp;&nbsp;&nbsp;[9,0]<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>You can use <span class="teletype">iterate</span> with <span class="teletype">for</span>-loops.<span class="index">iterate</span><a name="chapter-5-46"/>
</p>


<p>Display the even integers in a segment.
</p>



<div class="verbatim"><br />
for&nbsp;i&nbsp;in&nbsp;1..5&nbsp;repeat<br />
&nbsp;&nbsp;if&nbsp;odd?(i)&nbsp;then&nbsp;iterate<br />
&nbsp;&nbsp;output(i)<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;2<br />
&nbsp;&nbsp;&nbsp;4<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>See section <a href="section-9.69.xhtml#SegmentXmpPage" class="ref" >SegmentXmpPage</a>  for
more information about segments.
</p>




</div>



<a name="subsec-5.4.10"/>
<div class="subsection"  id="subsec-5.4.10">
<h3 class="subsectitle">5.4.10  for i in n..m by s repeat</h3>


<a name="ugLangLoopsForInNMS" class="label"/>


<p>By default, the difference between values taken on by a variable in
loops such as <span class="teletype">for i in n..m repeat ...</span> is  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math>.  It is possible to
supply another, possibly negative, step value by using the <span class="teletype">by</span>
<span class="index">by</span><a name="chapter-5-47"/> keyword along with <span class="teletype">for</span> and <span class="teletype">in&nbsp;</span>.  Like the upper and
lower bounds, the step value following the <span class="teletype">by</span> keyword must be an
integer.  Note that the loop <span class="teletype">for i in 1..2 by 0 repeat output(i)</span>
will not terminate by itself, as the step value does not change the
index from its initial value of  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math>.
</p>


<p>This expression displays the odd integers between two bounds.
</p>



<div id="spadComm5-46" class="spadComm" >
<form id="formComm5-46" action="javascript:makeRequest('5-46');" >
<input id="comm5-46" type="text" class="command" style="width: 24em;" value="for i in 1..5 by 2 repeat output(i)" />
</form>
<span id="commSav5-46" class="commSav" >for i in 1..5 by 2 repeat output(i)</span>
<div id="mathAns5-46" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;1<br />
&nbsp;&nbsp;&nbsp;3<br />
&nbsp;&nbsp;&nbsp;5<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Use this to display the numbers in reverse order.
</p>



<div id="spadComm5-47" class="spadComm" >
<form id="formComm5-47" action="javascript:makeRequest('5-47');" >
<input id="comm5-47" type="text" class="command" style="width: 24em;" value="for i in 5..1 by -2 repeat output(i)" />
</form>
<span id="commSav5-47" class="commSav" >for i in 5..1 by -2 repeat output(i)</span>
<div id="mathAns5-47" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;5<br />
&nbsp;&nbsp;&nbsp;3<br />
&nbsp;&nbsp;&nbsp;1<br />
</div>




<div class="returnType">
Type: Void
</div>





</div>



<a name="subsec-5.4.11"/>
<div class="subsection"  id="subsec-5.4.11">
<h3 class="subsectitle">5.4.11  for i in n.. repeat</h3>


<a name="ugLangLoopsForInN" class="label"/>


<p>If the value after the <span class="italic"><span class="teletype">..</span></span>  is omitted, the loop has no end test.
A potentially infinite loop is thus created.  The variable is given
the successive values  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>,</mo><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mo>,</mo><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow><mo>,</mo><mo>.</mo><mo>.</mo><mo>.</mo></mrow></mstyle></math> and the loop is terminated
only if a <span class="teletype">break</span> or <span class="teletype">return</span> expression is evaluated in the loop
body.  However you may also add some other modifying clause on the
<span class="teletype">repeat</span> (for example, a <span class="teletype">while</span> clause) to stop the loop.
</p>


<p>This loop displays the integers greater than or equal to  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>15</mn></mstyle></math>
and less than the first prime greater than  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>15</mn></mstyle></math>.
</p>



<div id="spadComm5-48" class="spadComm" >
<form id="formComm5-48" action="javascript:makeRequest('5-48');" >
<input id="comm5-48" type="text" class="command" style="width: 34em;" value="for i in 15.. while not prime?(i) repeat output(i)" />
</form>
<span id="commSav5-48" class="commSav" >for i in 15.. while not prime?(i) repeat output(i)</span>
<div id="mathAns5-48" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;15<br />
&nbsp;&nbsp;&nbsp;16<br />
</div>




<div class="returnType">
Type: Void
</div>





</div>



<a name="subsec-5.4.12"/>
<div class="subsection"  id="subsec-5.4.12">
<h3 class="subsectitle">5.4.12  for x in l repeat</h3>


<a name="ugLangLoopsForInXL" class="label"/>


<p>Another variant of the <span class="teletype">for</span> loop has the form:
</p>



<div class="center" style="text-align: center;">


<p><span class="italic"><span class="teletype">for</span> x <span class="teletype">in&nbsp;</span> list <span class="teletype">repeat</span> loopBody</span>
</p>



</div>



<p>This form is used when you want to iterate directly over the elements
of a list.  In this form of the <span class="teletype">for</span> loop, the variable <span class="teletype">x</span> takes on
the value of each successive element in <span class="teletype">l</span>.  The end test is most
simply stated in English: <span class="italic">are there no more <span class="teletype">x</span> in <span class="teletype">l</span>?</span>
</p>


<p>If <span class="teletype">l</span> is this list,
</p>



<div id="spadComm5-49" class="spadComm" >
<form id="formComm5-49" action="javascript:makeRequest('5-49');" >
<input id="comm5-49" type="text" class="command" style="width: 9em;" value="l := [0,-5,3]" />
</form>
<span id="commSav5-49" class="commSav" >l := [0,-5,3]</span>
<div id="mathAns5-49" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>0</mn><mo>,</mo><mo>-</mo><mn>5</mn><mo>,</mo><mn>3</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>display all elements of <span class="teletype">l</span>, one per line.
</p>



<div id="spadComm5-50" class="spadComm" >
<form id="formComm5-50" action="javascript:makeRequest('5-50');" >
<input id="comm5-50" type="text" class="command" style="width: 18em;" value="for x in l repeat output(x)" />
</form>
<span id="commSav5-50" class="commSav" >for x in l repeat output(x)</span>
<div id="mathAns5-50" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;0<br />
&nbsp;&nbsp;&nbsp;-&nbsp;5<br />
&nbsp;&nbsp;&nbsp;3<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Since the list constructing expression <span style="font-weight: bold;">expand</span><span class="teletype">[n..m]</span> creates the
list  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>[</mo><mi>n</mi><mo>,</mo><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mo>,</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>,</mo><mi>m</mi><mo>]</mo></mrow></mstyle></math>. Note that this list is empty if  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>&gt;</mo><mi>m</mi></mrow></mstyle></math>.  You
might be tempted to think that the loops
</p>



<div class="verbatim"><br />
for&nbsp;i&nbsp;in&nbsp;n..m&nbsp;repeat&nbsp;output(i)<br />
</div>



<p>and
</p>



<div class="verbatim"><br />
for&nbsp;x&nbsp;in&nbsp;expand&nbsp;[n..m]&nbsp;repeat&nbsp;output(x)<br />
</div>



<p>are equivalent.  The second form first creates the list <span style="font-weight: bold;">
expand</span><span class="teletype">[n..m]</span> (no matter how large it might be) and then does
the iteration.  The first form potentially runs in much less space, as
the index variable  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math> is simply incremented once per loop and the
list is not actually created.  Using the first form is much more
efficient.
</p>


<p>Of course, sometimes you really want to iterate across a specific list.
This displays each of the factors of  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>2400000</mn></mstyle></math>.
</p>



<div id="spadComm5-51" class="spadComm" >
<form id="formComm5-51" action="javascript:makeRequest('5-51');" >
<input id="comm5-51" type="text" class="command" style="width: 34em;" value="for f in factors(factor(2400000)) repeat output(f)" />
</form>
<span id="commSav5-51" class="commSav" >for f in factors(factor(2400000)) repeat output(f)</span>
<div id="mathAns5-51" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;[factor=&nbsp;2,exponent=&nbsp;8]<br />
&nbsp;&nbsp;&nbsp;[factor=&nbsp;3,exponent=&nbsp;1]<br />
&nbsp;&nbsp;&nbsp;[factor=&nbsp;5,exponent=&nbsp;5]<br />
</div>




<div class="returnType">
Type: Void
</div>





</div>



<a name="subsec-5.4.13"/>
<div class="subsection"  id="subsec-5.4.13">
<h3 class="subsectitle">5.4.13  <span class="italic">Such that</span> Predicates</h3>


<a name="ugLangLoopsForInPred" class="label"/>


<p>A <span class="teletype">for</span> loop can be followed by a ``<span class="teletype">|</span>'' and then a predicate.  The
predicate qualifies the use of the values from the iterator following
the <span class="teletype">for</span>.  Think of the vertical bar ``<span class="teletype">|</span>'' as the phrase <span class="italic">such
that.</span>
</p>


<p>This loop expression prints out the integers  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> in the given segment
such that  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> is odd.
</p>



<div id="spadComm5-52" class="spadComm" >
<form id="formComm5-52" action="javascript:makeRequest('5-52');" >
<input id="comm5-52" type="text" class="command" style="width: 26em;" value="for n in 0..4 | odd? n repeat output n" />
</form>
<span id="commSav5-52" class="commSav" >for n in 0..4 | odd? n repeat output n</span>
<div id="mathAns5-52" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;1<br />
&nbsp;&nbsp;&nbsp;3<br />
</div>




<div class="returnType">
Type: Void
</div>





<div class="boxed2">


<div class="boxed">



<p>A <span class="teletype">for</span> loop can also be written
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mtext>for</mtext></mrow><mspace width="0.5 em" /><mrow><mtext mathvariant='sans-serif-italic'>iterator</mtext></mrow><mspace width="0.5 em" /><mo>|</mo><mspace width="0.5 em" /><mrow><mtext mathvariant='sans-serif-italic'>predicate</mtext></mrow><mspace width="0.5 em" /><mrow><mtext>repeat</mtext></mrow><mspace width="0.5 em" /><mrow><mtext mathvariant='sans-serif-italic'>loopBody</mtext></mrow></mrow></mstyle></math>
</p>


<p>which is equivalent to:
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mtext>for</mtext></mrow><mrow><mtext mathvariant='sans-serif-italic'>&nbsp;iterator&nbsp;</mtext></mrow><mrow><mtext>repeat&nbsp;if</mtext></mrow><mrow><mtext mathvariant='sans-serif-italic'>&nbsp;predicate&nbsp;</mtext></mrow><mrow><mtext>then</mtext></mrow><mrow><mtext mathvariant='sans-serif-italic'>&nbsp;loopBody&nbsp;</mtext></mrow><mrow><mtext>else&nbsp;</mtext></mrow><mi>iterate</mi></mrow></mstyle></math>
</p>



</div>
</div>



<p>The predicate need not refer only to the variable in the <span class="teletype">for</span> clause:
any variable in an outer scope can be part of the predicate.
</p>


<p>In this example, the predicate on the inner <span class="teletype">for</span> loop uses  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math> from
the outer loop and the  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>j</mi></mstyle></math> from the <span class="teletype">for</span> <span class="index">iteration:nested</span><a name="chapter-5-48"/>
clause that it directly modifies.
</p>



<div class="verbatim"><br />
for&nbsp;i&nbsp;in&nbsp;1..50&nbsp;repeat<br />
&nbsp;&nbsp;for&nbsp;j&nbsp;in&nbsp;1..50&nbsp;|&nbsp;factorial(i+j)&nbsp;&lt;&nbsp;25&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;output&nbsp;[i,j]<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;[1,1]<br />
&nbsp;&nbsp;&nbsp;[1,2]<br />
&nbsp;&nbsp;&nbsp;[1,3]<br />
&nbsp;&nbsp;&nbsp;[2,1]<br />
&nbsp;&nbsp;&nbsp;[2,2]<br />
&nbsp;&nbsp;&nbsp;[3,1]<br />
</div>




<div class="returnType">
Type: Void
</div>





</div>



<a name="subsec-5.4.14"/>
<div class="subsection"  id="subsec-5.4.14">
<h3 class="subsectitle">5.4.14  Parallel Iteration</h3>


<a name="ugLangLoopsPar" class="label"/>


<p>The last example of the previous section 
<a href="section-5.4.xhtml#ugLangLoopsForInPred" class="ref" >ugLangLoopsForInPred</a> 
gives an example of <span class="italic">nested iteration</span>: a loop is contained
<span class="index">iteration:nested</span><a name="chapter-5-49"/> in another loop.  <span class="index">iteration:parallel</span><a name="chapter-5-50"/>
Sometimes you want to iterate across two lists in parallel, or perhaps
you want to traverse a list while incrementing a variable.
</p>




<div class="boxed2">


<div class="boxed">



<p>The general syntax of a repeat loop is 
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><msub><mi>iterator</mi><mn>1</mn></msub><mspace width="0.5 em" /><msub><mi>iterator</mi><mn>2</mn></msub><mspace width="0.5 em" /><mo>&#x2026;</mo><mspace width="0.5 em" /><msub><mi>iterator</mi><mi>N</mi></msub><mrow><mtext>&nbsp;repeat&nbsp;</mtext></mrow><mi>loopBody</mi></mrow></mstyle></math>
where each <span class="italic">iterator</span> is either a <span class="teletype">for</span> or a <span class="teletype">while</span> clause.  The
loop terminates immediately when the end test of any <span class="italic">iterator</span>
succeeds or when a <span class="teletype">break</span> or <span class="teletype">return</span> expression is evaluated in <span class="italic">loopBody</span>.  The value returned by the loop is the unique value of <span class="teletype">Void</span>.<br/>
</p>



</div>
</div>



<p>Here we write a loop to iterate across two lists, computing the sum of
the pairwise product of elements. Here is the first list.
</p>



<div id="spadComm5-53" class="spadComm" >
<form id="formComm5-53" action="javascript:makeRequest('5-53');" >
<input id="comm5-53" type="text" class="command" style="width: 10em;" value="l := [1,3,5,7]" />
</form>
<span id="commSav5-53" class="commSav" >l := [1,3,5,7]</span>
<div id="mathAns5-53" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>And the second.
</p>



<div id="spadComm5-54" class="spadComm" >
<form id="formComm5-54" action="javascript:makeRequest('5-54');" >
<input id="comm5-54" type="text" class="command" style="width: 10em;" value="m := [100,200]" />
</form>
<span id="commSav5-54" class="commSav" >m := [100,200]</span>
<div id="mathAns5-54" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>100</mn><mo>,</mo><mn>200</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>The initial value of the sum counter.
</p>



<div id="spadComm5-55" class="spadComm" >
<form id="formComm5-55" action="javascript:makeRequest('5-55');" >
<input id="comm5-55" type="text" class="command" style="width: 6em;" value="sum := 0" />
</form>
<span id="commSav5-55" class="commSav" >sum := 0</span>
<div id="mathAns5-55" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>0</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: NonNegativeInteger
</div>



<p>The last two elements of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>l</mi></mstyle></math> are not used in the calculation because
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>m</mi></mstyle></math> has two fewer elements than  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>l</mi></mstyle></math>.
</p>



<div class="verbatim"><br />
for&nbsp;x&nbsp;in&nbsp;l&nbsp;for&nbsp;y&nbsp;in&nbsp;m&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;sum&nbsp;:=&nbsp;sum&nbsp;+&nbsp;x*y<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Display the <span class="italic">dot product.</span>
</p>



<div id="spadComm5-56" class="spadComm" >
<form id="formComm5-56" action="javascript:makeRequest('5-56');" >
<input id="comm5-56" type="text" class="command" style="width: 2em;" value="sum" />
</form>
<span id="commSav5-56" class="commSav" >sum</span>
<div id="mathAns5-56" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>700</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: NonNegativeInteger
</div>



<p>Next, we write a loop to compute the sum of the products of the loop
elements with their positions in the loop.
</p>



<div id="spadComm5-57" class="spadComm" >
<form id="formComm5-57" action="javascript:makeRequest('5-57');" >
<input id="comm5-57" type="text" class="command" style="width: 26em;" value="l := [2,3,5,7,11,13,17,19,23,29,31,37]" />
</form>
<span id="commSav5-57" class="commSav" >l := [2,3,5,7,11,13,17,19,23,29,31,37]</span>
<div id="mathAns5-57" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>11</mn><mo>,</mo><mn>13</mn><mo>,</mo><mn>17</mn><mo>,</mo><mn>19</mn><mo>,</mo><mn>23</mn><mo>,</mo><mn>29</mn><mo>,</mo><mn>31</mn><mo>,</mo><mn>37</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>The initial sum.
</p>



<div id="spadComm5-58" class="spadComm" >
<form id="formComm5-58" action="javascript:makeRequest('5-58');" >
<input id="comm5-58" type="text" class="command" style="width: 6em;" value="sum := 0" />
</form>
<span id="commSav5-58" class="commSav" >sum := 0</span>
<div id="mathAns5-58" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>0</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: NonNegativeInteger
</div>



<p>Here looping stops when the list  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>l</mi></mstyle></math> is exhausted, even though
the  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>for</mi><mi>i</mi><mi>in</mi><mn>0</mn><mo>.</mo><mo>.</mo></mrow></mstyle></math> specifies no terminating condition.
</p>




<div id="spadComm5-59" class="spadComm" >
<form id="formComm5-59" action="javascript:makeRequest('5-59');" >
<input id="comm5-59" type="text" class="command" style="width: 29em;" value="for i in 0.. for x in l repeat sum := i * x" />
</form>
<span id="commSav5-59" class="commSav" >for i in 0.. for x in l repeat sum := i * x</span>
<div id="mathAns5-59" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Display this weighted sum.
</p>



<div id="spadComm5-60" class="spadComm" >
<form id="formComm5-60" action="javascript:makeRequest('5-60');" >
<input id="comm5-60" type="text" class="command" style="width: 2em;" value="sum" />
</form>
<span id="commSav5-60" class="commSav" >sum</span>
<div id="mathAns5-60" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>407</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: NonNegativeInteger
</div>



<p>When ``<span class="teletype">|</span>'' is used to qualify any of the <span class="teletype">for</span> clauses in a parallel
iteration, the variables in the predicates can be from an outer scope
or from a <span class="teletype">for</span> clause in or to the left of a modified clause.
</p>


<p>This is correct:
</p>


<p><!-- output from following is too long to show -->
</p>




<div class="verbatim"><br />
for&nbsp;i&nbsp;in&nbsp;1..10&nbsp;repeat<br />
&nbsp;&nbsp;for&nbsp;j&nbsp;in&nbsp;200..300&nbsp;|&nbsp;odd?&nbsp;(i+j)&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;output&nbsp;[i,j]<br />
</div>



<p>This is not correct since the variable  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>j</mi></mstyle></math> has not been defined
outside the inner loop.
</p>



<div class="verbatim"><br />
for&nbsp;i&nbsp;in&nbsp;1..10&nbsp;|&nbsp;odd?&nbsp;(i+j)&nbsp;repeat&nbsp;&nbsp;--&nbsp;wrong,&nbsp;j&nbsp;not&nbsp;defined<br />
&nbsp;&nbsp;for&nbsp;j&nbsp;in&nbsp;200..300&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;output&nbsp;[i,j]<br />
</div>





</div>



<a name="subsec-5.4.15"/>
<div class="subsection"  id="subsec-5.4.15">
<h3 class="subsectitle">5.4.15  Mixing Loop Modifiers</h3>


<a name="ugLangLoopsMix" class="label"/>


<p>This example shows that it is possible to mix several of the
<span class="index">loop:mixing modifiers</span><a name="chapter-5-51"/> forms of <span class="teletype">repeat</span> modifying clauses on a loop.
</p>



<div class="verbatim"><br />
for&nbsp;i&nbsp;in&nbsp;1..10<br />
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;j&nbsp;in&nbsp;151..160&nbsp;|&nbsp;odd?&nbsp;j<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;i&nbsp;+&nbsp;j&nbsp;&lt;&nbsp;160&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output&nbsp;[i,j]<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;[1,151]<br />
&nbsp;&nbsp;&nbsp;[3,153]<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Here are useful rules for composing loop expressions:
</p>



<ol>
<li>
 <span class="teletype">while</span> predicates can only refer to variables that
are global (or in an outer scope)
or that are defined in <span class="teletype">for</span> clauses to the left of the
predicate.
</li>
<li> A <span class="italic">such that</span> predicate (something following ``<span class="teletype">|</span>'')
must directly follow a <span class="teletype">for</span> clause and can only refer to
variables that are global (or in an outer scope)
or defined in the modified <span class="teletype">for</span> clause
or any <span class="teletype">for</span> clause to the left.
</li>
</ol>





</div>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-5.3.xhtml" style="margin-right: 10px;">Previous Section 5.3 if-then-else</a><a href="section-5.5.xhtml" style="margin-right: 10px;">Next Section 5.5 Creating Lists and Streams with Iterators</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>