<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section2.8</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-2.7.xhtml" style="margin-right: 10px;">Previous Section 2.7 Conversion</a><a href="section-2.9.xhtml" style="margin-right: 10px;">Next Section 2.9 Package Calling and Target Types</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-2.8">
<h2 class="sectiontitle">2.8  Subdomains Again</h2>


<a name="ugTypesSubdomains" class="label"/>


<p>A <span class="italic">subdomain</span>  S of a domain  D is a domain consisting of
</p>



<ol>
<li> 
 those elements of  D that satisfy some 
<span class="italic">predicate</span> (that is, a test that returns <span class="teletype">true</span> or <span class="teletype">false</span>) and 
</li>
<li> a subset of the operations of  D.  
</li>
</ol>

<p> 
Every domain is a subdomain of itself, trivially satisfying the
membership test: <span class="teletype">true</span>.
</p>


<p>Currently, there are only two system-defined subdomains in FriCAS that
receive substantial use.  <span class="teletype">PositiveInteger</span> and 
<span class="teletype">NonNegativeInteger</span> are subdomains of <span class="teletype">Integer</span>.  An element <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math>
of <span class="teletype">NonNegativeInteger</span> is an integer that is greater than or
equal to zero, that is, satisfies <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>x</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow></mstyle></math>.  An element <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> of 
<span class="teletype">PositiveInteger</span> is a nonnegative integer that is, in fact, greater
than zero, that is, satisfies <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>x</mi><mo>&gt;</mo><mn>0</mn></mrow></mstyle></math>.  Not all operations from 
<span class="teletype">Integer</span> are available for these subdomains.  For example, negation
and subtraction are not provided since the subdomains are not closed
under those operations.  When you use an integer in an expression,
FriCAS assigns to it the type that is the most specific subdomain whose
predicate is satisfied.
</p>


<p>This is a positive integer.
</p>



<div id="spadComm2-98" class="spadComm" >
<form id="formComm2-98" action="javascript:makeRequest('2-98');" >
<input id="comm2-98" type="text" class="command" style="width: 1em;" value="5" />
</form>
<span id="commSav2-98" class="commSav" >5</span>
<div id="mathAns2-98" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>5</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>This is a nonnegative integer.
</p>



<div id="spadComm2-99" class="spadComm" >
<form id="formComm2-99" action="javascript:makeRequest('2-99');" >
<input id="comm2-99" type="text" class="command" style="width: 1em;" value="0" />
</form>
<span id="commSav2-99" class="commSav" >0</span>
<div id="mathAns2-99" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>0</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: NonNegativeInteger
</div>



<p>This is neither of the above.
</p>



<div id="spadComm2-100" class="spadComm" >
<form id="formComm2-100" action="javascript:makeRequest('2-100');" >
<input id="comm2-100" type="text" class="command" style="width: 2em;" value="-5" />
</form>
<span id="commSav2-100" class="commSav" >-5</span>
<div id="mathAns2-100" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mn>5</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Integer
</div>



<p>Furthermore, unless you are assigning an integer to a declared variable
or using a conversion, any integer result has as type the most
specific subdomain.
</p>



<div id="spadComm2-101" class="spadComm" >
<form id="formComm2-101" action="javascript:makeRequest('2-101');" >
<input id="comm2-101" type="text" class="command" style="width: 8em;" value="(-2) - (-3)" />
</form>
<span id="commSav2-101" class="commSav" >(-2) - (-3)</span>
<div id="mathAns2-101" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm2-102" class="spadComm" >
<form id="formComm2-102" action="javascript:makeRequest('2-102');" >
<input id="comm2-102" type="text" class="command" style="width: 8em;" value="0 :: Integer" />
</form>
<span id="commSav2-102" class="commSav" >0 :: Integer</span>
<div id="mathAns2-102" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>0</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Integer
</div>





<div id="spadComm2-103" class="spadComm" >
<form id="formComm2-103" action="javascript:makeRequest('2-103');" >
<input id="comm2-103" type="text" class="command" style="width: 18em;" value="x : NonNegativeInteger := 5" />
</form>
<span id="commSav2-103" class="commSav" >x : NonNegativeInteger := 5</span>
<div id="mathAns2-103" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>5</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: NonNegativeInteger
</div>



<p>When necessary, FriCAS converts an integer object into one belonging to
a less specific subdomain.  For example, in <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>3</mn><mo>-</mo><mn>2</mn></mrow></mstyle></math>, the arguments to
"<span class="spadopFrom" title="Integer">-</span>" are both elements of <span class="teletype">PositiveInteger</span>,
but this type does not provide a subtraction operation.  Neither does
<span class="teletype">NonNegativeInteger</span>, so <math xmlns="&mathml;" mathsize="big"><mstyle><mn>3</mn></mstyle></math> and <math xmlns="&mathml;" mathsize="big"><mstyle><mn>2</mn></mstyle></math> are viewed as elements of
<span class="teletype">Integer</span>, where their difference can be calculated.  The result
is <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math>, which FriCAS then automatically assigns the type 
<span class="teletype">PositiveInteger</span>.
</p>


<p>Certain operations are very sensitive to the subdomains to which their
arguments belong.  This is an element of <span class="teletype">PositiveInteger</span>.
</p>



<div id="spadComm2-104" class="spadComm" >
<form id="formComm2-104" action="javascript:makeRequest('2-104');" >
<input id="comm2-104" type="text" class="command" style="width: 4em;" value="2 ^ 2" />
</form>
<span id="commSav2-104" class="commSav" >2 ^ 2</span>
<div id="mathAns2-104" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>4</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>This is an element of <span class="teletype">Fraction Integer</span>.
</p>



<div id="spadComm2-105" class="spadComm" >
<form id="formComm2-105" action="javascript:makeRequest('2-105');" >
<input id="comm2-105" type="text" class="command" style="width: 6em;" value="2 ^ (-2)" />
</form>
<span id="commSav2-105" class="commSav" >2 ^ (-2)</span>
<div id="mathAns2-105" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mfrac><mn>1</mn><mn>4</mn></mfrac></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Integer
</div>



<p>It makes sense then that this is a list of elements of 
<span class="teletype">PositiveInteger</span>.
</p>



<div id="spadComm2-106" class="spadComm" >
<form id="formComm2-106" action="javascript:makeRequest('2-106');" >
<input id="comm2-106" type="text" class="command" style="width: 14em;" value="[10^i for i in 2..5]" />
</form>
<span id="commSav2-106" class="commSav" >[10^i for i in 2..5]</span>
<div id="mathAns2-106" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>100</mn><mo>,</mo><mn>1000</mn><mo>,</mo><mn>10000</mn><mo>,</mo><mn>100000</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>What should the type of <span class="teletype">[10^(i-1) for i in 2..5]</span> be?  On one hand,
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>i</mi><mo>-</mo><mn>1</mn></mrow></mstyle></math> is always an integer greater than zero as <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math> ranges from <math xmlns="&mathml;" mathsize="big"><mstyle><mn>2</mn></mstyle></math> to
<math xmlns="&mathml;" mathsize="big"><mstyle><mn>5</mn></mstyle></math> and so <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>10</mn><mo>*</mo><mo>*</mo><mi>i</mi></mrow></mstyle></math> is also always a positive integer.  On the other,
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>i</mi><mo>-</mo><mn>1</mn></mrow></mstyle></math> is a very simple function of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math>.  FriCAS does not try to analyze
every such function over the index's range of values to determine
whether it is always positive or nowhere negative.  For an arbitrary
FriCAS function, this analysis is not possible.
</p>


<p>So, to be consistent no such analysis is done and we get this.
</p>



<div id="spadComm2-107" class="spadComm" >
<form id="formComm2-107" action="javascript:makeRequest('2-107');" >
<input id="comm2-107" type="text" class="command" style="width: 17em;" value="[10^(i-1) for i in 2..5]" />
</form>
<span id="commSav2-107" class="commSav" >[10^(i-1) for i in 2..5]</span>
<div id="mathAns2-107" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>10</mn><mo>,</mo><mn>100</mn><mo>,</mo><mn>1000</mn><mo>,</mo><mn>10000</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Fraction Integer
</div>



<p>To get a list of elements of <span class="teletype">PositiveInteger</span> instead, you have
two choices.  You can use a conversion.
</p>




<div id="spadComm2-108" class="spadComm" >
<form id="formComm2-108" action="javascript:makeRequest('2-108');" >
<input id="comm2-108" type="text" class="command" style="width: 22em;" value="[10^((i-1) :: PI) for i in 2..5]" />
</form>
<span id="commSav2-108" class="commSav" >[10^((i-1) :: PI) for i in 2..5]</span>
<div id="mathAns2-108" ></div>
</div>




<div class="verbatim"><br />
Compiling&nbsp;function&nbsp;G82696&nbsp;with&nbsp;type&nbsp;Integer&nbsp;-&gt;&nbsp;Boolean&nbsp;<br />
Compiling&nbsp;function&nbsp;G82708&nbsp;with&nbsp;type&nbsp;NonNegativeInteger&nbsp;-&gt;&nbsp;Boolean&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>10</mn><mo>,</mo><mn>100</mn><mo>,</mo><mn>1000</mn><mo>,</mo><mn>10000</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>Or you can use <span class="teletype">pretend</span>.  <span class="index">pretend</span><a name="chapter-2-50"/>
</p>



<div id="spadComm2-109" class="spadComm" >
<form id="formComm2-109" action="javascript:makeRequest('2-109');" >
<input id="comm2-109" type="text" class="command" style="width: 26em;" value="[10^((i-1) pretend PI) for i in 2..5]" />
</form>
<span id="commSav2-109" class="commSav" >[10^((i-1) pretend PI) for i in 2..5]</span>
<div id="mathAns2-109" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>10</mn><mo>,</mo><mn>100</mn><mo>,</mo><mn>1000</mn><mo>,</mo><mn>10000</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>The operation <span class="teletype">pretend</span> is used to defeat the FriCAS type system.
The expression <span class="teletype">object pretend D</span> means <span class="italic">make a new object
(without copying) of type <span class="teletype">D</span> from <span class="teletype">object</span>.</span>  If 
<span class="teletype">object</span> were an integer and you told FriCAS to pretend it was a list,
you would probably see a message about a fatal error being caught and
memory possibly being damaged.  Lists do not have the same internal
representation as integers!
</p>


<p>You use <span class="teletype">pretend</span> at your peril.  <span class="index">peril</span><a name="chapter-2-51"/>
</p>


<p>Use <math xmlns="&mathml;" mathsize="big"><mstyle><mi>pretend</mi></mstyle></math> with great care!  FriCAS trusts you that the value is of
the specified type.
</p>




<div id="spadComm2-110" class="spadComm" >
<form id="formComm2-110" action="javascript:makeRequest('2-110');" >
<input id="comm2-110" type="text" class="command" style="width: 20em;" value="(2/3) pretend Complex Integer" />
</form>
<span id="commSav2-110" class="commSav" >(2/3) pretend Complex Integer</span>
<div id="mathAns2-110" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>2</mn><mo>+</mo><mrow><mn>3</mn><mo></mo><mi>i</mi></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Complex Integer
</div>





</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-2.7.xhtml" style="margin-right: 10px;">Previous Section 2.7 Conversion</a><a href="section-2.9.xhtml" style="margin-right: 10px;">Next Section 2.9 Package Calling and Target Types</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>