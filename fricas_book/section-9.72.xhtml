<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section9.72</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-9.71.xhtml" style="margin-right: 10px;">Previous Section 9.71 Set</a><a href="section-9.73.xhtml" style="margin-right: 10px;">Next Section 9.73 SparseTable</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-9.72">
<h2 class="sectiontitle">9.72  SingleInteger</h2>


<a name="SingleIntegerXmpPage" class="label"/>


<p>The <span class="teletype">SingleInteger</span> domain is intended to provide support in FriCAS
for machine integer arithmetic.  It is generally much faster than
(bignum) <span class="teletype">Integer</span> arithmetic but suffers from a limited range of
values.  Since FriCAS can be implemented on top of various dialects of
Lisp, the actual representation of small integers may not correspond
exactly to the host machines integer representation.
</p>


<p>In the CCL implementation of AXIOM (Release 2.1 onwards) the underlying
representation of <span class="teletype">SingleInteger</span> is the same as <span class="teletype">Integer</span>.  
The underlying Lisp primitives treat machine-word sized computations
specially.
</p>


<p>You can discover the minimum and maximum values in your implementation
by using <span class="spadfunFrom" >min</span><span class="index">min</span><a name="chapter-9-24"/><span class="index">SingleInteger</span><a name="chapter-9-25"/> and <span class="spadfunFrom" >max</span><span class="index">max</span><a name="chapter-9-26"/><span class="index">SingleInteger</span><a name="chapter-9-27"/>.
</p>




<div id="spadComm9-37" class="spadComm" >
<form id="formComm9-37" action="javascript:makeRequest('9-37');" >
<input id="comm9-37" type="text" class="command" style="width: 13em;" value="min()$SingleInteger" />
</form>
<span id="commSav9-37" class="commSav" >min()$SingleInteger</span>
<div id="mathAns9-37" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mn>134217728</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SingleInteger
</div>





<div id="spadComm9-38" class="spadComm" >
<form id="formComm9-38" action="javascript:makeRequest('9-38');" >
<input id="comm9-38" type="text" class="command" style="width: 13em;" value="max()$SingleInteger" />
</form>
<span id="commSav9-38" class="commSav" >max()$SingleInteger</span>
<div id="mathAns9-38" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>134217727</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SingleInteger
</div>



<p>To avoid confusion with <span class="teletype">Integer</span>, which is the default type for
integers, you usually need to work with declared variables
(<a href="ugTypesDeclarePage" class="ref" >ugTypesDeclarePage</a>  in Section 
<a href="ugTypesDeclareNumber" class="ref" >ugTypesDeclareNumber</a> )
...
</p>




<div id="spadComm9-39" class="spadComm" >
<form id="formComm9-39" action="javascript:makeRequest('9-39');" >
<input id="comm9-39" type="text" class="command" style="width: 18em;" value="a := 1234 :: SingleInteger " />
</form>
<span id="commSav9-39" class="commSav" >a := 1234 :: SingleInteger </span>
<div id="mathAns9-39" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1234</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SingleInteger
</div>



<p>or use package calling
(<a href="ugTypesPkgCallPage" class="ref" >ugTypesPkgCallPage</a>  in Section 
<a href="ugTypesPkgCallNumber" class="ref" >ugTypesPkgCallNumber</a> ).
</p>




<div id="spadComm9-40" class="spadComm" >
<form id="formComm9-40" action="javascript:makeRequest('9-40');" >
<input id="comm9-40" type="text" class="command" style="width: 16em;" value="b := 124$SingleInteger " />
</form>
<span id="commSav9-40" class="commSav" >b := 124$SingleInteger </span>
<div id="mathAns9-40" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>124</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SingleInteger
</div>



<p>You can add, multiply and subtract <span class="teletype">SingleInteger</span> objects,
and ask for the greatest common divisor (<span class="teletype">gcd</span>).
</p>




<div id="spadComm9-41" class="spadComm" >
<form id="formComm9-41" action="javascript:makeRequest('9-41');" >
<input id="comm9-41" type="text" class="command" style="width: 6em;" value="gcd(a,b) " />
</form>
<span id="commSav9-41" class="commSav" >gcd(a,b) </span>
<div id="mathAns9-41" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SingleInteger
</div>



<p>The least common multiple (<span class="teletype">lcm</span>) is also available.
</p>




<div id="spadComm9-42" class="spadComm" >
<form id="formComm9-42" action="javascript:makeRequest('9-42');" >
<input id="comm9-42" type="text" class="command" style="width: 6em;" value="lcm(a,b) " />
</form>
<span id="commSav9-42" class="commSav" >lcm(a,b) </span>
<div id="mathAns9-42" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>76508</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SingleInteger
</div>



<p>Operations <span class="spadfunFrom" >mulmod</span><span class="index">mulmod</span><a name="chapter-9-28"/><span class="index">SingleInteger</span><a name="chapter-9-29"/>,
<span class="spadfunFrom" >addmod</span><span class="index">addmod</span><a name="chapter-9-30"/><span class="index">SingleInteger</span><a name="chapter-9-31"/>,
<span class="spadfunFrom" >submod</span><span class="index">submod</span><a name="chapter-9-32"/><span class="index">SingleInteger</span><a name="chapter-9-33"/>, and
<span class="spadfunFrom" >invmod</span><span class="index">invmod</span><a name="chapter-9-34"/><span class="index">SingleInteger</span><a name="chapter-9-35"/> are similar---they provide
arithmetic modulo a given small integer.
Here is  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>5</mn><mo>*</mo><mn>6</mn><mrow><mtext mathvariant='monospace'>mod<mspace width="0.5em"/></mtext></mrow><mn>13</mn></mrow></mstyle></math>.
</p>




<div id="spadComm9-43" class="spadComm" >
<form id="formComm9-43" action="javascript:makeRequest('9-43');" >
<input id="comm9-43" type="text" class="command" style="width: 19em;" value="mulmod(5,6,13)$SingleInteger" />
</form>
<span id="commSav9-43" class="commSav" >mulmod(5,6,13)$SingleInteger</span>
<div id="mathAns9-43" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>4</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SingleInteger
</div>



<p>To reduce a small integer modulo a prime, use
<span class="spadfunFrom" >positiveRemainder</span><span class="index">positiveRemainder</span><a name="chapter-9-36"/><span class="index">SingleInteger</span><a name="chapter-9-37"/>.
</p>




<div id="spadComm9-44" class="spadComm" >
<form id="formComm9-44" action="javascript:makeRequest('9-44');" >
<input id="comm9-44" type="text" class="command" style="width: 26em;" value="positiveRemainder(37,13)$SingleInteger" />
</form>
<span id="commSav9-44" class="commSav" >positiveRemainder(37,13)$SingleInteger</span>
<div id="mathAns9-44" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>11</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SingleInteger
</div>



<p>Operations
<span class="spadfunFrom" >And</span><span class="index">And</span><a name="chapter-9-38"/><span class="index">SingleInteger</span><a name="chapter-9-39"/>,
<span class="spadfunFrom" >Or</span><span class="index">Or</span><a name="chapter-9-40"/><span class="index">SingleInteger</span><a name="chapter-9-41"/>,
<span class="spadfunFrom" >xor</span><span class="index">xor</span><a name="chapter-9-42"/><span class="index">SingleInteger</span><a name="chapter-9-43"/>,
and <span class="spadfunFrom" >Not</span><span class="index">Not</span><a name="chapter-9-44"/><span class="index">SingleInteger</span><a name="chapter-9-45"/>
provide bit level operations on small integers.
</p>




<div id="spadComm9-45" class="spadComm" >
<form id="formComm9-45" action="javascript:makeRequest('9-45');" >
<input id="comm9-45" type="text" class="command" style="width: 15em;" value="And(3,4)$SingleInteger" />
</form>
<span id="commSav9-45" class="commSav" >And(3,4)$SingleInteger</span>
<div id="mathAns9-45" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>0</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SingleInteger
</div>



<p>Use <span class="teletype">shift(int,numToShift)</span> to shift bits, where <span class="teletype">i</span> is
shifted left if <span class="teletype">numToShift</span> is positive, right if negative.
</p>




<div id="spadComm9-46" class="spadComm" >
<form id="formComm9-46" action="javascript:makeRequest('9-46');" >
<input id="comm9-46" type="text" class="command" style="width: 16em;" value="shift(1,4)$SingleInteger" />
</form>
<span id="commSav9-46" class="commSav" >shift(1,4)$SingleInteger</span>
<div id="mathAns9-46" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>16</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SingleInteger
</div>





<div id="spadComm9-47" class="spadComm" >
<form id="formComm9-47" action="javascript:makeRequest('9-47');" >
<input id="comm9-47" type="text" class="command" style="width: 18em;" value="shift(31,-1)$SingleInteger" />
</form>
<span id="commSav9-47" class="commSav" >shift(31,-1)$SingleInteger</span>
<div id="mathAns9-47" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>15</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: SingleInteger
</div>



<p>Many other operations are available for small integers, including many
of those provided for <span class="teletype">Integer</span>.  To see the other operations, use
the Browse HyperDoc facility (<a href="ugBrowsePage" class="ref" >ugBrowsePage</a>  in Section
<a href="ugBrowseNumber" class="ref" >ugBrowseNumber</a> ).
</p>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-9.71.xhtml" style="margin-right: 10px;">Previous Section 9.71 Set</a><a href="section-9.73.xhtml" style="margin-right: 10px;">Next Section 9.73 SparseTable</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>