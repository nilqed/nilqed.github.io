<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section11.4</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-11.3.xhtml" style="margin-right: 10px;">Previous Section 11.3 Abstract Datatypes</a><a href="section-11.5.xhtml" style="margin-right: 10px;">Next Section 11.5 Input Files vs. Packages</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-11.4">
<h2 class="sectiontitle">11.4  Capsules</h2>


<a name="ugPackagesCapsules" class="label"/>



<p>The part to the right of <span class="teletype">add</span> in the <span class="teletype">Implementation</span>
<span class="index">add</span><a name="chapter-11-10"/>
part of the definition is called a <span class="italic">capsule</span>.
The purpose of a capsule is:
</p>



<ul>
<li>
 to define a function for each exported operation, and
</li>
<li> to define a <span class="italic">local environment</span> for these functions to run.
</li>
</ul>



<p>What is a local environment?
First, what is an environment?
<span class="index">environment</span><a name="chapter-11-11"/>
Think of the capsule as an input file that FriCAS reads from top to
bottom.
Think of the input file as having a <span style="font-weight: bold;"> )clear all</span> at the top
so that initially no variables or functions are defined.
When this file is read, variables such as <math xmlns="&mathml;" mathsize="big"><mstyle><mi>realSteps</mi></mstyle></math> and
<math xmlns="&mathml;" mathsize="big"><mstyle><mi>arrowSize</mi></mstyle></math> in <span class="teletype">DrawComplex</span> are set to initial values.
Also, all the functions defined in the capsule are compiled.
These include those that are exported (like <math xmlns="&mathml;" mathsize="big"><mstyle><mi>drawComplex</mi></mstyle></math>), and
those that are not (like <math xmlns="&mathml;" mathsize="big"><mstyle><mi>makeArrow</mi></mstyle></math>).
At the end, you get a set of name-value pairs:
variable names (like <math xmlns="&mathml;" mathsize="big"><mstyle><mi>realSteps</mi></mstyle></math> and <math xmlns="&mathml;" mathsize="big"><mstyle><mi>arrowSize</mi></mstyle></math>)
are paired with assigned values, while
operation names (like <math xmlns="&mathml;" mathsize="big"><mstyle><mi>drawComplex</mi></mstyle></math> and <math xmlns="&mathml;" mathsize="big"><mstyle><mi>makeArrow</mi></mstyle></math>)
are paired with function values.
</p>


<p>This set of name-value pairs is called an <span class="italic">environment</span>.
Actually, we call this environment the <span class="italic">initial environment</span> of a package:
it is the environment that exists immediately after the package is
first built.
Afterwards, functions of this capsule can
access or reset a variable in the environment.
The environment is called <span class="italic">local</span> since any changes to the value of a
variable in this environment can be seen <span class="italic">only</span> by these functions.
</p>


<p>Only the functions from the package can change the variables in the local
environment.
When two functions are called successively from a package,
any changes caused by the first function called
are seen by the second.
</p>


<p>Since the environment is local to the package, its names
don't get mixed
up with others in the system or your workspace.
If you happen to have a variable called <math xmlns="&mathml;" mathsize="big"><mstyle><mi>realSteps</mi></mstyle></math> in your
workspace, it does not affect what the
<span class="teletype">DrawComplex</span> functions do in any way.
</p>


<p>The functions in a package are compiled into machine code.
Unlike function definitions in input files that may be compiled repeatedly
as you use them with varying argument types,
functions in packages have a unique type (generally parameterized by
the argument parameters of a package) and a unique compilation residing on disk.
</p>


<p>The capsule itself is turned into a compiled function.
This so-called <span class="italic">capsule function</span> is what builds the initial environment
spoken of above.
If the package has arguments (see below), then each call to the package
constructor with a distinct pair of arguments
builds a distinct package, each with its own local environment.
</p>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-11.3.xhtml" style="margin-right: 10px;">Previous Section 11.3 Abstract Datatypes</a><a href="section-11.5.xhtml" style="margin-right: 10px;">Next Section 11.5 Input Files vs. Packages</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>