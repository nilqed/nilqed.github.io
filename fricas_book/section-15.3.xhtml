<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section15.3</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-15.2.xhtml" style="margin-right: 10px;">Previous Section 15.2 The New FriCAS Library Compiler</a><a href="section-15.4.xhtml" style="margin-right: 10px;">Next Section 15.4 Interactive Front-end and Language</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-15.3">
<h2 class="sectiontitle">15.3  The NAG Library Link</h2>


<p><span class="index">nagLinkIntro</span><a name="chapter-15-2"/>
</p>



<p>The Nag Library link allows you to call NAG Fortran
routines from within FriCAS, passing FriCAS objects as parameters
and getting them back as results.
</p>


<p>The Nag Library and, consequently, the link are divided into <span class="em">chapters</span>,
which cover different areas of numerical analysis.  The statistical
and sorting <span class="em">chapters</span> of the Library, however, are not included in the
link and various support and utility routines (mainly the F06 and X
<span class="em">chapters</span>) have been omitted.
</p>


<p>Each <span class="em">chapter</span> has a short (at most three-letter) name;
for example, the <span class="em">chapter</span> devoted to the
solution of ordinary differential equations is called D02.  When
using the link via the HyperDoc interface.
you will be presented with a complete menu of these <span class="em">chapters</span>. The
names of individual routines within each <span class="em">chapter</span> are formed by
adding three letters to the <span class="em">chapter</span> name, so for example the routine
for solving ODEs by Adams method is called
<span class="spadfunFrom" >d02cjf</span><span class="index">d02cjf</span><a name="chapter-15-3"/><span class="index">NagOrdinaryDifferentialEquationsPackage</span><a name="chapter-15-4"/>.
</p>




<a name="subsec-15.3.1"/>
<div class="subsection"  id="subsec-15.3.1">
<h3 class="subsectitle">15.3.1  Interpreting NAG Documentation</h3>


<p><span class="index">nagDocumentation</span><a name="chapter-15-5"/>
</p>



<p>Information about using the Nag Library in general, and about using
individual routines in particular, can be accessed via HyperDoc.
This documentation refers to the Fortran routines directly; the
purpose of this subsection is to explain how this corresponds to the
FriCAS routines.
</p>


<p>For general information about the Nag Library users should consult
Essential Introduction to the NAG Foundation Library
<span class="index">manpageXXintro</span><a name="chapter-15-6"/>.
The documentation is in ASCII format, and a description of the conventions
used to represent mathematical symbols is given in
Introduction to NAG On-Line Documentation
<span class="index">manpageXXonline</span><a name="chapter-15-7"/>.
Advice about choosing a routine from a particular <span class="em">chapter</span> can be found in
the Chapter Documents <span class="index">FoundationLibraryDocPage</span><a name="chapter-15-8"/>.
</p>




<a name="subsubsec-15.3.1.1"/>
<div class="subsubsection"  id="subsubsec-15.3.1.1">
<h3 class="subsubsectitle">15.3.1.1  Correspondence Between Fortran and FriCAS types</h3>




<p>The NAG documentation refers to the Fortran types of objects; in
general, the correspondence to FriCAS types is as follows.
</p>



<ul>
<li>
 Fortran INTEGER corresponds to FriCAS <span class="teletype">Integer</span>.
</li>
<li> Fortran DOUBLE PRECISION corresponds to FriCAS <span class="teletype">DoubleFloat</span>.
</li>
<li> Fortran COMPLEX corresponds to FriCAS <span class="teletype">Complex DoubleFloat</span>.
</li>
<li> Fortran LOGICAL corresponds to FriCAS <span class="teletype">Boolean</span>.
</li>
<li> Fortran CHARACTER*(*) corresponds to FriCAS <span class="teletype">String</span>.
</li>
</ul>


<p>(Exceptionally, for NAG EXTERNAL parameters -- ASPs in link parlance
-- REAL and COMPLEX correspond to <span class="teletype">MachineFloat</span> and <span class="teletype">MachineComplex</span>,
respectively; see <a href="aspSection" class="ref" >aspSection</a> .)
</p>


<p>The correspondence for aggregates is as follows.
</p>



<ul>
<li>
 A one-dimensional Fortran array corresponds to an FriCAS 
      <span class="teletype">Matrix</span> with one column.
</li>
<li> A two-dimensional Fortran ARRAY corresponds to an FriCAS 
      <span class="teletype">Matrix</span>.
</li>
<li> A three-dimensional Fortran ARRAY corresponds to an FriCAS 
      <span class="teletype">ThreeDimensionalMatrix</span>.
</li>
</ul>


<p>Higher-dimensional arrays are not currently needed for the Nag Library.
</p>


<p>Arguments which are Fortran FUNCTIONs or SUBROUTINEs correspond
to special ASP domains in FriCAS. See <a href="aspSection" class="ref" >aspSection</a> .
</p>





</div>



<a name="subsubsec-15.3.1.2"/>
<div class="subsubsection"  id="subsubsec-15.3.1.2">
<h3 class="subsubsectitle">15.3.1.2  Classification of NAG parameters</h3>




<p>NAG parameters are classified as belonging to one (or more)
of the following categories: <span class="teletype">Input</span>, <span class="teletype">Output</span>, <span class="teletype">Workspace</span> or <span class="teletype">External</span> procedure.
Within <span class="teletype">External</span> procedures a similar classification is used, and parameters
may also be <span class="teletype">Dummies</span>, or <span class="teletype">User Workspace</span> (data structures not used by the
NAG routine but provided for the convenience of the user).
</p>


<p>When calling a NAG routine via the link the user only provides values
for <span class="teletype">Input</span> and <span class="teletype">External</span> parameters.
</p>


<p>The order of the parameters is, in general, different from  the order
specified in the Nag Library documentation. The Browser description
for each routine helps in determining the correspondence. As a rule of
thumb, <span class="teletype">Input</span> parameters come first followed by <span class="teletype">Input/Output</span>
parameters. The <span class="teletype">External</span> parameters are always found at the end.
</p>






</div>



<a name="subsubsec-15.3.1.3"/>
<div class="subsubsection"  id="subsubsec-15.3.1.3">
<h3 class="subsubsectitle">15.3.1.3  IFAIL</h3>




<p>NAG routines often return diagnostic information through a parameter called
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>ifail</mi></mstyle></math>.  With a few exceptions, the principle is that on input
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>ifail</mi></mstyle></math> takes
one of the values  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>-</mo><mn>1</mn><mo>,</mo><mn>0</mn><mo>,</mo><mn>1</mn></mrow></mstyle></math>.  This determines how the routine behaves when
it encounters an error:
</p>



<ul>
<li>
 a value of 1 causes the NAG routine to return without printing an error
message;
</li>
<li> a value of 0 causes the NAG routine to print an error message and abort;
</li>
<li> a value of -1 causes the NAG routine to return and print an error message.
</li>
</ul>



<p>The user is STRONGLY ADVISED to set  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>ifail</mi></mstyle></math> to  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>-</mo><mn>1</mn></mrow></mstyle></math> when using the link.
If  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>ifail</mi></mstyle></math> has been set to  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math> or  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>-</mo><mn>1</mn></mrow></mstyle></math> on input, then its value on output
will determine the possible cause of any error.  A value of  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>0</mn></mstyle></math> indicates
successful completion, otherwise it provides an index into a table of
diagnostics provided as part of the routine documentation (accessible via
Browse).
</p>





</div>




</div>



<a name="subsec-15.3.2"/>
<div class="subsection"  id="subsec-15.3.2">
<h3 class="subsectitle">15.3.2  Using the Link</h3>


<p><span class="index">nagLinkUsage</span><a name="chapter-15-9"/>
</p>



<p>The easiest way to use the link is via the
HyperDoc interface <span class="index">htxl1</span><a name="chapter-15-10"/>.
You will be presented with a set of fill-in forms where
you can specify the parameters for each call.  Initially, the forms
contain example values, demonstrating the use of each routine (these,
in fact, correspond to the standard NAG example program for the
routine in question).  For some parameters, these values can provide
reasonable defaults; others, of course, represent data.  When you
change a parameter which controls the size of an array, the data in
that array are reset to a <span class="italic">neutral</span> value -- usually zero.
</p>


<p>When you are satisfied with the values entered, clicking on the
<span class="italic">Continue</span> button will display the FriCAS command needed to
run the chosen NAG routine with these values.  Clicking on the
<span class="italic">Do It</span> button will then cause FriCAS to execute this command
and return the result in the parent FriCAS session, as described
below.  Note that, for some routines, multiple HyperDoc <span class="italic">pages</span> are
required, due to the structure of the data.  For these, returning to
an earlier page causes HyperDoc to reset the later pages (this is a
general feature of HyperDoc); in such a case, the simplest way to
repeat a call, varying a parameter on an earlier page, is probably to
modify the call displayed in the parent session.
</p>


<p>An alternative approach is to call NAG routines directly in your
normal FriCAS session (that is, using the FriCAS
interpreter).  Such calls return an
object of type <span style="font-weight: bold;"> Result</span>.  As not
all parameters in the underlying NAG routine are required in the
AXIOM call (and the parameter ordering may be different), before
calling a NAG routine you should consult the description of the
FriCAS operation in the Browser.  (The quickest route to this
is to type the routine name, in lower case, into the Browser's
input area, then click on <span class="teletype">Operations</span>.)  The parameter names
used coincide with NAG's, although they will appear here in lower
case.  Of course, it is also possible to become familiar with the
FriCAS form of a routine by first using it through the
HyperDoc interface <span class="index">htxl1</span><a name="chapter-15-11"/>.
</p>


<p>As an example of this mode of working, we can find a zero
of a function, lying between 3 and 4, as follows:
</p>




<div id="spadComm15-1" class="spadComm" >
<form id="formComm15-1" action="javascript:makeRequest('15-1');" >
<input id="comm15-1" type="text" class="command" style="width: 36em;" value="answer:=c05adf(3.0,4.0,1.0e-5,0.0,-1,sin(X)::ASP1(F)) " />
</form>
<span id="commSav15-1" class="commSav" >answer:=c05adf(3.0,4.0,1.0e-5,0.0,-1,sin(X)::ASP1(F)) </span>
<div id="mathAns15-1" ></div>
</div>



<p>By default, <span style="font-weight: bold;"> Result</span> only displays the type of returned values,
since the amount of information returned can be quite large.  Individual
components can be examined as follows:
</p>




<div id="spadComm15-2" class="spadComm" >
<form id="formComm15-2" action="javascript:makeRequest('15-2');" >
<input id="comm15-2" type="text" class="command" style="width: 7em;" value="answer . x" />
</form>
<span id="commSav15-2" class="commSav" >answer . x</span>
<div id="mathAns15-2" ></div>
</div>





<div id="spadComm15-3" class="spadComm" >
<form id="formComm15-3" action="javascript:makeRequest('15-3');" >
<input id="comm15-3" type="text" class="command" style="width: 10em;" value="answer . ifail" />
</form>
<span id="commSav15-3" class="commSav" >answer . ifail</span>
<div id="mathAns15-3" ></div>
</div>



<p>In order to avoid conflict with names defined in the workspace, you can also
get the values by using the <span class="teletype">String</span> type (the interpreter automatically
coerces them to <span class="teletype">Symbol</span>)
</p>




<div id="spadComm15-4" class="spadComm" >
<form id="formComm15-4" action="javascript:makeRequest('15-4');" >
<input id="comm15-4" type="text" class="command" style="width: 7em;" value='answer "x"' />
</form>
<span id="commSav15-4" class="commSav" >answer "x"</span>
<div id="mathAns15-4" ></div>
</div>



<p>It is possible to have FriCAS display the values of scalar or array
results automatically.  For more details, see the commands  
<span class="spadfunFrom" >showScalarValues</span><span class="index">showScalarValues</span><a name="chapter-15-12"/><span class="index">Result</span><a name="chapter-15-13"/>
and <span class="spadfunFrom" >showArrayValues</span><span class="index">showArrayValues</span><a name="chapter-15-14"/><span class="index">Result</span><a name="chapter-15-15"/>.
</p>


<p>There is also a <span style="font-weight: bold;"> .input</span> file for each NAG routine, containing
FriCAS interpreter commands to set up and run the standard NAG
example for that routine.
</p>




<div id="spadComm15-5" class="spadComm" >
<form id="formComm15-5" action="javascript:makeRequest('15-5');" >
<input id="comm15-5" type="text" class="command" style="width: 12em;" value=")read c05adf.input" />
</form>
<span id="commSav15-5" class="commSav" >)read c05adf.input</span>
<div id="mathAns15-5" ></div>
</div>






</div>



<a name="subsec-15.3.3"/>
<div class="subsection"  id="subsec-15.3.3">
<h3 class="subsectitle">15.3.3  Providing values for Argument Subprograms</h3>


<p><span class="index">aspSection</span><a name="chapter-15-16"/>
</p>



<p>There are a number of ways in which users can provide values for argument
subprograms (ASPs).  At the top level the user will see that NAG routines
require
an object from the <span class="teletype">Union</span> of a <span class="teletype">Filename</span> and an ASP.
</p>


<p>For example <span style="font-weight: bold;"> c05adf</span> requires an object of type 
<span class="teletype">Union</span>(fn: <span class="teletype">FileName</span>,fp: <span class="teletype">Asp1 F</span>)
</p>




<div id="spadComm15-6" class="spadComm" >
<form id="formComm15-6" action="javascript:makeRequest('15-6');" >
<input id="comm15-6" type="text" class="command" style="width: 17em;" value=")display operation c05adf" />
</form>
<span id="commSav15-6" class="commSav" >)display operation c05adf</span>
<div id="mathAns15-6" ></div>
</div>




<p>The user thus has a choice of providing the name of a file containing
Fortran source code, or of somehow generating the ASP within FriCAS.
If a filename is specified, it is searched for in the <span class="italic">local</span> 
machine, i.e., the machine that FriCAS is running on.
</p>




<a name="subsubsec-15.3.3.1"/>
<div class="subsubsection"  id="subsubsec-15.3.3.1">
<h3 class="subsubsectitle">15.3.3.1  Providing ASPs via <span class="teletype">FortranExpression</span></h3>




<p>The <span class="teletype">FortranExpression</span> domain is used to represent expressions
which can be translated into Fortran under certain circumstances.    It is
very similar to <span class="teletype">Expression</span> except that only operators which exist
in Fortran can be used, and only certain variables can occur.
For
example the instantiation <span class="teletype">FortranExpression([X],[M],MachineFloat)</span>
is the domain of expressions containing the scalar  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>X</mi></mstyle></math> and the array
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>M</mi></mstyle></math>.
</p>


<p>This allows us to create expressions like:
</p>




<div id="spadComm15-7" class="spadComm" >
<form id="formComm15-7" action="javascript:makeRequest('15-7');" >
<input id="comm15-7" type="text" class="command" style="width: 40em;" value="f : FortranExpression([X],[M],MachineFloat) := sin(X)+M[3,1]" />
</form>
<span id="commSav15-7" class="commSav" >f : FortranExpression([X],[M],MachineFloat) := sin(X)+M[3,1]</span>
<div id="mathAns15-7" ></div>
</div>



<p>but not
</p>




<div id="spadComm15-8" class="spadComm" >
<form id="formComm15-8" action="javascript:makeRequest('15-8');" >
<input id="comm15-8" type="text" class="command" style="width: 37em;" value="f : FortranExpression([X],[M],MachineFloat) := sin(M)+Y" />
</form>
<span id="commSav15-8" class="commSav" >f : FortranExpression([X],[M],MachineFloat) := sin(M)+Y</span>
<div id="mathAns15-8" ></div>
</div>



<p>Those ASPs which represent expressions usually export a <span style="font-weight: bold;"> coerce</span> from
an appropriate instantiation of <span class="teletype">FortranExpression</span> (or perhaps
<span class="teletype">Vector FortranExpression</span> etc.).  For convenience there are also
retractions from appropriate instantiations of <span class="teletype">Expression</span>,
<span class="teletype">Polynomial</span> and <span class="teletype">Fraction Polynomial</span>.
</p>





</div>



<a name="subsubsec-15.3.3.2"/>
<div class="subsubsection"  id="subsubsec-15.3.3.2">
<h3 class="subsubsectitle">15.3.3.2  Providing ASPs via <span class="teletype">FortranCode</span></h3>




<p><span class="index">FortranCode</span><a name="chapter-15-17"/>
<span class="teletype">FortranCode</span> allows us to build arbitrarily complex ASPs via a
kind of pseudo-code.  It is described fully in
<a href="generalFortran" class="ref" >generalFortran</a> .
</p>


<p>Every ASP exports two <span style="font-weight: bold;"> coerce</span> functions: one from
<span class="teletype">FortranCode</span> and one from <span class="teletype">List FortranCode</span>.  There
is also a <span style="font-weight: bold;"> coerce</span> from 
<span class="teletype">Record( localSymbols: SymbolTable, code: List FortranCode)</span>
which is used for passing extra symbol information about the ASP.
</p>


<p>So for example, to integrate the function abs(x) we could use the built-in
<span style="font-weight: bold;"> abs</span> function.  But suppose we want to get back to basics and define
it directly, then we could do the following:
</p>




<div id="spadComm15-9" class="spadComm" >
<form id="formComm15-9" action="javascript:makeRequest('15-9');" >
<input id="comm15-9" type="text" class="command" style="width: 63em;" value="d01ajf(-1.0, 1.0, 0.0, 1.0e-5, 800, 200, -1, cond(LT(X,0), assign(F,-X), assign(F,X))) result " />
</form>
<span id="commSav15-9" class="commSav" >d01ajf(-1.0, 1.0, 0.0, 1.0e-5, 800, 200, -1, cond(LT(X,0), assign(F,-X), assign(F,X))) result </span>
<div id="mathAns15-9" ></div>
</div>



<p>The <span class="spadfunFrom" >cond</span><span class="index">cond</span><a name="chapter-15-18"/><span class="index">FortranCode</span><a name="chapter-15-19"/> operation creates a conditional clause
and the <span class="spadfunFrom" >assign</span><span class="index">assign</span><a name="chapter-15-20"/><span class="index">FortranCode</span><a name="chapter-15-21"/> an assignment statement.
</p>





</div>



<a name="subsubsec-15.3.3.3"/>
<div class="subsubsection"  id="subsubsec-15.3.3.3">
<h3 class="subsubsectitle">15.3.3.3  Providing ASPs via <span class="teletype">FileName</span></h3>




<p>Suppose we have created the file <span class="italic">asp.f</span> as follows:
</p>



<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DOUBLE&nbsp;PRECISION&nbsp;FUNCTION&nbsp;F(X)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DOUBLE&nbsp;PRECISION&nbsp;X<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;F=4.0D0/(X*X+1.0D0)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RETURN<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;END<br />
</div>


<p>and wish to pass it to the NAG
routine <span style="font-weight: bold;"> d01ajf</span> which performs one-dimensional quadrature.
We can do this as follows:
</p>



<div class="verbatim"><br />
d01ajf(0.0&nbsp;,1.0,&nbsp;0.0,&nbsp;1.0e-5,&nbsp;800,&nbsp;200,&nbsp;-1,&nbsp;"asp.f")<br />
</div>






</div>




</div>



<a name="subsec-15.3.4"/>
<div class="subsection"  id="subsec-15.3.4">
<h3 class="subsectitle">15.3.4  General Fortran-generation utilities in FriCAS</h3>


<p><span class="index">generalFortran</span><a name="chapter-15-22"/>
</p>



<p>This section describes more advanced facilities which are available to users
who wish to generate Fortran code from within FriCAS.  There are
facilities to manipulate templates, store type information, and generate
code fragments or complete programs.
</p>




<a name="subsubsec-15.3.4.1"/>
<div class="subsubsection"  id="subsubsec-15.3.4.1">
<h3 class="subsubsectitle">15.3.4.1  Template Manipulation</h3>




<p>A template is a skeletal program which is <span class="italic">fleshed out</span> with data when
it is processed.  It is a sequence of <span class="em">active</span> and <span class="em">passive</span> parts:
active parts are sequences of FriCAS commands which are processed as if they
had been typed into the interpreter; passive parts are simply echoed
verbatim on the Fortran output stream.
</p>


<p>Suppose, for example, that we have the following template, stored in
the file <span class="italic">test.tem</span>:
</p>



<div class="verbatim"><br />
--&nbsp;A&nbsp;simple&nbsp;template<br />
beginVerbatim<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DOUBLE&nbsp;PRECISION&nbsp;FUNCTION&nbsp;F(X)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DOUBLE&nbsp;PRECISION&nbsp;X<br />
endVerbatim<br />
outputAsFortran("F",f)<br />
beginVerbatim<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RETURN<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;END<br />
endVerbatim<br />
</div>


<p>The passive parts lie between the two
tokens <span class="teletype">beginVerbatim</span> and  <span class="teletype">endVerbatim</span>.  There
are two active statements: one which is simply an FriCAS (
\verb+--+)
comment, and one which produces an assignment to the current value
of <span class="teletype">f</span>.  We could use it as follows:
</p>



<div class="verbatim"><br />
(4)&nbsp;-&gt;f&nbsp;:=&nbsp;4.0/(1+X^2)<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4<br />
&nbsp;&nbsp;&nbsp;(4)&nbsp;&nbsp;&nbsp;------<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X&nbsp;&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
(5)&nbsp;-&gt;processTemplate&nbsp;"test.tem"<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DOUBLE&nbsp;PRECISION&nbsp;FUNCTION&nbsp;F(X)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DOUBLE&nbsp;PRECISION&nbsp;X<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;F=4.0D0/(X*X+1.0D0)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RETURN&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;END<br />
<br />
&nbsp;&nbsp;&nbsp;(5)&nbsp;&nbsp;"CONSOLE"<br />
</div>



<p>(A more reliable method of specifying the filename will be introduced
below.)  Note that the Fortran assignment <span class="teletype">F=4.0D0/(X*X+1.0D0)</span>
automatically converted 4.0 and 1 into DOUBLE PRECISION numbers; in
general, the FriCAS Fortran generation facility will convert
anything which should be a floating point object into either
a Fortran REAL or DOUBLE PRECISION object.
</p>


<p>Which alternative is used is determined by the command
</p>




<div id="spadComm15-10" class="spadComm" >
<form id="formComm15-10" action="javascript:makeRequest('15-10');" >
<input id="comm15-10" type="text" class="command" style="width: 15em;" value=")set fortran precision" />
</form>
<span id="commSav15-10" class="commSav" >)set fortran precision</span>
<div id="mathAns15-10" ></div>
</div>



<p>It is sometimes useful to end a template before the file itself ends (e.g. to
allow the template to be tested incrementally or so that a piece of text
describing how the template works can be included).  It is of course possible
to <span class="italic">comment-out</span> the remainder of the file.  Alternatively, the single token
<span class="teletype">endInput</span> as part of an active portion of the template will cause
processing to be ended prematurely at that point.
</p>


<p>The <span style="font-weight: bold;"> processTemplate</span> command comes in two flavours.  In the first case,
illustrated above, it takes one argument of domain <span class="teletype">FileName</span>,
the name of the template to be processed, and writes its output on the
current Fortran output stream.  In general, a filename can be generated
from <span class="em">directory</span>, <span class="em">name</span> and <span class="em">extension</span> components, using
the operation <span style="font-weight: bold;"> filename</span>, as in
</p>



<div class="verbatim"><br />
processTemplate&nbsp;filename("","test","tem")<br />
</div>


<p>There is an alternative version of <span style="font-weight: bold;"> processTemplate</span>, which
takes two arguments (both of domain <span class="teletype">FileName</span>).  In this case the
first argument is the name of the template to be processed, and the
second is the file in which to write the results.  Both versions return
the location of the generated Fortran code as their result
(<span class="italic"><span class="teletype">CONSOLE</span></span> in the above example).
</p>


<p>It is sometimes useful to be able to mix active and passive parts of a
line or statement.  For example you might want to generate a Fortran
Comment describing your data set.  For this kind of application we
provide three functions as follows:
<table class="begintabular">
<tr><td><span style="font-weight: bold;"> fortranLiteral</span> </td><td> writes a string on the Fortran output stream </td></tr>
<tr><td> </td><td> </td></tr>
<tr><td><span style="font-weight: bold;"> fortranCarriageReturn</span> </td><td> writes a carriage return on the Fortran output stream </td></tr>
<tr><td></td><td> </td></tr>
<tr><td><span style="font-weight: bold;"> fortranLiteralLine</span> </td><td> writes a string followed by a return
on the Fortran output stream </td></tr>
</table>
</p>


<p>So we could create our comment as follows:
</p>



<div id="spadComm15-11" class="spadComm" >
<form id="formComm15-11" action="javascript:makeRequest('15-11');" >
<input id="comm15-11" type="text" class="command" style="width: 21em;" value="m := matrix [ [1,2,3],[4,5,6] ]" />
</form>
<span id="commSav15-11" class="commSav" >m := matrix [ [1,2,3],[4,5,6] ]</span>
<div id="mathAns15-11" ></div>
</div>





<div id="spadComm15-12" class="spadComm" >
<form id="formComm15-12" action="javascript:makeRequest('15-12');" >
<input id="comm15-12" type="text" class="command" style="width: 120em;" value='fortranLiteralLine concat ["C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;Matrix&nbsp;has&nbsp;", nrows(m)::String, "&nbsp;rows&nbsp;and&nbsp;", ncols(m)::String, "&nbsp;columns"]' />
</form>
<span id="commSav15-12" class="commSav" >fortranLiteralLine concat ["C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;Matrix&nbsp;has&nbsp;", nrows(m)::String, "&nbsp;rows&nbsp;and&nbsp;", ncols(m)::String, "&nbsp;columns"]</span>
<div id="mathAns15-12" ></div>
</div>



<p>or, alternatively:
</p>



<div id="spadComm15-13" class="spadComm" >
<form id="formComm15-13" action="javascript:makeRequest('15-13');" >
<input id="comm15-13" type="text" class="command" style="width: 56em;" value='fortranLiteral "C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;Matrix&nbsp;has&nbsp;"' />
</form>
<span id="commSav15-13" class="commSav" >fortranLiteral "C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;Matrix&nbsp;has&nbsp;"</span>
<div id="mathAns15-13" ></div>
</div>





<div id="spadComm15-14" class="spadComm" >
<form id="formComm15-14" action="javascript:makeRequest('15-14');" >
<input id="comm15-14" type="text" class="command" style="width: 22em;" value="fortranLiteral(nrows(m)::String)" />
</form>
<span id="commSav15-14" class="commSav" >fortranLiteral(nrows(m)::String)</span>
<div id="mathAns15-14" ></div>
</div>





<div id="spadComm15-15" class="spadComm" >
<form id="formComm15-15" action="javascript:makeRequest('15-15');" >
<input id="comm15-15" type="text" class="command" style="width: 28em;" value='fortranLiteral "&nbsp;rows&nbsp;and&nbsp;"' />
</form>
<span id="commSav15-15" class="commSav" >fortranLiteral "&nbsp;rows&nbsp;and&nbsp;"</span>
<div id="mathAns15-15" ></div>
</div>





<div id="spadComm15-16" class="spadComm" >
<form id="formComm15-16" action="javascript:makeRequest('15-16');" >
<input id="comm15-16" type="text" class="command" style="width: 22em;" value="fortranLiteral(ncols(m)::String)" />
</form>
<span id="commSav15-16" class="commSav" >fortranLiteral(ncols(m)::String)</span>
<div id="mathAns15-16" ></div>
</div>





<div id="spadComm15-17" class="spadComm" >
<form id="formComm15-17" action="javascript:makeRequest('15-17');" >
<input id="comm15-17" type="text" class="command" style="width: 20em;" value='fortranLiteral "&nbsp;columns"' />
</form>
<span id="commSav15-17" class="commSav" >fortranLiteral "&nbsp;columns"</span>
<div id="mathAns15-17" ></div>
</div>





<div id="spadComm15-18" class="spadComm" >
<form id="formComm15-18" action="javascript:makeRequest('15-18');" >
<input id="comm15-18" type="text" class="command" style="width: 16em;" value="fortranCarriageReturn()" />
</form>
<span id="commSav15-18" class="commSav" >fortranCarriageReturn()</span>
<div id="mathAns15-18" ></div>
</div>



<p>We should stress that these functions, together with the <span style="font-weight: bold;"> outputAsFortran</span>
function are the <span class="em">only</span> sure ways
of getting output to appear on the Fortran output stream.  Attempts to use
FriCAS commands such as <span style="font-weight: bold;"> output</span> or <span style="font-weight: bold;"> writeline</span> may appear to give
the required result when displayed on the console, but will give the wrong
result when Fortran and algebraic output are sent to differing locations.  On
the other hand, these functions can be used to send helpful messages to the
user, without interfering with the generated Fortran.
</p>





</div>



<a name="subsubsec-15.3.4.2"/>
<div class="subsubsection"  id="subsubsec-15.3.4.2">
<h3 class="subsubsectitle">15.3.4.2  Manipulating the Fortran Output Stream</h3>



<p><span class="index">FortranOutputStackPackage</span><a name="chapter-15-23"/>
</p>


<p>Sometimes it is useful to manipulate the Fortran output stream in a program,
possibly without being aware of its current value.  The main use of this is
for gathering type declarations (see <span class="italic">Fortran Types</span> below) but it can be useful
in other contexts as well.  Thus we provide a set of commands to manipulate
a stack of (open) output streams.  Only one stream can be written to at
any given time.  The stack is never empty---its initial value is the
console or the current value of the Fortran output stream, and can be
determined using
</p>




<div id="spadComm15-19" class="spadComm" >
<form id="formComm15-19" action="javascript:makeRequest('15-19');" >
<input id="comm15-19" type="text" class="command" style="width: 16em;" value="topFortranOutputStack()" />
</form>
<span id="commSav15-19" class="commSav" >topFortranOutputStack()</span>
<div id="mathAns15-19" ></div>
</div>



<p>(see below).
The commands available to manipulate the stack are:
</p>


<p><table class="begintabular">
<tr><td><span style="font-weight: bold;"> clearFortranOutputStack</span> </td><td> resets the stack to the console </td></tr>
<tr><td> </td><td> </td></tr>
<tr><td><span style="font-weight: bold;"> pushFortranOutputStack</span> </td><td> pushes a <span class="teletype">FileName</span> onto the stack </td></tr>
<tr><td> </td><td> </td></tr>
<tr><td><span style="font-weight: bold;"> popFortranOutputStack</span> </td><td> pops the stack </td></tr>
<tr><td> </td><td> </td></tr>
<tr><td><span style="font-weight: bold;"> showFortranOutputStack</span> </td><td> returns the current stack </td></tr>
<tr><td> </td><td> </td></tr>
<tr><td><span style="font-weight: bold;"> topFortranOutputStack</span> </td><td> returns the top element of the stack </td></tr>
</table>
</p>


<p>These commands are all part of <span class="teletype">FortranOutputStackPackage</span>.
</p>





</div>



<a name="subsubsec-15.3.4.3"/>
<div class="subsubsection"  id="subsubsec-15.3.4.3">
<h3 class="subsubsectitle">15.3.4.3  Fortran Types</h3>




<p>When generating code it is important to keep track of the Fortran types of
the objects which we are generating.  This is useful for a number of reasons,
not least to ensure that we are actually generating legal Fortran code.  The
current type system is built up in several layers, and we shall describe each
in turn.
</p>





</div>



<a name="subsubsec-15.3.4.4"/>
<div class="subsubsection"  id="subsubsec-15.3.4.4">
<h3 class="subsubsectitle">15.3.4.4  FortranScalarType</h3>



<p><span class="index">FortranScalarType</span><a name="chapter-15-24"/>
</p>


<p>This domain represents the simple Fortran datatypes: REAL, DOUBLE PRECISION,
COMPLEX, LOGICAL, INTEGER, and CHARACTER.
It is possible to <span style="font-weight: bold;"> coerce</span> a <span class="teletype">String</span> or <span class="teletype">Symbol</span>
into the domain, test whether two objects are equal, and also apply
the predicate functions <span class="spadfunFrom" >real?</span><span class="index">real?</span><a name="chapter-15-25"/><span class="index">FortranScalarType</span><a name="chapter-15-26"/> etc.
</p>





</div>



<a name="subsubsec-15.3.4.5"/>
<div class="subsubsection"  id="subsubsec-15.3.4.5">
<h3 class="subsubsectitle">15.3.4.5  FortranType</h3>



<p><span class="index">FortranType</span><a name="chapter-15-27"/>
</p>


<p>This domain represents <span class="italic">full</span> types: i.e., datatype plus array dimensions
(where appropriate) plus whether or not the parameter is an external
subprogram.  It is possible to <span style="font-weight: bold;"> coerce</span> an object of
<span class="teletype">FortranScalarType</span> into the domain or <span style="font-weight: bold;"> construct</span> one
from an element of <span class="teletype">FortranScalarType</span>, a list of
<span class="teletype">Polynomial Integer</span>s (which can of course be simple integers or
symbols) representing its dimensions, and
a <span class="teletype">Boolean</span> declaring whether it is external or not.  The list
of dimensions must be empty if the <span class="teletype">Boolean</span> is <span class="teletype">true</span>.
The functions <span style="font-weight: bold;"> scalarTypeOf</span>, <span style="font-weight: bold;"> dimensionsOf</span> and
<span style="font-weight: bold;"> external?</span> return the appropriate
parts, and it is possible to get the various basic Fortran Types via
functions like <span style="font-weight: bold;"> fortranReal</span>.
</p>


<p>For example:
</p>



<div id="spadComm15-20" class="spadComm" >
<form id="formComm15-20" action="javascript:makeRequest('15-20');" >
<input id="comm15-20" type="text" class="command" style="width: 31em;" value="type:=construct(real,[i,10],false)$FortranType" />
</form>
<span id="commSav15-20" class="commSav" >type:=construct(real,[i,10],false)$FortranType</span>
<div id="mathAns15-20" ></div>
</div>



<p>or
</p>



<div id="spadComm15-21" class="spadComm" >
<form id="formComm15-21" action="javascript:makeRequest('15-21');" >
<input id="comm15-21" type="text" class="command" style="width: 25em;" value="type:=[real,[i,10],false]$FortranType" />
</form>
<span id="commSav15-21" class="commSav" >type:=[real,[i,10],false]$FortranType</span>
<div id="mathAns15-21" ></div>
</div>





<div id="spadComm15-22" class="spadComm" >
<form id="formComm15-22" action="javascript:makeRequest('15-22');" >
<input id="comm15-22" type="text" class="command" style="width: 12em;" value="scalarTypeOf type" />
</form>
<span id="commSav15-22" class="commSav" >scalarTypeOf type</span>
<div id="mathAns15-22" ></div>
</div>





<div id="spadComm15-23" class="spadComm" >
<form id="formComm15-23" action="javascript:makeRequest('15-23');" >
<input id="comm15-23" type="text" class="command" style="width: 12em;" value="dimensionsOf type" />
</form>
<span id="commSav15-23" class="commSav" >dimensionsOf type</span>
<div id="mathAns15-23" ></div>
</div>





<div id="spadComm15-24" class="spadComm" >
<form id="formComm15-24" action="javascript:makeRequest('15-24');" >
<input id="comm15-24" type="text" class="command" style="width: 10em;" value="external?  type" />
</form>
<span id="commSav15-24" class="commSav" >external?  type</span>
<div id="mathAns15-24" ></div>
</div>





<div id="spadComm15-25" class="spadComm" >
<form id="formComm15-25" action="javascript:makeRequest('15-25');" >
<input id="comm15-25" type="text" class="command" style="width: 11em;" value="fortranLogical()" />
</form>
<span id="commSav15-25" class="commSav" >fortranLogical()</span>
<div id="mathAns15-25" ></div>
</div>





<div id="spadComm15-26" class="spadComm" >
<form id="formComm15-26" action="javascript:makeRequest('15-26');" >
<input id="comm15-26" type="text" class="command" style="width: 26em;" value="construct(integer,[],true)$FortranType" />
</form>
<span id="commSav15-26" class="commSav" >construct(integer,[],true)$FortranType</span>
<div id="mathAns15-26" ></div>
</div>






</div>



<a name="subsubsec-15.3.4.6"/>
<div class="subsubsection"  id="subsubsec-15.3.4.6">
<h3 class="subsubsectitle">15.3.4.6  SymbolTable</h3>



<p><span class="index">SymbolTable</span><a name="chapter-15-28"/>
</p>


<p>This domain creates and manipulates a symbol table for generated Fortran code.
This is used by <span class="teletype">FortranProgram</span> to represent the types of objects in
a subprogram.  The commands available are:
</p>


<p><table class="begintabular">
<tr><td><span style="font-weight: bold;"> empty</span> </td><td> creates a new <span class="teletype">SymbolTable</span> </td></tr>
<tr><td> </td><td> </td></tr>
<tr><td><span style="font-weight: bold;"> declare</span> </td><td> creates a new entry in a table </td></tr>
<tr><td> </td><td> </td></tr>
<tr><td><span style="font-weight: bold;"> fortranTypeOf</span> </td><td> returns the type of an object in a table </td></tr>
<tr><td> </td><td> </td></tr>
<tr><td><span style="font-weight: bold;"> parametersOf</span> </td><td> returns a list of all the symbols in the table </td></tr>
<tr><td> </td><td> </td></tr>
<tr><td><span style="font-weight: bold;"> typeList</span> </td><td> returns a list of all objects of a given type </td></tr>
<tr><td> </td><td> </td></tr>
<tr><td><span style="font-weight: bold;"> typeLists</span> </td><td> returns a list of lists of all objects sorted by type </td></tr>
<tr><td> </td><td> </td></tr>
<tr><td><span style="font-weight: bold;"> externalList</span> </td><td> returns a list of all <span class="teletype">EXTERNAL</span> objects </td></tr>
<tr><td> </td><td> </td></tr>
<tr><td><span style="font-weight: bold;"> printTypes</span> </td><td> produces Fortran type declarations from a table</td></tr>
</table>
</p>




<div id="spadComm15-27" class="spadComm" >
<form id="formComm15-27" action="javascript:makeRequest('15-27');" >
<input id="comm15-27" type="text" class="command" style="width: 20em;" value="symbols := empty()$SymbolTable" />
</form>
<span id="commSav15-27" class="commSav" >symbols := empty()$SymbolTable</span>
<div id="mathAns15-27" ></div>
</div>





<div id="spadComm15-28" class="spadComm" >
<form id="formComm15-28" action="javascript:makeRequest('15-28');" >
<input id="comm15-28" type="text" class="command" style="width: 22em;" value="declare!(X,fortranReal(),symbols)" />
</form>
<span id="commSav15-28" class="commSav" >declare!(X,fortranReal(),symbols)</span>
<div id="mathAns15-28" ></div>
</div>





<div id="spadComm15-29" class="spadComm" >
<form id="formComm15-29" action="javascript:makeRequest('15-29');" >
<input id="comm15-29" type="text" class="command" style="width: 40em;" value="declare!(M,construct(real,[i,j],false)$FortranType,symbols)" />
</form>
<span id="commSav15-29" class="commSav" >declare!(M,construct(real,[i,j],false)$FortranType,symbols)</span>
<div id="mathAns15-29" ></div>
</div>





<div id="spadComm15-30" class="spadComm" >
<form id="formComm15-30" action="javascript:makeRequest('15-30');" >
<input id="comm15-30" type="text" class="command" style="width: 27em;" value="declare!([i,j],fortranInteger(),symbols)" />
</form>
<span id="commSav15-30" class="commSav" >declare!([i,j],fortranInteger(),symbols)</span>
<div id="mathAns15-30" ></div>
</div>





<div id="spadComm15-31" class="spadComm" >
<form id="formComm15-31" action="javascript:makeRequest('15-31');" >
<input id="comm15-31" type="text" class="command" style="width: 5em;" value="symbols" />
</form>
<span id="commSav15-31" class="commSav" >symbols</span>
<div id="mathAns15-31" ></div>
</div>





<div id="spadComm15-32" class="spadComm" >
<form id="formComm15-32" action="javascript:makeRequest('15-32');" >
<input id="comm15-32" type="text" class="command" style="width: 16em;" value="fortranTypeOf(i,symbols)" />
</form>
<span id="commSav15-32" class="commSav" >fortranTypeOf(i,symbols)</span>
<div id="mathAns15-32" ></div>
</div>





<div id="spadComm15-33" class="spadComm" >
<form id="formComm15-33" action="javascript:makeRequest('15-33');" >
<input id="comm15-33" type="text" class="command" style="width: 15em;" value="typeList(real,symbols)" />
</form>
<span id="commSav15-33" class="commSav" >typeList(real,symbols)</span>
<div id="mathAns15-33" ></div>
</div>





<div id="spadComm15-34" class="spadComm" >
<form id="formComm15-34" action="javascript:makeRequest('15-34');" >
<input id="comm15-34" type="text" class="command" style="width: 12em;" value="printTypes symbols" />
</form>
<span id="commSav15-34" class="commSav" >printTypes symbols</span>
<div id="mathAns15-34" ></div>
</div>






</div>



<a name="subsubsec-15.3.4.7"/>
<div class="subsubsection"  id="subsubsec-15.3.4.7">
<h3 class="subsubsectitle">15.3.4.7  TheSymbolTable</h3>



<p><span class="index">TheSymbolTable</span><a name="chapter-15-29"/>
</p>


<p>This domain creates and manipulates one global symbol table to be used, for
example, during template processing. It is
also used when
linking to external Fortran routines. The
information stored for each subprogram (and the main program segment, where
relevant) is:
</p>



<ul>
<li>
 its name;
</li>
<li> its return type;
</li>
<li> its argument list;
</li>
<li> and its argument types.
</li>
</ul>


<p>Initially, any information provided is deemed to be for the main program
segment.
</p>


<p>Issuing the following command indicates that from now on all information
refers to the subprogram  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>F</mi></mstyle></math>.
</p>




<div id="spadComm15-35" class="spadComm" >
<form id="formComm15-35" action="javascript:makeRequest('15-35');" >
<input id="comm15-35" type="text" class="command" style="width: 10em;" value="newSubProgram F" />
</form>
<span id="commSav15-35" class="commSav" >newSubProgram F</span>
<div id="mathAns15-35" ></div>
</div>



<p>It is possible to return to processing the main program segment by issuing
the command:
</p>




<div id="spadComm15-36" class="spadComm" >
<form id="formComm15-36" action="javascript:makeRequest('15-36');" >
<input id="comm15-36" type="text" class="command" style="width: 10em;" value="endSubProgram()" />
</form>
<span id="commSav15-36" class="commSav" >endSubProgram()</span>
<div id="mathAns15-36" ></div>
</div>



<p>The following commands exist:
</p>


<p><table class="begintabular">
<tr><td><span style="font-weight: bold;"> returnType</span> </td><td> declares the return type of the current subprogram </td></tr>
<tr><td> </td><td> </td></tr>
<tr><td><span style="font-weight: bold;"> returnTypeOf</span> </td><td> returns the return type of a subprogram </td></tr>
<tr><td> </td><td> </td></tr>
<tr><td><span style="font-weight: bold;"> argumentList</span> </td><td>  declares the argument list of the current subprogram </td></tr>
<tr><td> </td><td> </td></tr>
<tr><td><span style="font-weight: bold;"> argumentListOf</span> </td><td>  returns the argument list of a subprogram </td></tr>
<tr><td> </td><td> </td></tr>
<tr><td><span style="font-weight: bold;"> declare</span> </td><td> provides type declarations for parameters of the current subprogram </td></tr>
<tr><td> </td><td> </td></tr>
<tr><td><span style="font-weight: bold;"> symbolTableOf</span> </td><td> returns the symbol table  of a subprogram </td></tr>
<tr><td> </td><td> </td></tr>
<tr><td><span style="font-weight: bold;"> printHeader</span> </td><td> produces the Fortran header for the current subprogram </td></tr>
</table>
</p>


<p>In addition there are versions of these commands which are parameterised by
the name of a subprogram, and others parameterised by both the name of a
subprogram and by an instance of <span class="teletype">TheSymbolTable</span>.
</p>




<div id="spadComm15-37" class="spadComm" >
<form id="formComm15-37" action="javascript:makeRequest('15-37');" >
<input id="comm15-37" type="text" class="command" style="width: 10em;" value="newSubProgram F" />
</form>
<span id="commSav15-37" class="commSav" >newSubProgram F</span>
<div id="mathAns15-37" ></div>
</div>





<div id="spadComm15-38" class="spadComm" >
<form id="formComm15-38" action="javascript:makeRequest('15-38');" >
<input id="comm15-38" type="text" class="command" style="width: 14em;" value="argumentList!(F,[X])" />
</form>
<span id="commSav15-38" class="commSav" >argumentList!(F,[X])</span>
<div id="mathAns15-38" ></div>
</div>





<div id="spadComm15-39" class="spadComm" >
<form id="formComm15-39" action="javascript:makeRequest('15-39');" >
<input id="comm15-39" type="text" class="command" style="width: 13em;" value="returnType!(F,real)" />
</form>
<span id="commSav15-39" class="commSav" >returnType!(F,real)</span>
<div id="mathAns15-39" ></div>
</div>





<div id="spadComm15-40" class="spadComm" >
<form id="formComm15-40" action="javascript:makeRequest('15-40');" >
<input id="comm15-40" type="text" class="command" style="width: 18em;" value="declare!(X,fortranReal(),F)" />
</form>
<span id="commSav15-40" class="commSav" >declare!(X,fortranReal(),F)</span>
<div id="mathAns15-40" ></div>
</div>





<div id="spadComm15-41" class="spadComm" >
<form id="formComm15-41" action="javascript:makeRequest('15-41');" >
<input id="comm15-41" type="text" class="command" style="width: 9em;" value="printHeader F" />
</form>
<span id="commSav15-41" class="commSav" >printHeader F</span>
<div id="mathAns15-41" ></div>
</div>






</div>



<a name="subsubsec-15.3.4.8"/>
<div class="subsubsection"  id="subsubsec-15.3.4.8">
<h3 class="subsubsectitle">15.3.4.8  Advanced Fortran Code Generation</h3>




<p>This section describes facilities for representing Fortran statements, and
building up complete subprograms from them.
</p>





</div>



<a name="subsubsec-15.3.4.9"/>
<div class="subsubsection"  id="subsubsec-15.3.4.9">
<h3 class="subsubsectitle">15.3.4.9  Switch</h3>



<p><span class="index">Switch</span><a name="chapter-15-30"/>
</p>


<p>This domain is used to represent statements like <span class="teletype">x &lt; y</span>.  Although
these can be represented directly in FriCAS, it is a little cumbersome,
since FriCAS evaluates the last statement, for example, to <span class="teletype">true</span>
(since  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> is  lexicographically less than  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math>).
</p>


<p>Instead we have a set of operations, such as <span style="font-weight: bold;"> LT</span> to represent  <math xmlns="&mathml;" mathsize="big"><mstyle><mo>&lt;</mo></mstyle></math>,
to let us build such statements.  The available constructors are:
</p>




<div class="center" style="text-align: center;">


<p><table class="begintabular">
<tr><td><span style="font-weight: bold;"> LT</span> </td><td>  <math xmlns="&mathml;" mathsize="big"><mstyle><mo>&lt;</mo></mstyle></math> </td></tr>
<tr><td><span style="font-weight: bold;"> GT</span> </td><td>  <math xmlns="&mathml;" mathsize="big"><mstyle><mo>&gt;</mo></mstyle></math> </td></tr>
<tr><td><span style="font-weight: bold;"> LE</span> </td><td>  <math xmlns="&mathml;" mathsize="big"><mstyle><mo>&#x2264;</mo></mstyle></math> </td></tr>
<tr><td><span style="font-weight: bold;"> GE</span> </td><td>  <math xmlns="&mathml;" mathsize="big"><mstyle><mo>&#x2264;</mo></mstyle></math> </td></tr>
<tr><td><span style="font-weight: bold;"> EQ</span> </td><td>  <math xmlns="&mathml;" mathsize="big"><mstyle><mo>=</mo></mstyle></math> </td></tr>
<tr><td><span style="font-weight: bold;"> AND</span> </td><td> <span class="teletype">and</span></td></tr>
<tr><td><span style="font-weight: bold;"> OR</span> </td><td> <span class="teletype">or</span> </td></tr>
<tr><td><span style="font-weight: bold;"> NOT</span> </td><td> <span class="teletype">not</span> </td></tr>
</table>
</p>



</div>



<p>So for example:
</p>



<div id="spadComm15-42" class="spadComm" >
<form id="formComm15-42" action="javascript:makeRequest('15-42');" >
<input id="comm15-42" type="text" class="command" style="width: 5em;" value="LT(x,y)" />
</form>
<span id="commSav15-42" class="commSav" >LT(x,y)</span>
<div id="mathAns15-42" ></div>
</div>






</div>



<a name="subsubsec-15.3.4.10"/>
<div class="subsubsection"  id="subsubsec-15.3.4.10">
<h3 class="subsubsectitle">15.3.4.10  FortranCode</h3>




<p>This domain represents code segments or operations: currently assignments,
conditionals, blocks, comments, gotos, continues, various kinds of loops,
and return statements.
</p>


<p>For example we can create quite a complicated conditional statement using
assignments, and then turn it into Fortran code:
</p>




<div id="spadComm15-43" class="spadComm" >
<form id="formComm15-43" action="javascript:makeRequest('15-43');" >
<input id="comm15-43" type="text" class="command" style="width: 46em;" value="c := cond(LT(X,Y),assign(F,X),cond(GT(Y,Z),assign(F,Y),assign(F,Z)))" />
</form>
<span id="commSav15-43" class="commSav" >c := cond(LT(X,Y),assign(F,X),cond(GT(Y,Z),assign(F,Y),assign(F,Z)))</span>
<div id="mathAns15-43" ></div>
</div>





<div id="spadComm15-44" class="spadComm" >
<form id="formComm15-44" action="javascript:makeRequest('15-44');" >
<input id="comm15-44" type="text" class="command" style="width: 8em;" value="printCode c" />
</form>
<span id="commSav15-44" class="commSav" >printCode c</span>
<div id="mathAns15-44" ></div>
</div>



<p>The Fortran code is printed
on the current Fortran output stream.
</p>





</div>



<a name="subsubsec-15.3.4.11"/>
<div class="subsubsection"  id="subsubsec-15.3.4.11">
<h3 class="subsubsectitle">15.3.4.11  FortranProgram</h3>



<p><span class="index">FortranProgram</span><a name="chapter-15-31"/>
</p>


<p>This domain is used to construct complete Fortran subprograms out of
elements of <span class="teletype">FortranCode</span>.  It is parameterised by the name of the
target subprogram (a <span class="teletype">Symbol</span>), its return type (from
<span class="teletype">Union</span>(<span class="teletype">FortranScalarType</span>,<span class="italic">void</span>)),
its arguments (from <span class="teletype">List Symbol</span>), and
its symbol table (from <span class="teletype">SymbolTable</span>).  One can
<span style="font-weight: bold;"> coerce</span> elements of either <span class="teletype">FortranCode</span>
or <span class="teletype">Expression</span> into it.
</p>



<p>First of all we create a symbol table:
</p>




<div id="spadComm15-45" class="spadComm" >
<form id="formComm15-45" action="javascript:makeRequest('15-45');" >
<input id="comm15-45" type="text" class="command" style="width: 20em;" value="symbols := empty()$SymbolTable" />
</form>
<span id="commSav15-45" class="commSav" >symbols := empty()$SymbolTable</span>
<div id="mathAns15-45" ></div>
</div>



<p>Now put some type declarations into it:
</p>




<div id="spadComm15-46" class="spadComm" >
<form id="formComm15-46" action="javascript:makeRequest('15-46');" >
<input id="comm15-46" type="text" class="command" style="width: 25em;" value="declare!([X,Y],fortranReal(),symbols)" />
</form>
<span id="commSav15-46" class="commSav" >declare!([X,Y],fortranReal(),symbols)</span>
<div id="mathAns15-46" ></div>
</div>



<p>Then (for convenience)
we set up the particular instantiation of <span class="teletype">FortranProgram</span>
</p>




<div id="spadComm15-47" class="spadComm" >
<form id="formComm15-47" action="javascript:makeRequest('15-47');" >
<input id="comm15-47" type="text" class="command" style="width: 28em;" value="FP := FortranProgram(F,real,[X,Y],symbols)" />
</form>
<span id="commSav15-47" class="commSav" >FP := FortranProgram(F,real,[X,Y],symbols)</span>
<div id="mathAns15-47" ></div>
</div>



<p>Create an object of type <span class="teletype">Expression(Integer)</span>:
</p>




<div id="spadComm15-48" class="spadComm" >
<form id="formComm15-48" action="javascript:makeRequest('15-48');" >
<input id="comm15-48" type="text" class="command" style="width: 10em;" value="asp := X*sin(Y)" />
</form>
<span id="commSav15-48" class="commSav" >asp := X*sin(Y)</span>
<div id="mathAns15-48" ></div>
</div>



<p>Now <span style="font-weight: bold;"> coerce</span> it into <span class="teletype">FP</span>, and print its Fortran form:
</p>




<div id="spadComm15-49" class="spadComm" >
<form id="formComm15-49" action="javascript:makeRequest('15-49');" >
<input id="comm15-49" type="text" class="command" style="width: 16em;" value="outputAsFortran(asp::FP)" />
</form>
<span id="commSav15-49" class="commSav" >outputAsFortran(asp::FP)</span>
<div id="mathAns15-49" ></div>
</div>



<p>We can generate a <span class="teletype">FortranProgram</span> using  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>FortranCode</mi></mstyle></math>.  For
example:
</p>


<p>Augment our symbol table:
</p>




<div id="spadComm15-50" class="spadComm" >
<form id="formComm15-50" action="javascript:makeRequest('15-50');" >
<input id="comm15-50" type="text" class="command" style="width: 22em;" value="declare!(Z,fortranReal(),symbols)" />
</form>
<span id="commSav15-50" class="commSav" >declare!(Z,fortranReal(),symbols)</span>
<div id="mathAns15-50" ></div>
</div>



<p>and transform the conditional expression we prepared earlier:
</p>




<div id="spadComm15-51" class="spadComm" >
<form id="formComm15-51" action="javascript:makeRequest('15-51');" >
<input id="comm15-51" type="text" class="command" style="width: 23em;" value="outputAsFortran([c,returns()]::FP)" />
</form>
<span id="commSav15-51" class="commSav" >outputAsFortran([c,returns()]::FP)</span>
<div id="mathAns15-51" ></div>
</div>






</div>




</div>



<a name="subsec-15.3.5"/>
<div class="subsection"  id="subsec-15.3.5">
<h3 class="subsectitle">15.3.5  Some technical information</h3>


<p><span class="index">nagTechnical</span><a name="chapter-15-32"/>
</p>



<p>The model adopted for the link is a server-client configuration
-- FriCAS acting as a client via a local agent
(a process called <span class="teletype">nagman</span>). The server side is implemented
by the <span class="teletype">nagd</span> daemon process which may run on a different host.
The <span class="teletype">nagman</span> local agent is started by default whenever you
start FriCAS. The <span class="teletype">nagd</span> server must be started separately.
Instructions for installing and running the server are supplied
in <a href="nugNagd" class="ref" >nugNagd</a> . 
Use the <span class="teletype">)set naglink host</span> system command
to point your local agent to a server in your network.
</p>




<p>On the FriCAS side, one sees a set of <span class="em">packages</span>
(ask Browse for <span class="em">Nag*</span>) for each chapter, each exporting
operations with the same name as a routine in the Nag Library.
The arguments and return value of each operation belong to
standard FriCAS types.
</p>


<p>The <span class="teletype">man</span> pages for the Nag Library are accessible via the description
of each operation in Browse (among other places).
</p>


<p>In the implementation of each operation, the set of inputs is passed
to the local agent <span class="teletype">nagman</span>, which makes a
Remote Procedure Call (RPC) to the
remote <span class="teletype">nagd</span> daemon process.  The local agent receives the RPC
results and forwards them to the FriCAS workspace where they
are interpreted appropriately.
</p>


<p>How are Fortran subroutines turned into RPC calls?
For each Fortran routine in the Nag Library, a C main() routine
is supplied.
Its job is to assemble the RPC input (numeric) data stream into
the appropriate Fortran data structures for the routine, call the Fortran
routine from C and serialize the results into an RPC output data stream.
</p>


<p>Many Nag Library routines accept ASPs (Argument Subprogram Parameters).
These specify user-supplied Fortran routines (e.g. a routine to
supply values of a function is required for numerical integration).
How are they handled? There are new facilities in FriCAS to help.
A set of FriCAS domains has been provided to turn values in standard
 FriCAS types (such as Expression Integer) into the appropriate
piece of Fortran for each case (a filename pointing to Fortran source
for the ASP can always be supplied instead).
Ask Browse for <span class="em">Asp*</span> to see these domains. The Fortran fragments
are included in the outgoing RPC stream, but <span class="teletype">nagd</span> intercepts them,
compiles them, and links them with the main() C program before executing
the resulting program on the numeric part of the RPC stream.
</p>






</div>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-15.2.xhtml" style="margin-right: 10px;">Previous Section 15.2 The New FriCAS Library Compiler</a><a href="section-15.4.xhtml" style="margin-right: 10px;">Next Section 15.4 Interactive Front-end and Language</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>