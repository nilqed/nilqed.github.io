<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section10.3</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-10.2.xhtml" style="margin-right: 10px;">Previous Section 10.2 A Ribbon Program</a><a href="section-10.4.xhtml" style="margin-right: 10px;">Next Section 10.4 Points, Lines, and Curves</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-10.3">
<h2 class="sectiontitle">10.3  Coloring and Positioning Ribbons</h2>


<a name="ugIntProgColor" class="label"/>



<p>Before leaving the ribbon example, we  make two improvements.
Normally, the color given to each point in the space is a
function of its height within a bounding box.
The points at the bottom of the
box are red, those at the top are purple.
</p>


<p>To change the normal coloring, you can give
an option  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>colorFunction</mi><mo>=</mo><mo>=</mo><mrow><mtext mathvariant='sans-serif-italic'>function</mtext></mrow></mrow></mstyle></math>.
When FriCAS goes about displaying the data, it
determines the range of colors used for all points within the box.
FriCAS then distributes these numbers uniformly over the number of hues.
Here we use the simple color function
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo>)</mo><mo>&#x21a6;</mo><mi>i</mi></mrow></mstyle></math> for the
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math>-th ribbon.
</p>


<p>Also, we add an argument  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>yrange</mi></mstyle></math> so you can give the range of
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math> occupied by the ribbons.
For example, if the  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>yrange</mi></mstyle></math> is given as
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>y</mi><mo>=</mo><mn>0</mn><mo>.</mo><mo>.</mo><mn>1</mn></mrow></mstyle></math> and there are  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>5</mn></mstyle></math> ribbons to be displayed, each
ribbon would have width  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>0</mn><mo>.</mo><mn>2</mn></mrow></mstyle></math> and would appear in the
range  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>0</mn><mo>&#x2264;</mo><mi>y</mi><mo>&#x2264;</mo><mn>1</mn></mrow></mstyle></math>.
</p>


<p>Refer to lines 4-9.
Line 4 assigns to  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>yVar</mi></mstyle></math> the variable part of the
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>yrange</mi></mstyle></math> (after all, it need not be  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math>).
Suppose that  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>yrange</mi></mstyle></math> is given as  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>t</mi><mo>=</mo><mi>a</mi><mo>.</mo><mo>.</mo><mi>b</mi></mrow></mstyle></math> where  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> and
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>b</mi></mstyle></math> have numerical values.
Then line 5 assigns the value of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> to the variable  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y0</mi></mstyle></math>.
Line 6 computes the width of the ribbon by dividing the difference of
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>b</mi></mstyle></math> by the number,  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>num</mi></mstyle></math>, of ribbons.
The result is assigned to the variable  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>width</mi></mstyle></math>.
Note that in the for-loop in line 7, we are iterating in parallel; it is
not a nested loop.
</p>





<div class="verbatim"><br />
drawRibbons(flist,&nbsp;xrange,&nbsp;yrange)&nbsp;==}{}<br />
&nbsp;&nbsp;sp&nbsp;:=&nbsp;createThreeSpace()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create&nbsp;empty&nbsp;space&nbsp;$sp$.<br />
&nbsp;&nbsp;num&nbsp;:=&nbsp; #&nbsp;flist&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;number&nbsp;of&nbsp;ribbons.<br />
&nbsp;&nbsp;yVar&nbsp;:=&nbsp;variable&nbsp;yrange&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;ribbon&nbsp;variable.<br />
&nbsp;&nbsp;y0:Float&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;lo&nbsp;segment&nbsp;yrange&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;first&nbsp;ribbon&nbsp;coordinate.<br />
&nbsp;&nbsp;width:Float&nbsp;:=&nbsp;(hi&nbsp;segment&nbsp;yrange&nbsp;-&nbsp;y0)/num&nbsp;&nbsp;The&nbsp;width&nbsp;of&nbsp;a&nbsp;ribbon.<br />
&nbsp;&nbsp;for&nbsp;f&nbsp;in&nbsp;flist&nbsp;for&nbsp;color&nbsp;in&nbsp;1..num&nbsp;repeat&nbsp;&nbsp;&nbsp;&nbsp;For&nbsp;each&nbsp;function&nbsp;$f$,<br />
&nbsp;&nbsp;&nbsp;&nbsp;makeObject(f,&nbsp;xrange,&nbsp;yVar&nbsp;=&nbsp;y0..y0+width,&nbsp;create&nbsp;and&nbsp;add&nbsp;ribbon&nbsp;to<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var2Steps&nbsp;==&nbsp;1,&nbsp;colorFunction&nbsp;==&nbsp;(x,y)&nbsp;+-&gt;&nbsp;color,&nbsp;_<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;space&nbsp;==&nbsp;sp)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$sp$&nbsp;of&nbsp;a&nbsp;different&nbsp;color.<br />
&nbsp;&nbsp;&nbsp;&nbsp;y0&nbsp;:=&nbsp;y0&nbsp;+&nbsp;width&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;next&nbsp;ribbon&nbsp;coordinate.<br />
&nbsp;&nbsp;vp&nbsp;:=&nbsp;makeViewport3D(sp,&nbsp;"Ribbons")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create&nbsp;viewport.<br />
&nbsp;&nbsp;drawStyle(vp,&nbsp;"shade")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Select&nbsp;shading&nbsp;style.<br />
&nbsp;&nbsp;outlineRender(vp,&nbsp;"on")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Show&nbsp;polygon&nbsp;outlines.<br />
&nbsp;&nbsp;showRegion(vp,&nbsp;"on")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enclose&nbsp;in&nbsp;a&nbsp;box.<br />
&nbsp;&nbsp;vp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return&nbsp;the&nbsp;viewport.<br />
</div>



<div class="caption">The final <span style="font-weight: bold;"> drawRibbons</span> function.</div>

<a name="fig-ribdraw2" class="label"/>





</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-10.2.xhtml" style="margin-right: 10px;">Previous Section 10.2 A Ribbon Program</a><a href="section-10.4.xhtml" style="margin-right: 10px;">Next Section 10.4 Points, Lines, and Curves</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>