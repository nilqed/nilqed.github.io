<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section11.7</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-11.6.xhtml" style="margin-right: 10px;">Previous Section 11.6 Compiling Packages</a><a href="section-11.8.xhtml" style="margin-right: 10px;">Next Section 11.8 Conditionals</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-11.7">
<h2 class="sectiontitle">11.7  Parameters</h2>


<a name="ugPackagesParameters" class="label"/>



<p>The power of packages becomes evident when packages have parameters.
Usually these parameters are domains and the exported operations have types
involving these parameters.
</p>


<p>In Chapter <a href="section-2.0.xhtml#ugTypes" class="ref" >ugTypes</a> , 
you learned that categories denote classes of domains.
Although we cover this notion in detail in the next
chapter, we now give you a sneak preview of its usefulness.
</p>


<p>In <a href="section-6.15.xhtml#ugUserBlocks" class="ref" >ugUserBlocks</a> , 
we defined functions <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>bubbleSort</mi><mo>(</mo><mi>m</mi><mo>)</mo></mrow></mstyle></math> and
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>insertionSort</mi><mo>(</mo><mi>m</mi><mo>)</mo></mrow></mstyle></math> to sort a list of integers.
If you look at the code for these functions, you see that they may be
used to sort <span class="italic">any</span> structure <math xmlns="&mathml;" mathsize="big"><mstyle><mi>m</mi></mstyle></math> with the right properties.
Also, the functions can be used to sort lists of <span class="italic">any</span> elements---not
just integers.
Let us now recall the code for <math xmlns="&mathml;" mathsize="big"><mstyle><mi>bubbleSort</mi></mstyle></math>.
</p>




<div class="verbatim"><br />
bubbleSort(m)&nbsp;==<br />
&nbsp;&nbsp;n&nbsp;:=&nbsp;#m<br />
&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;1..(n-1)&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;j&nbsp;in&nbsp;n..(i+1)&nbsp;by&nbsp;-1&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;m.j&nbsp;&lt;&nbsp;m.(j-1)&nbsp;then&nbsp;swap!(m,j,j-1)<br />
&nbsp;&nbsp;m<br />
</div>



<p>What properties of <span class="italic">lists of integers</span> are assumed by the sorting
algorithm?
In the first line, the operation <span style="font-weight: bold;"> #</span> computes the maximum index of
the list.
The first obvious property is that <math xmlns="&mathml;" mathsize="big"><mstyle><mi>m</mi></mstyle></math> must have a finite number of
elements.
In FriCAS, this is done
by your telling FriCAS that <math xmlns="&mathml;" mathsize="big"><mstyle><mi>m</mi></mstyle></math> has
the <span class="italic">attribute</span> <span style="font-weight: bold;"> finiteAggregate</span>.
An <span class="italic">attribute</span> is a property
that a domain either has or does not have.
As we show later in 
<a href="section-12.9.xhtml#ugCategoriesAttributes" class="ref" >ugCategoriesAttributes</a> ,
programs can query domains as to the presence or absence of an attribute.
</p>


<p>The operation <span style="font-weight: bold;"> swap</span> swaps elements of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>m</mi></mstyle></math>.
Using Browse, you find that <span style="font-weight: bold;"> swap</span> requires its
elements to come from a domain of category
<span class="teletype">IndexedAggregate</span> with attribute
<span class="teletype">shallowlyMutable</span>.
This attribute means that you can change the internal components
of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>m</mi></mstyle></math> without changing its external structure.
Shallowly-mutable data structures include lists, streams, one- and
two-dimensional arrays, vectors, and matrices.
</p>


<p>The category <span class="teletype">IndexedAggregate</span> designates the class of
aggregates whose elements can be accessed by the notation
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>m</mi><mo>.</mo><mi>s</mi></mrow></mstyle></math> for suitable selectors <math xmlns="&mathml;" mathsize="big"><mstyle><mi>s</mi></mstyle></math>.
The category <span class="teletype">IndexedAggregate</span> takes two arguments:
<math xmlns="&mathml;" mathsize="big"><mstyle><mi>Index</mi></mstyle></math>, a domain of selectors for the aggregate, and
<math xmlns="&mathml;" mathsize="big"><mstyle><mi>Entry</mi></mstyle></math>, a domain of entries for the aggregate.
Since the sort functions access elements by integers, we must
choose <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>Index</mi><mo>=</mo></mrow></mstyle></math><span class="teletype">Integer</span>.
The most general class of domains for which <math xmlns="&mathml;" mathsize="big"><mstyle><mi>bubbleSort</mi></mstyle></math> and
<math xmlns="&mathml;" mathsize="big"><mstyle><mi>insertionSort</mi></mstyle></math> are defined are those of
category <span class="teletype">IndexedAggregate(Integer,Entry)</span> with the two
attributes <span style="font-weight: bold;"> shallowlyMutable</span> and
<span style="font-weight: bold;"> finiteAggregate</span>.
</p>


<p>Using Browse, you can also discover that FriCAS has many kinds of domains
with attribute <span style="font-weight: bold;"> shallowlyMutable</span>.
Those of class <span class="teletype">IndexedAggregate(Integer,Entry)</span> include
<span class="teletype">Bits</span>, <span class="teletype">FlexibleArray</span>, <span class="teletype">OneDimensionalArray</span>,
<span class="teletype">List</span>, <span class="teletype">String</span>, and <span class="teletype">Vector</span>, and also
<span class="teletype">HashTable</span> and <span class="teletype">EqTable</span> with integer keys.
Although you may never want to sort all such structures, we
nonetheless demonstrate FriCAS's
ability to do so.
</p>


<p>Another requirement is that <span class="teletype">Entry</span> has an
operation <span class="teletype">&lt;</span>.
One way to get this operation is to assume that
<span class="teletype">Entry</span> has category <span class="teletype">OrderedSet</span>.
By definition, will then export a <span class="teletype">&lt;</span> operation.
A more general approach is to allow any comparison function
<math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math> to be used for sorting.
This function will be passed as an argument to the sorting
functions.
</p>


<p>Our sorting package then takes two arguments: a domain <math xmlns="&mathml;" mathsize="big"><mstyle><mi>S</mi></mstyle></math>
of objects of <span class="italic">any</span> type, and a domain <math xmlns="&mathml;" mathsize="big"><mstyle><mi>A</mi></mstyle></math>, an aggregate
of type <span class="teletype">IndexedAggregate(Integer, S)</span> with the above
two attributes.
Here is its definition using what are close to the original
definitions of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>bubbleSort</mi></mstyle></math> and <math xmlns="&mathml;" mathsize="big"><mstyle><mi>insertionSort</mi></mstyle></math> for
sorting lists of integers.
The symbol <span class="teletype">!</span> is added to the ends of the operation
names.
This uniform naming convention is used for FriCAS operation
names that destructively change one or more of their arguments.
</p>




<div class="verbatim"><br />
SortPackage(S,A)&nbsp;:&nbsp;Exports&nbsp;==&nbsp;Implementation&nbsp;where<br />
&nbsp;&nbsp;S:&nbsp;Object<br />
&nbsp;&nbsp;A:&nbsp;IndexedAggregate(Integer,S)<br />
&nbsp;&nbsp;&nbsp;&nbsp;with&nbsp;(finiteAggregate;&nbsp;shallowlyMutable)<br />
<br />
&nbsp;&nbsp;Exports&nbsp;==&nbsp;with<br />
&nbsp;&nbsp;&nbsp;&nbsp;bubbleSort!:&nbsp;(A,(S,S)&nbsp;-&gt;&nbsp;Boolean)&nbsp;-&gt;&nbsp;A<br />
&nbsp;&nbsp;&nbsp;&nbsp;insertionSort!:&nbsp;(A,&nbsp;(S,S)&nbsp;-&gt;&nbsp;Boolean)&nbsp;-&gt;&nbsp;A<br />
<br />
&nbsp;&nbsp;Implementation&nbsp;==&nbsp;add<br />
&nbsp;&nbsp;&nbsp;&nbsp;bubbleSort!(m,f)&nbsp;==<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n&nbsp;:=&nbsp;#m<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;1..(n-1)&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;j&nbsp;in&nbsp;n..(i+1)&nbsp;by&nbsp;-1&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;f(m.j,m.(j-1))&nbsp;then&nbsp;swap!(m,j,j-1)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<br />
&nbsp;&nbsp;&nbsp;&nbsp;insertionSort!(m,f)&nbsp;==<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;2..#m&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j&nbsp;:=&nbsp;i<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;j&nbsp;&gt;&nbsp;1&nbsp;and&nbsp;f(m.j,m.(j-1))&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap!(m,j,j-1)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j&nbsp;:=&nbsp;(j&nbsp;-&nbsp;1)&nbsp;pretend&nbsp;PositiveInteger<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<br />
</div>





</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-11.6.xhtml" style="margin-right: 10px;">Previous Section 11.6 Compiling Packages</a><a href="section-11.8.xhtml" style="margin-right: 10px;">Next Section 11.8 Conditionals</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>