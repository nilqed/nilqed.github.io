<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section5.1</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-5.0.xhtml" style="margin-right: 10px;">Previous Section 5.0 Interactive Language</a><a href="section-5.2.xhtml" style="margin-right: 10px;">Next Section 5.2 Blocks</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-5.1">
<h2 class="sectiontitle">5.1  Immediate and Delayed Assignments</h2>


<a name="ugLangAssign" class="label"/>


<p>A <span class="italic">variable</span> in FriCAS refers to a value.  A variable has a name
beginning with an uppercase or lowercase alphabetic character, 
``<span class="teletype">%</span>'', or ``<span class="teletype">!</span>''.  Successive characters (if any) can be any of
the above, digits, or <span class="italic"><span class="teletype">?</span></span>.  Case is distinguished.  The
following are all examples of valid, distinct variable names:
</p>




<div class="verbatim"><br />
a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tooBig?&nbsp;&nbsp;&nbsp;&nbsp;a1B2c3%!?<br />
A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;%j&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numberOfPoints<br />
beta6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;%J&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numberofpoints<br />
</div>



<p>The ``<span class="teletype">:=</span>'' operator is the immediate <span class="italic">assignment</span> operator.
<span class="index">assignment:immediate</span><a name="chapter-5-0"/> Use it to associate a value with a
variable.  <span class="index">immediate assignment</span><a name="chapter-5-1"/>
</p>




<div class="boxed2">


<div class="boxed">



<p>The syntax for immediate assignment for a single variable is
</p>



<div class="center" style="text-align: center;">


<p><span class="italic">variable</span>  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>:</mo><mo>=</mo></mrow></mstyle></math> <span class="italic">expression</span>
</p>



</div>


<p>The value returned by an immediate assignment is the value of 
<span class="italic">expression</span>.<br/>
</p>



</div>
</div>



<p>The right-hand side of the expression is evaluated, yielding  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math>.
This value is then assigned to  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math>.
</p>



<div id="spadComm5-1" class="spadComm" >
<form id="formComm5-1" action="javascript:makeRequest('5-1');" >
<input id="comm5-1" type="text" class="command" style="width: 4em;" value="a := 1" />
</form>
<span id="commSav5-1" class="commSav" >a := 1</span>
<div id="mathAns5-1" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>The right-hand side of the expression is evaluated, yielding  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math>.
This value is then assigned to  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>b</mi></mstyle></math>.  Thus  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>b</mi></mstyle></math> both have the
value  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math> after the sequence of assignments.
</p>



<div id="spadComm5-2" class="spadComm" >
<form id="formComm5-2" action="javascript:makeRequest('5-2');" >
<input id="comm5-2" type="text" class="command" style="width: 4em;" value="b := a" />
</form>
<span id="commSav5-2" class="commSav" >b := a</span>
<div id="mathAns5-2" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>What is the value of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>b</mi></mstyle></math> if  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> is assigned the value  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>2</mn></mstyle></math>?
</p>



<div id="spadComm5-3" class="spadComm" >
<form id="formComm5-3" action="javascript:makeRequest('5-3');" >
<input id="comm5-3" type="text" class="command" style="width: 4em;" value="a := 2" />
</form>
<span id="commSav5-3" class="commSav" >a := 2</span>
<div id="mathAns5-3" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>As you see, the value of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>b</mi></mstyle></math> is left unchanged.
</p>



<div id="spadComm5-4" class="spadComm" >
<form id="formComm5-4" action="javascript:makeRequest('5-4');" >
<input id="comm5-4" type="text" class="command" style="width: 1em;" value="b" />
</form>
<span id="commSav5-4" class="commSav" >b</span>
<div id="mathAns5-4" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>This is what we mean when we say this kind of assignment is <span class="italic">immediate</span>;  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>b</mi></mstyle></math> has no dependency on  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> after the initial assignment.
This is the usual notion of assignment found in programming languages
such as C, <span class="index">C language:assignment</span><a name="chapter-5-2"/> PASCAL
<span class="index">PASCAL:assignment</span><a name="chapter-5-3"/> and FORTRAN.  <span class="index">FORTRAN:assignment</span><a name="chapter-5-4"/>
</p>


<p>FriCAS provides delayed assignment with <span class="italic"><span class="teletype">==</span></span>.
<span class="index">assignment:delayed</span><a name="chapter-5-5"/> This implements a <span class="index">delayed
assignment</span><a name="chapter-5-6"/> delayed evaluation of the right-hand side and dependency
checking.
</p>




<div class="boxed2">


<div class="boxed">



<p>The syntax for delayed assignment is
</p>



<div class="center" style="text-align: center;">


<p><span class="italic">variable</span>  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>=</mo><mo>=</mo></mrow></mstyle></math> <span class="italic">expression</span>
</p>



</div>


<p>The value returned by a delayed assignment is the unique value of <span class="teletype">Void</span>.<br/>
</p>



</div>
</div>



<p>Using  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>b</mi></mstyle></math> as above, these are the corresponding delayed assignments.
</p>



<div id="spadComm5-5" class="spadComm" >
<form id="formComm5-5" action="javascript:makeRequest('5-5');" >
<input id="comm5-5" type="text" class="command" style="width: 4em;" value="a == 1" />
</form>
<span id="commSav5-5" class="commSav" >a == 1</span>
<div id="mathAns5-5" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm5-6" class="spadComm" >
<form id="formComm5-6" action="javascript:makeRequest('5-6');" >
<input id="comm5-6" type="text" class="command" style="width: 4em;" value="b == a" />
</form>
<span id="commSav5-6" class="commSav" >b == a</span>
<div id="mathAns5-6" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>The right-hand side of each delayed assignment is left unevaluated
until the variables on the left-hand sides are evaluated.  Therefore
this evaluation and ...
</p>



<div id="spadComm5-7" class="spadComm" >
<form id="formComm5-7" action="javascript:makeRequest('5-7');" >
<input id="comm5-7" type="text" class="command" style="width: 1em;" value="a" />
</form>
<span id="commSav5-7" class="commSav" >a</span>
<div id="mathAns5-7" ></div>
</div>




<div class="verbatim"><br />
Compiling&nbsp;body&nbsp;of&nbsp;rule&nbsp;a&nbsp;to&nbsp;compute&nbsp;value&nbsp;of&nbsp;type&nbsp;PositiveInteger&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>this evaluation seem the same as before.
</p>



<div id="spadComm5-8" class="spadComm" >
<form id="formComm5-8" action="javascript:makeRequest('5-8');" >
<input id="comm5-8" type="text" class="command" style="width: 1em;" value="b" />
</form>
<span id="commSav5-8" class="commSav" >b</span>
<div id="mathAns5-8" ></div>
</div>




<div class="verbatim"><br />
Compiling&nbsp;body&nbsp;of&nbsp;rule&nbsp;b&nbsp;to&nbsp;compute&nbsp;value&nbsp;of&nbsp;type&nbsp;PositiveInteger&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>If we change  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> to  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>2</mn></mstyle></math>
</p>



<div id="spadComm5-9" class="spadComm" >
<form id="formComm5-9" action="javascript:makeRequest('5-9');" >
<input id="comm5-9" type="text" class="command" style="width: 4em;" value="a == 2" />
</form>
<span id="commSav5-9" class="commSav" >a == 2</span>
<div id="mathAns5-9" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiled&nbsp;code&nbsp;for&nbsp;a&nbsp;has&nbsp;been&nbsp;cleared.<br />
&nbsp;&nbsp;&nbsp;Compiled&nbsp;code&nbsp;for&nbsp;b&nbsp;has&nbsp;been&nbsp;cleared.<br />
&nbsp;&nbsp;&nbsp;1&nbsp;old&nbsp;definition(s)&nbsp;deleted&nbsp;for&nbsp;function&nbsp;or&nbsp;rule&nbsp;a&nbsp;<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>then  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> evaluates to  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>2</mn></mstyle></math>, as expected, but
</p>



<div id="spadComm5-10" class="spadComm" >
<form id="formComm5-10" action="javascript:makeRequest('5-10');" >
<input id="comm5-10" type="text" class="command" style="width: 1em;" value="a" />
</form>
<span id="commSav5-10" class="commSav" >a</span>
<div id="mathAns5-10" ></div>
</div>




<div class="verbatim"><br />
Compiling&nbsp;body&nbsp;of&nbsp;rule&nbsp;a&nbsp;to&nbsp;compute&nbsp;value&nbsp;of&nbsp;type&nbsp;PositiveInteger&nbsp;<br />
<br />
+++&nbsp;|*0;a;1;G82322|&nbsp;redefined<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>the value of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>b</mi></mstyle></math> reflects the change to  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math>.
</p>



<div id="spadComm5-11" class="spadComm" >
<form id="formComm5-11" action="javascript:makeRequest('5-11');" >
<input id="comm5-11" type="text" class="command" style="width: 1em;" value="b" />
</form>
<span id="commSav5-11" class="commSav" >b</span>
<div id="mathAns5-11" ></div>
</div>




<div class="verbatim"><br />
Compiling&nbsp;body&nbsp;of&nbsp;rule&nbsp;b&nbsp;to&nbsp;compute&nbsp;value&nbsp;of&nbsp;type&nbsp;PositiveInteger&nbsp;<br />
<br />
+++&nbsp;|*0;b;1;G82322|&nbsp;redefined<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>It is possible to set several variables at the same time
<span class="index">assignment:multiple immediate</span><a name="chapter-5-7"/> by using <span class="index">multiple
immediate assignment</span><a name="chapter-5-8"/> a <span class="italic">tuple</span> of variables and a tuple of
expressions. Note that a <span class="italic">tuple</span> is a collection of things
separated by commas, often surrounded by parentheses.
</p>




<div class="boxed2">


<div class="boxed">



<p>The syntax for multiple immediate assignments is
</p>



<div class="center" style="text-align: center;">


<p><span class="teletype">(  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>var</mtext></mrow><mn>1</mn></msub></mrow></mstyle></math>,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>var</mtext></mrow><mn>2</mn></msub></mrow></mstyle></math>, ..., 
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>var</mtext></mrow><mi>N</mi></msub></mrow></mstyle></math> ) := (  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>expr</mtext></mrow><mn>1</mn></msub></mrow></mstyle></math>,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>expr</mtext></mrow><mn>2</mn></msub></mrow></mstyle></math>, 
...,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>expr</mtext></mrow><mi>N</mi></msub></mrow></mstyle></math> ) </span>
</p>



</div>


<p>The value returned by an immediate assignment is the value of
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>expr</mtext></mrow><mi>N</mi></msub></mrow></mstyle></math>.<br/>
</p>



</div>
</div>



<p>This sets  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> to  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math> to  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>2</mn></mstyle></math>.
</p>



<div id="spadComm5-12" class="spadComm" >
<form id="formComm5-12" action="javascript:makeRequest('5-12');" >
<input id="comm5-12" type="text" class="command" style="width: 10em;" value="(x,y) := (1,2)" />
</form>
<span id="commSav5-12" class="commSav" >(x,y) := (1,2)</span>
<div id="mathAns5-12" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Multiple immediate assigments are parallel in the sense that the
expressions on the right are all evaluated before any assignments on
the left are made.  However, the order of evaluation of these
expressions is undefined.
</p>


<p>You can use multiple immediate assignment to swap the values held by
variables.
</p>



<div id="spadComm5-13" class="spadComm" >
<form id="formComm5-13" action="javascript:makeRequest('5-13');" >
<input id="comm5-13" type="text" class="command" style="width: 10em;" value="(x,y) := (y,x)" />
</form>
<span id="commSav5-13" class="commSav" >(x,y) := (y,x)</span>
<div id="mathAns5-13" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p> <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> has the previous value of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math>.
</p>



<div id="spadComm5-14" class="spadComm" >
<form id="formComm5-14" action="javascript:makeRequest('5-14');" >
<input id="comm5-14" type="text" class="command" style="width: 1em;" value="x" />
</form>
<span id="commSav5-14" class="commSav" >x</span>
<div id="mathAns5-14" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p> <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math> has the previous value of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math>.
</p>



<div id="spadComm5-15" class="spadComm" >
<form id="formComm5-15" action="javascript:makeRequest('5-15');" >
<input id="comm5-15" type="text" class="command" style="width: 1em;" value="y" />
</form>
<span id="commSav5-15" class="commSav" >y</span>
<div id="mathAns5-15" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>There is no syntactic form for multiple delayed assignments.  See the
discussion in section <a href="section-6.8.xhtml#ugUserDelay" class="ref" >ugUserDelay</a> 
about how FriCAS differentiates between delayed assignments and user
functions of no arguments.
</p>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-5.0.xhtml" style="margin-right: 10px;">Previous Section 5.0 Interactive Language</a><a href="section-5.2.xhtml" style="margin-right: 10px;">Next Section 5.2 Blocks</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>