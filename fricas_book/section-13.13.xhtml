<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section13.13</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-13.12.xhtml" style="margin-right: 10px;">Previous Section 13.12 Example 1: Clifford Algebra</a><a href="section-14.0.xhtml" style="margin-right: 10px;">Next Section 14.0  Browse</a><a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-13.13">
<h2 class="sectiontitle">13.13  Example 2: Building A Query Facility</h2>


<a name="ugDomsinsDatabase" class="label"/>


<p>We now turn to an entirely different kind of application,
building a query language for a database.
</p>


<p>Here is the practical problem to solve.
The Browse facility of FriCAS has a
database for all operations and constructors which is
stored on disk and accessed by HyperDoc.
For our purposes here, we regard each line of this file as having
eight fields:
<span class="teletype"> class, name, type, nargs, exposed, kind, origin,</span> and <span class="teletype"> condition.</span>
Here is an example entry:
</p>




<div class="verbatim"><br />
o`determinant`$-&gt;R`1`x`d`Matrix(R)`has(R,commutative("*"))<br />
</div>



<p>In English, the entry means:
</p>



<div class="quotation">
The operation <span style="font-weight: bold;"> determinant</span>:  $->R with <span class="italic"> 1</span> argument, is
<span class="italic"> exposed</span> and is exported by <span class="italic"> domain</span> <span class="teletype"> Matrix(R)</span>
if <span class="teletype"> R has commutative("*")</span>.
</div>



<p>Our task is to create a little query language that allows us
to get useful information from this database.
</p>



<a name="subsec-13.13.1"/>
<div class="subsection"  id="subsec-13.13.1">
<h3 class="subsectitle">13.13.1  A Little Query Language</h3>


<a name="ugDomainsQueryLanguage" class="label"/>


<p>First we design a simple language for accessing information from
the database.
We have the following simple model in mind for its design.
Think of the database as a box of index cards.
There is only one search operation---it
takes the name of a field and a predicate
<span class="index">predicate</span><a name="chapter-13-16"/>
(a boolean-valued function) defined on the fields of the
index cards.
When applied, the search operation goes through the entire box
selecting only those index cards for which the predicate is <span class="teletype"> true</span>.
The result of a search is a new box of index cards.
This process can be repeated again and again.
</p>


<p>The predicates all have a particularly simple form: <span class="italic"> symbol</span>
<span class="teletype"> =</span> <span class="italic"> pattern</span>, where <span class="italic"> symbol</span> designates one of the
fields, and <span class="italic"> pattern</span> is a <span class="italic">search string</span>---a string
that may contain a <span class="italic"><span class="teletype"> *</span></span> as a
wildcard.
Wildcards match any substring, including the empty string.
Thus the pattern <span class="italic"><span class="teletype"> "*ma*t</span></span> matches
<span class="italic"><span class="teletype"> "mat"</span>,</span><span class="teletype"> doormat</span>'' and <span class="italic"><span class="teletype"> smart</span></span>.
</p>


<p>To illustrate how queries are given, we give you a sneak preview
of the facility we are about to create.
</p>


<p>Extract the database of all FriCAS operations.
</p>




<div id="spadComm13-8">
<form action="javascript:makeRequest('13-8');" >
<input id="comm13-8" type="text" name="command" style="width: 12em;" value='ops := getDatabase("o")' />
</form>
<div id="mathAns13-8" >
</div>
</div>



<p>How many exposed three-argument <span style="font-weight: bold;"> map</span> operations involving streams?
</p>




<div id="spadComm13-9">
<form action="javascript:makeRequest('13-9');" >
<input id="comm13-9" type="text" name="command" style="width: 23em;" value='ops.(name="map").(nargs="3").(type="*Stream*")' />
</form>
<div id="mathAns13-9" >
</div>
</div>



<p>As usual, the arguments of <span style="font-weight: bold;"> elt</span> (<span class="teletype"> .</span>)
associate to the left.
The first <span style="font-weight: bold;"> elt</span> produces the set of all operations with
name <span class="teletype"> map</span>.
The second <span style="font-weight: bold;"> elt</span> produces the set of all map operations
with three arguments.
The third <span style="font-weight: bold;"> elt</span> produces the set of all three-argument map
operations having a type mentioning <span class="teletype"> Stream</span>.
</p>


<p>Another thing we'd like to do is to extract one field from each of
the index cards in the box and look at the result.
Here is an example of that kind of request.
</p>


<p>What constructors explicitly export a <span style="font-weight: bold;"> determinant</span> operation?
</p>




<div id="spadComm13-10">
<form action="javascript:makeRequest('13-10');" >
<input id="comm13-10" type="text" name="command" style="width: 31em;" value='elt(elt(elt(elt(ops,name="determinant"),origin),sort),unique)' />
</form>
<div id="mathAns13-10" >
</div>
</div>



<p>The first <span style="font-weight: bold;"> elt</span> produces the set of all index cards with
name <span class="teletype"> determinant</span>.
The second <span style="font-weight: bold;"> elt</span> extracts the <span class="teletype"> origin</span> component from
each index card. Each origin component
is the name of a constructor which directly
exports the operation represented by the index card.
Extracting a component from each index card produces what we call
a <span class="italic"> datalist</span>.
The third <span style="font-weight: bold;"> elt</span>, <span class="teletype"> sort</span>, causes the datalist of
origins to be sorted in alphabetic
order.
The fourth, <span class="teletype"> unique</span>, causes duplicates to be removed.
</p>


<p>Before giving you a more extensive demo of this facility,
we now build the necessary domains and packages to implement it.
We will introduce a few of our minor conveniences.
</p>




</div>



<a name="subsec-13.13.2"/>
<div class="subsection"  id="subsec-13.13.2">
<h3 class="subsectitle">13.13.2  The Database Constructor</h3>


<a name="ugDomainsDatabaseConstructor" class="label"/>


<p>We work from the top down. First, we define a database,
our box of index cards, as an abstract datatype.
For sake of illustration and generality,
we assume that an index card is some type <math xmlns="&mathml;" mathsize="big"><mstyle><mi>S</mi></mstyle></math>, and
that a database is a box of objects of type <math xmlns="&mathml;" mathsize="big"><mstyle><mi>S</mi></mstyle></math>.
Here is the FriCAS program defining the <span class="teletype"> Database</span>
domain.
</p>




<div class="verbatim"><br />
PI&nbsp;==&gt;&nbsp;PositiveInteger<br />
Database(S):&nbsp;Exports&nbsp;==&nbsp;Implementation&nbsp;where<br />
&nbsp;&nbsp;S:&nbsp;Object&nbsp;with&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;elt:&nbsp;(&nbsp;$,&nbsp;Symbol)&nbsp;-&gt;&nbsp;String<br />
&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;&nbsp;$&nbsp;-&gt;&nbsp;Void<br />
&nbsp;&nbsp;&nbsp;&nbsp;fullDisplay:&nbsp;&nbsp;$&nbsp;-&gt;&nbsp;Void<br />
<br />
&nbsp;&nbsp;Exports&nbsp;==&nbsp;with<br />
&nbsp;&nbsp;&nbsp;&nbsp;elt:&nbsp;(&nbsp;$,QueryEquation)&nbsp;-&gt;&nbsp;&nbsp;$&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Select&nbsp;by&nbsp;an&nbsp;equation<br />
&nbsp;&nbsp;&nbsp;&nbsp;elt:&nbsp;(&nbsp;$,&nbsp;Symbol)&nbsp;-&gt;&nbsp;DataList&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Select&nbsp;by&nbsp;a&nbsp;field&nbsp;name<br />
&nbsp;&nbsp;&nbsp;&nbsp;"+":&nbsp;(&nbsp;$,&nbsp;$)&nbsp;-&gt;&nbsp;&nbsp;$&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Combine&nbsp;two&nbsp;databases<br />
&nbsp;&nbsp;&nbsp;&nbsp;"-":&nbsp;(&nbsp;$,&nbsp;$)&nbsp;-&gt;&nbsp;&nbsp;$&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subtract&nbsp;one&nbsp;from&nbsp;another<br />
&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;&nbsp;$&nbsp;-&gt;&nbsp;Void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A&nbsp;brief&nbsp;database&nbsp;display<br />
&nbsp;&nbsp;&nbsp;&nbsp;fullDisplay:&nbsp;&nbsp;$&nbsp;-&gt;&nbsp;Void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A&nbsp;full&nbsp;database&nbsp;display<br />
&nbsp;&nbsp;&nbsp;&nbsp;fullDisplay:&nbsp;(&nbsp;$,PI,PI)&nbsp;-&gt;&nbsp;Void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A&nbsp;selective&nbsp;display<br />
&nbsp;&nbsp;&nbsp;&nbsp;coerce:&nbsp;&nbsp;$&nbsp;-&gt;&nbsp;OutputForm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Display&nbsp;a&nbsp;database<br />
&nbsp;&nbsp;Implementation&nbsp;==&nbsp;add<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br />
</div>



<p>The domain constructor takes a parameter <math xmlns="&mathml;" mathsize="big"><mstyle><mi>S</mi></mstyle></math>, which
stands for the class of index cards.
We describe an index card later.
Here think of an index card as a string which has
the eight fields mentioned above.
</p>


<p>First we tell FriCAS what operations we are going to require
from index cards.
We need an <span style="font-weight: bold;"> elt</span> to extract the contents of a field
(such as <span class="teletype"> name</span> and <span class="teletype"> type</span>) as a string.
For example,
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>c</mi><mo>.</mo><mi>name</mi></mrow></mstyle></math> returns a string that is the content of the
<math xmlns="&mathml;" mathsize="big"><mstyle><mi>name</mi></mstyle></math> field on the index card <math xmlns="&mathml;" mathsize="big"><mstyle><mi>c</mi></mstyle></math>.
We need to display an index card in two ways:
<span style="font-weight: bold;"> display</span> shows only the name and type of an
operation;
<span style="font-weight: bold;"> fullDisplay</span> displays all fields.
The display operations return no useful information and thus have
return type <span class="teletype"> Void</span>.
</p>


<p>Next we tell FriCAS what operations the user can apply
to the database.
This part defines our little query language.
The most important operation is
<span class="teletype"> db . field = pattern</span> which
returns a new database, consisting of all index
cards of <span class="teletype"> db</span> such that the <math xmlns="&mathml;" mathsize="big"><mstyle><mi>field</mi></mstyle></math> part of the index
card is matched by the string pattern called <math xmlns="&mathml;" mathsize="big"><mstyle><mi>pattern</mi></mstyle></math>.
The expression <span class="teletype"> field = pattern</span> is an object of type
<span class="teletype"> QueryEquation</span> (defined in the next section).
</p>


<p>Another <span style="font-weight: bold;"> elt</span> is needed to produce a <span class="teletype"> DataList</span>
object.
Operation <span class="teletype"> +</span> is to merge two databases together;
<span class="teletype"> -</span> is used to subtract away common entries in a second
database from an initial database.
There are three display functions.
The <span style="font-weight: bold;"> fullDisplay</span> function has two versions: one
that prints all the records, the other that prints only a fixed
number of records.
A <span style="font-weight: bold;"> coerce</span> to <span class="teletype"> OutputForm</span> creates a display
object.
</p>


<p>The <span class="teletype"> Implementation</span> part of <span class="teletype"> Database</span> is straightforward.
</p>



<div class="verbatim"><br />
&nbsp;&nbsp;Implementation&nbsp;==&nbsp;add<br />
&nbsp;&nbsp;&nbsp;&nbsp;s:&nbsp;Symbol<br />
&nbsp;&nbsp;&nbsp;&nbsp;Rep&nbsp;:=&nbsp;List&nbsp;S<br />
&nbsp;&nbsp;&nbsp;&nbsp;elt(db,equation)&nbsp;==&nbsp;...<br />
&nbsp;&nbsp;&nbsp;&nbsp;elt(db,key)&nbsp;==&nbsp;[x.key&nbsp;for&nbsp;x&nbsp;in&nbsp;db]::DataList(String)<br />
&nbsp;&nbsp;&nbsp;&nbsp;display(db)&nbsp;==&nbsp;&nbsp;for&nbsp;x&nbsp;in&nbsp;db&nbsp;repeat&nbsp;display&nbsp;x<br />
&nbsp;&nbsp;&nbsp;&nbsp;fullDisplay(db)&nbsp;==&nbsp;for&nbsp;x&nbsp;in&nbsp;db&nbsp;repeat&nbsp;fullDisplay&nbsp;x<br />
&nbsp;&nbsp;&nbsp;&nbsp;fullDisplay(db,&nbsp;n,&nbsp;m)&nbsp;==&nbsp;for&nbsp;x&nbsp;in&nbsp;db&nbsp;for&nbsp;i&nbsp;in&nbsp;1..m<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;i&nbsp;&gt;=&nbsp;n&nbsp;then&nbsp;fullDisplay&nbsp;x<br />
&nbsp;&nbsp;&nbsp;&nbsp;x+y&nbsp;==&nbsp;removeDuplicates!&nbsp;merge(x,y)<br />
&nbsp;&nbsp;&nbsp;&nbsp;x-y&nbsp;==&nbsp;mergeDifference(copy(x::Rep),<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y::Rep)$MergeThing(S)<br />
&nbsp;&nbsp;&nbsp;&nbsp;coerce(db):&nbsp;OutputForm&nbsp;==&nbsp;(#db)::&nbsp;OutputForm<br />
</div>



<p>The database is represented by a list of elements of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>S</mi></mstyle></math> (index cards).
We leave the definition of the first <span style="font-weight: bold;"> elt</span> operation
(on line 4) until the next section.
The second <span style="font-weight: bold;"> elt</span> collects all the strings with field name
<span class="italic"> key</span> into a list.
The <span style="font-weight: bold;"> display</span> function and first <span style="font-weight: bold;"> fullDisplay</span> function
simply call the corresponding functions from <math xmlns="&mathml;" mathsize="big"><mstyle><mi>S</mi></mstyle></math>.
The second <span style="font-weight: bold;"> fullDisplay</span> function provides an efficient way of
printing out a portion of a large list.
The <span class="teletype"> +</span> is defined by using the existing
<span class="spadfunFrom" style="font-weight: bold;">merge</span><span class="index">merge</span><a name="chapter-13-17"/><span class="index">List</span><a name="chapter-13-18"/> operation defined on lists, then
removing duplicates from the result.
The <span class="teletype"> -</span> operation requires writing a corresponding
subtraction operation.
A package <span class="teletype"> MergeThing</span> (not shown) provides this.
</p>


<p>The <span style="font-weight: bold;"> coerce</span> function converts the database to an
<span class="teletype"> OutputForm</span> by computing the number of index cards.
This is a good example of the independence of
the representation of an FriCAS object from how it presents
itself to the user. We usually do not want to look at a database---but
do care how many <span class="italic">hits</span> we get for a given query.
So we define the output representation of a database to be simply
the number of index cards our query finds.
</p>




</div>



<a name="subsec-13.13.3"/>
<div class="subsection"  id="subsec-13.13.3">
<h3 class="subsectitle">13.13.3  Query Equations</h3>


<a name="ugDomainsQueryEquations" class="label"/>


<p>The predicate for our search is given by an object of type
<span class="teletype"> QueryEquation</span>.
FriCAS does not have such an object yet so we
have to invent it.
</p>




<div class="verbatim"><br />
QueryEquation():&nbsp;Exports&nbsp;==&nbsp;Implementation&nbsp;where<br />
&nbsp;&nbsp;Exports&nbsp;==&nbsp;with<br />
&nbsp;&nbsp;&nbsp;&nbsp;equation:&nbsp;(Symbol,&nbsp;String)&nbsp;-&gt;&nbsp;&nbsp;$<br />
&nbsp;&nbsp;&nbsp;&nbsp;variable:&nbsp;&nbsp;$&nbsp;-&gt;&nbsp;Symbol<br />
&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$&nbsp;-&gt;&nbsp;String<br />
<br />
&nbsp;&nbsp;Implementation&nbsp;==&nbsp;add<br />
&nbsp;&nbsp;&nbsp;&nbsp;Rep&nbsp;:=&nbsp;Record(var:Symbol,&nbsp;val:String)<br />
&nbsp;&nbsp;&nbsp;&nbsp;equation(x,&nbsp;s)&nbsp;==&nbsp;[x,&nbsp;s]<br />
&nbsp;&nbsp;&nbsp;&nbsp;variable&nbsp;q&nbsp;==&nbsp;q.var<br />
&nbsp;&nbsp;&nbsp;&nbsp;value&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;==&nbsp;q.val<br />
</div>



<p>FriCAS converts an input expression of the form
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mrow><mtext mathvariant='sans-serif-italic'>a</mtext></mrow><mo>=</mo><mrow><mtext mathvariant='sans-serif-italic'>b</mtext></mrow></mrow></mstyle></math> to <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>equation</mi><mo>(</mo><mrow><mtext mathvariant='sans-serif-italic'>a,b</mtext></mrow><mo>)</mo></mrow></mstyle></math>.
Our equations always have a symbol on the left and a string
on the right.
The <span class="teletype"> Exports</span> part thus specifies an operation
<span style="font-weight: bold;"> equation</span> to create a query equation, and
<span style="font-weight: bold;"> variable</span> and <span style="font-weight: bold;"> value</span> to select the left- and
right-hand sides.
The <span class="teletype"> Implementation</span> part uses <span class="teletype"> Record</span> for a
space-efficient representation of an equation.
</p>


<p>Here is the missing definition for the <span style="font-weight: bold;"> elt</span> function of
<span class="teletype"> Database</span> in the last section:
</p>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;&nbsp;elt(db,eq)&nbsp;==<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;field&nbsp;&nbsp;:=&nbsp;variable&nbsp;eq<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value&nbsp;:=&nbsp;value&nbsp;eq<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[x&nbsp;for&nbsp;x&nbsp;in&nbsp;db&nbsp;|&nbsp;matches?(value,x.field)]<br />
</div>



<p>Recall that a database is represented by a list.
Line 4 simply runs over that list collecting all elements
such that the pattern (that is, <math xmlns="&mathml;" mathsize="big"><mstyle><mi>value</mi></mstyle></math>)
matches the selected field of the element.
</p>




</div>



<a name="subsec-13.13.4"/>
<div class="subsection"  id="subsec-13.13.4">
<h3 class="subsectitle">13.13.4  DataLists</h3>


<a name="ugDomainsDataLists" class="label"/>


<p>Type <span class="teletype"> DataList</span> is a new type invented to hold the result
of selecting one field from each of the index cards in the box.
It is useful to make datalists extensions of lists---lists that
have special <span style="font-weight: bold;"> elt</span> operations defined on them for
sorting and removing duplicates.
</p>




<div class="verbatim"><br />
DataList(S:OrderedSet)&nbsp;:&nbsp;Exports&nbsp;==&nbsp;Implementation&nbsp;where<br />
&nbsp;&nbsp;Exports&nbsp;==&nbsp;ListAggregate(S)&nbsp;with<br />
&nbsp;&nbsp;&nbsp;&nbsp;elt:&nbsp;($,"unique")&nbsp;-&gt;&nbsp;$<br />
&nbsp;&nbsp;&nbsp;&nbsp;elt:&nbsp;($,"sort")&nbsp;-&gt;&nbsp;$<br />
&nbsp;&nbsp;&nbsp;&nbsp;elt:&nbsp;($,"count")&nbsp;-&gt;&nbsp;NonNegativeInteger<br />
&nbsp;&nbsp;&nbsp;&nbsp;coerce:&nbsp;List&nbsp;S&nbsp;-&gt;&nbsp;$<br />
<br />
&nbsp;&nbsp;Implementation&nbsp;==&nbsp;&nbsp;List(S)&nbsp;add<br />
&nbsp;&nbsp;&nbsp;&nbsp;Rep&nbsp;:=&nbsp;List&nbsp;S<br />
&nbsp;&nbsp;&nbsp;&nbsp;elt(x,"unique")&nbsp;==&nbsp;removeDuplicates(x)<br />
&nbsp;&nbsp;&nbsp;&nbsp;elt(x,"sort")&nbsp;==&nbsp;sort(x)<br />
&nbsp;&nbsp;&nbsp;&nbsp;elt(x,"count")&nbsp;==&nbsp;#x<br />
&nbsp;&nbsp;&nbsp;&nbsp;coerce(x:List&nbsp;S)&nbsp;==&nbsp;x&nbsp;::&nbsp;$<br />
</div>



<p>The <span class="teletype"> Exports</span> part asserts that datalists belong to the
category <span class="teletype"> ListAggregate</span>.
Therefore, you can use all the usual list operations on datalists,
such as <span class="spadfunFrom" style="font-weight: bold;">first</span><span class="index">first</span><a name="chapter-13-19"/><span class="index">List</span><a name="chapter-13-20"/>, <span class="spadfunFrom" style="font-weight: bold;">rest</span><span class="index">rest</span><a name="chapter-13-21"/><span class="index">List</span><a name="chapter-13-22"/>, and
<span class="spadfunFrom" style="font-weight: bold;">concat</span><span class="index">concat</span><a name="chapter-13-23"/><span class="index">List</span><a name="chapter-13-24"/>.
In addition, datalists have four explicit operations.
Besides the three <span style="font-weight: bold;"> elt</span> operations, there is a
<span style="font-weight: bold;"> coerce</span> operation that creates datalists from lists.
</p>


<p>The <span class="teletype"> Implementation</span> part needs only to define four functions.
All the rest are obtained from <span class="teletype"> List(S)</span>.
</p>




</div>



<a name="subsec-13.13.5"/>
<div class="subsection"  id="subsec-13.13.5">
<h3 class="subsectitle">13.13.5  Index Cards</h3>


<a name="ugDomainsDatabase" class="label"/>


<p>An index card comes from a file as one long string.
We define functions that extract substrings from the long
string.
Each field has a name that
is passed as a second argument to <span style="font-weight: bold;"> elt</span>.
</p>




<div class="verbatim"><br />
IndexCard()&nbsp;==&nbsp;Implementation&nbsp;where<br />
&nbsp;&nbsp;Exports&nbsp;==&nbsp;with<br />
&nbsp;&nbsp;&nbsp;&nbsp;elt:&nbsp;($,&nbsp;Symbol)&nbsp;-&gt;&nbsp;String<br />
&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;$&nbsp;-&gt;&nbsp;Void<br />
&nbsp;&nbsp;&nbsp;&nbsp;fullDisplay:&nbsp;$&nbsp;-&gt;&nbsp;Void<br />
&nbsp;&nbsp;&nbsp;&nbsp;coerce:&nbsp;String&nbsp;-&gt;&nbsp;$<br />
&nbsp;&nbsp;Implementation&nbsp;==&nbsp;String&nbsp;add&nbsp;...<br />
</div>



<p>We leave the <span class="teletype"> Implementation</span> part to the reader.
All operations involve straightforward string manipulations.
</p>




</div>



<a name="subsec-13.13.6"/>
<div class="subsection"  id="subsec-13.13.6">
<h3 class="subsectitle">13.13.6  Creating a Database</h3>


<a name="ugDomainsCreating" class="label"/>


<p>We must not forget one important operation: one that builds the database in the
first place!
We'll name it <span style="font-weight: bold;"> getDatabase</span> and put it in a package.
This function is implemented by calling the Common Lisp function
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>getBrowseDatabase</mi><mo>(</mo><mi>s</mi><mo>)</mo></mrow></mstyle></math> to get appropriate information from
Browse.
This operation takes a string indicating which lines you
want from the database: <span class="italic"><span class="teletype"> o</span></span> gives you all operation
lines, and <span class="italic"><span class="teletype"> k</span></span>, all constructor lines.
Similarly, <span class="italic"><span class="teletype"> c</span></span>, <span class="italic"><span class="teletype"> d</span></span>, and <span class="italic"><span class="teletype"> p</span></span> give
you all category, domain and package lines respectively.
</p>




<div class="verbatim"><br />
OperationsQuery():&nbsp;Exports&nbsp;==&nbsp;Implementation&nbsp;where<br />
&nbsp;&nbsp;Exports&nbsp;==&nbsp;with<br />
&nbsp;&nbsp;&nbsp;&nbsp;getDatabase:&nbsp;String&nbsp;-&gt;&nbsp;Database(IndexCard)<br />
<br />
&nbsp;&nbsp;Implementation&nbsp;==&nbsp;add<br />
&nbsp;&nbsp;&nbsp;&nbsp;getDatabase(s)&nbsp;==&nbsp;getBrowseDatabase(s)$Lisp<br />
</div>



<p>We do not bother creating a special name for databases of index
cards.
<span class="teletype"> Database (IndexCard)</span> will do.
Notice that we used the package <span class="teletype"> OperationsQuery</span> to
create, in effect,
a new kind of domain: <span class="teletype"> Database(IndexCard)</span>.
</p>




</div>



<a name="subsec-13.13.7"/>
<div class="subsection"  id="subsec-13.13.7">
<h3 class="subsectitle">13.13.7  Putting It All Together</h3>


<a name="ugDomainsPutting" class="label"/>


<p>To create the database facility, you put all these constructors
into one file.<span class="footnote">You could use separate files, but we
are putting them all together because, organizationally, that is
the logical thing to do.</span>
At the top of the file put <span class="teletype"> )abbrev</span> commands, giving the
constructor abbreviations you created.
</p>




<div class="verbatim"><br />
)abbrev&nbsp;domain&nbsp;&nbsp;ICARD&nbsp;&nbsp;&nbsp;IndexCard<br />
)abbrev&nbsp;domain&nbsp;&nbsp;QEQUAT&nbsp;&nbsp;QueryEquation<br />
)abbrev&nbsp;domain&nbsp;&nbsp;MTHING&nbsp;&nbsp;MergeThing<br />
)abbrev&nbsp;domain&nbsp;&nbsp;DLIST&nbsp;&nbsp;&nbsp;DataList<br />
)abbrev&nbsp;domain&nbsp;&nbsp;DBASE&nbsp;&nbsp;&nbsp;Database<br />
)abbrev&nbsp;package&nbsp;OPQUERY&nbsp;OperationsQuery<br />
</div>



<p>With all this in <span style="font-weight: bold;"> alql.spad</span>, for example, compile it using
<span class="index">compile</span><a name="chapter-13-25"/>
</p>



<div class="verbatim"><br />
)compile&nbsp;alql<br />
</div>


<p>and then load each of the constructors:
</p>



<div class="verbatim"><br />
)load&nbsp;ICARD&nbsp;QEQUAT&nbsp;MTHING&nbsp;DLIST&nbsp;DBASE&nbsp;OPQUERY<br />
</div>


<p><span class="index">load</span><a name="chapter-13-26"/>
You are ready to try some sample queries.
</p>




</div>



<a name="subsec-13.13.8"/>
<div class="subsection"  id="subsec-13.13.8">
<h3 class="subsectitle">13.13.8  Example Queries</h3>


<a name="ugDomainsExamples" class="label"/>


<p>Our first set of queries give some statistics on constructors in
the current FriCAS system.
</p>


<p>How many constructors does FriCAS have?
</p>




<div id="spadComm13-11">
<form action="javascript:makeRequest('13-11');" >
<input id="comm13-11" type="text" name="command" style="width: 11em;" value='ks := getDatabase "k"' />
</form>
<div id="mathAns13-11" >
</div>
</div>



<p>Break this down into the number of categories, domains, and packages.
</p>




<div id="spadComm13-12">
<form action="javascript:makeRequest('13-12');" >
<input id="comm13-12" type="text" name="command" style="width: 19em;" value='[ks.(kind=k) for k in ["c","d","p"] ]' />
</form>
<div id="mathAns13-12" >
</div>
</div>



<p>What are all the domain constructors that take no parameters?
</p>




<div id="spadComm13-13">
<form action="javascript:makeRequest('13-13');" >
<input id="comm13-13" type="text" name="command" style="width: 18em;" value='elt(ks.(kind="d").(nargs="0"),name)' />
</form>
<div id="mathAns13-13" >
</div>
</div>



<p>How many constructors have <span class="italic">Matrix</span> in their name?
</p>




<div id="spadComm13-14">
<form action="javascript:makeRequest('13-14');" >
<input id="comm13-14" type="text" name="command" style="width: 13em;" value='mk := ks.(name="*Matrix*")' />
</form>
<div id="mathAns13-14" >
</div>
</div>



<p>What are the names of those that are domains?
</p>




<div id="spadComm13-15">
<form action="javascript:makeRequest('13-15');" >
<input id="comm13-15" type="text" name="command" style="width: 12em;" value='elt(mk.(kind="d"),name)' />
</form>
<div id="mathAns13-15" >
</div>
</div>



<p>How many operations are there in the library?
</p>




<div id="spadComm13-16">
<form action="javascript:makeRequest('13-16');" >
<input id="comm13-16" type="text" name="command" style="width: 10em;" value='o := getDatabase "o"' />
</form>
<div id="mathAns13-16" >
</div>
</div>



<p>Break this down into categories, domains, and packages.
</p>




<div id="spadComm13-17">
<form action="javascript:makeRequest('13-17');" >
<input id="comm13-17" type="text" name="command" style="width: 18em;" value='[o.(kind=k) for k in ["c","d","p"] ]' />
</form>
<div id="mathAns13-17" >
</div>
</div>




<p>The query language is helpful in getting information about a
particular operation you might like to apply.
While this information can be obtained with
Browse, the use of the query database gives you data that you
can manipulate in the workspace.
</p>


<p>How many operations have <span class="italic">eigen</span> in the name?
</p>




<div id="spadComm13-18">
<form action="javascript:makeRequest('13-18');" >
<input id="comm13-18" type="text" name="command" style="width: 14em;" value='eigens := o.(name="*eigen*")' />
</form>
<div id="mathAns13-18" >
</div>
</div>



<p>What are their names?
</p>




<div id="spadComm13-19">
<form action="javascript:makeRequest('13-19');" >
<input id="comm13-19" type="text" name="command" style="width: 8em;" value='elt(eigens,name)' />
</form>
<div id="mathAns13-19" >
</div>
</div>



<p>Where do they come from?
</p>




<div id="spadComm13-20">
<form action="javascript:makeRequest('13-20');" >
<input id="comm13-20" type="text" name="command" style="width: 21em;" value='elt(elt(elt(eigens,origin),sort),unique) ' />
</form>
<div id="mathAns13-20" >
</div>
</div>



<p>The operations <span class="teletype"> +</span> and <span class="teletype"> -</span> are useful for
constructing small databases and combining them.
However, remember that the only matching you can do is string
matching.
Thus a pattern such as <span class="teletype"> "*Matrix*"</span> on the type field
matches
any type containing <span class="teletype"> Matrix</span>, <span class="teletype"> MatrixCategory</span>,
<span class="teletype"> SquareMatrix</span>, and so on.
</p>


<p>How many operations mention <span class="italic">Matrix</span> in their type?
</p>




<div id="spadComm13-21">
<form action="javascript:makeRequest('13-21');" >
<input id="comm13-21" type="text" name="command" style="width: 13em;" value='tm := o.(type="*Matrix*")' />
</form>
<div id="mathAns13-21" >
</div>
</div>



<p>How many operations come from constructors with <span class="italic">Matrix</span> in
their name?
</p>




<div id="spadComm13-22">
<form action="javascript:makeRequest('13-22');" >
<input id="comm13-22" type="text" name="command" style="width: 14em;" value='fm := o.(origin="*Matrix*")' />
</form>
<div id="mathAns13-22" >
</div>
</div>



<p>How many operations are in <math xmlns="&mathml;" mathsize="big"><mstyle><mi>fm</mi></mstyle></math> but not in <math xmlns="&mathml;" mathsize="big"><mstyle><mi>tm</mi></mstyle></math>?
</p>




<div id="spadComm13-23">
<form action="javascript:makeRequest('13-23');" >
<input id="comm13-23" type="text" name="command" style="width: 3em;" value='fm-tm ' />
</form>
<div id="mathAns13-23" >
</div>
</div>



<p>Display the operations that both mention <span class="italic">Matrix</span> in their type
and come from a constructor having <span class="italic">Matrix</span> in their name.
</p>




<div id="spadComm13-24">
<form action="javascript:makeRequest('13-24');" >
<input id="comm13-24" type="text" name="command" style="width: 10em;" value='fullDisplay(fm-%) ' />
</form>
<div id="mathAns13-24" >
</div>
</div>



<p>How many operations involve matrices?
</p>




<div id="spadComm13-25">
<form action="javascript:makeRequest('13-25');" >
<input id="comm13-25" type="text" name="command" style="width: 6em;" value='m := tm+fm ' />
</form>
<div id="mathAns13-25" >
</div>
</div>



<p>Display 4 of them.
</p>




<div id="spadComm13-26">
<form action="javascript:makeRequest('13-26');" >
<input id="comm13-26" type="text" name="command" style="width: 13em;" value='fullDisplay(m, 202, 205) ' />
</form>
<div id="mathAns13-26" >
</div>
</div>



<p>How many distinct names of operations involving matrices are there?
</p>




<div id="spadComm13-27">
<form action="javascript:makeRequest('13-27');" >
<input id="comm13-27" type="text" name="command" style="width: 18em;" value='elt(elt(elt(m,name),unique),count) ' />
</form>
<div id="mathAns13-27" >
</div>
</div>






</div>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-13.12.xhtml" style="margin-right: 10px;">Previous Section 13.12 Example 1: Clifford Algebra</a><a href="section-14.0.xhtml" style="margin-right: 10px;">Next Section 14.0  Browse</a><a href="book-index.xhtml">Book Index</a></body>
</html>