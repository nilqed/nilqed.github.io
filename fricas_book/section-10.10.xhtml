<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section10.10</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-10.9.xhtml" style="margin-right: 10px;">Previous Section 10.9 Functions Producing Functions</a><a href="section-11.0.xhtml" style="margin-right: 10px;">Next Section 11.0 Packages</a><a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-10.10">
<h2 class="sectiontitle">10.10  Automatic Newton Iteration Formulas</h2>


<a name="ugIntProgNewton" class="label"/>


<p>This setting is needed to get Newton's iterations to converge.
</p>




<div id="spadComm10-23" class="spadComm" >
<form id="formComm10-23" action="javascript:makeRequest('10-23');" >
<input id="comm10-23" type="text" class="command" style="width: 17em;" value=")set streams calculate 10" />
</form>
<span id="commSav10-23" class="commSav" >)set streams calculate 10</span>
<div id="mathAns10-23" ></div>
</div>



<p>We resume
our continuing saga of arrows and complex functions.
Suppose we want to investigate the behavior of Newton's iteration function
<span class="index">Newton iteration</span><a name="chapter-10-9"/>
in the complex plane.
Given a function  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math>, we want to find the complex values
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>z</mi></mstyle></math> such that  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>f</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo>=</mo><mn>0</mn></mrow></mstyle></math>.
</p>


<p>The first step is to produce a Newton iteration formula for
a given  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math>:
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>x</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>x</mi><mi>n</mi></msub><mo>-</mo><mfrac><mrow><mi>f</mi><mo>(</mo><msub><mi>x</mi><mi>n</mi></msub><mo>)</mo></mrow><mrow><mi>f</mi><mo>'</mo><mo>(</mo><msub><mi>x</mi><mi>n</mi></msub><mo>)</mo></mrow></mfrac><mo>.</mo></mrow></mstyle></math>
We represent this formula by a function  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>g</mi></mstyle></math>
that performs the computation on the right-hand side, that is,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>x</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mi>g</mi><mo>(</mo><msub><mi>x</mi><mi>n</mi></msub><mo>)</mo></mrow></mstyle></math>.
</p>


<p>The type <span class="teletype">Expression Integer</span> (abbreviated <span class="teletype">EXPR
INT</span>) is used to represent general symbolic expressions in
FriCAS.
<span class="index">Expression</span><a name="chapter-10-10"/>
To make our facility as general as possible, we assume
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math> has this type.
Given  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math>, we want
to produce a Newton iteration function  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>g</mi></mstyle></math> which,
given a complex point  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>x</mi><mi>n</mi></msub></mrow></mstyle></math>, delivers the next
Newton iteration point  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>x</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow></mstyle></math>.
</p>


<p>This time we write an input file called <span style="font-weight: bold;"> newton.input</span>.
We need to import <span class="teletype">MakeUnaryCompiledFunction</span> (discussed
in the last section), call it with appropriate types, and then define
the function  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>newtonStep</mi></mstyle></math> which references it.
Here is the function  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>newtonStep</mi></mstyle></math>:
</p>




<div class="verbatim"><br />
C&nbsp;:=&nbsp;Complex&nbsp;DoubleFloat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;complex&nbsp;numbers<br />
complexFunPack:=MakeUnaryCompiledFunction(EXPR&nbsp;INT,C,C)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Package&nbsp;for&nbsp;making&nbsp;functions<br />
<br />
newtonStep(f)&nbsp;==&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Newton's&nbsp;iteration&nbsp;function<br />
&nbsp;&nbsp;fun&nbsp;&nbsp;:=&nbsp;complexNumericFunction&nbsp;f&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Function&nbsp;for&nbsp;$f$<br />
&nbsp;&nbsp;deriv&nbsp;:=&nbsp;complexDerivativeFunction(f,1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Function&nbsp;for&nbsp;$f'$<br />
&nbsp;&nbsp;(x:C):C&nbsp;+-&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return&nbsp;the&nbsp;iterator&nbsp;function<br />
&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;-&nbsp;fun(x)/deriv(x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
<br />
complexNumericFunction&nbsp;f&nbsp;==&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Turn&nbsp;an&nbsp;expression&nbsp;$f$&nbsp;into&nbsp;a<br />
&nbsp;&nbsp;v&nbsp;:=&nbsp;theVariableIn&nbsp;f&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function<br />
&nbsp;&nbsp;compiledFunction(f,&nbsp;v)$complexFunPack<br />
<br />
complexDerivativeFunction(f,n)&nbsp;==&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create&nbsp;an&nbsp;nth&nbsp;derivative<br />
&nbsp;&nbsp;v&nbsp;:=&nbsp;theVariableIn&nbsp;f&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function<br />
&nbsp;&nbsp;df&nbsp;:=&nbsp;D(f,v,n)<br />
&nbsp;&nbsp;compiledFunction(df,&nbsp;v)$complexFunPack<br />
<br />
theVariableIn&nbsp;f&nbsp;==&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns&nbsp;the&nbsp;variable&nbsp;in&nbsp;$f$<br />
&nbsp;&nbsp;vl&nbsp;:=&nbsp;variables&nbsp;f&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;list&nbsp;of&nbsp;variables<br />
&nbsp;&nbsp;nv&nbsp;:=&nbsp; #&nbsp;vl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;number&nbsp;of&nbsp;variables<br />
&nbsp;&nbsp;nv&nbsp;&gt;&nbsp;1&nbsp;=&gt;&nbsp;error&nbsp;"Expression&nbsp;is&nbsp;not&nbsp;univariate."<br />
&nbsp;&nbsp;nv&nbsp;=&nbsp;0&nbsp;=&gt;&nbsp;'x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return&nbsp;a&nbsp;dummy&nbsp;variable<br />
&nbsp;&nbsp;first&nbsp;vl<br />
</div>



<p>Do you see what is going on here?
A formula  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math> is passed into the function <span style="font-weight: bold;"> newtonStep</span>.
First, the function turns  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math> into a compiled program mapping
complex numbers into complex numbers.  Next, it does the same thing
for the derivative of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math>.  Finally, it returns a function which
computes a single step of Newton's iteration.
</p>


<p>The function <span style="font-weight: bold;"> complexNumericFunction</span> extracts the variable
from the expression  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math> and then turns  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math> into a function
which maps complex numbers into complex numbers. The function
<span style="font-weight: bold;"> complexDerivativeFunction</span> does the same thing for the
derivative of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math>.  The function <span style="font-weight: bold;"> theVariableIn</span>
extracts the variable from the expression  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math>, calling the function
<span style="font-weight: bold;"> error</span> if  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math> has more than one variable.
It returns the dummy variable  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> if  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math> has no variables.
</p>


<p>Let's now apply <span style="font-weight: bold;"> newtonStep</span> to the formula for computing
cube roots of two.
</p>


<p>Read the input file with the definitions.
</p>




<div id="spadComm10-24" class="spadComm" >
<form id="formComm10-24" action="javascript:makeRequest('10-24');" >
<input id="comm10-24" type="text" class="command" style="width: 8em;" value=")read newton" />
</form>
<span id="commSav10-24" class="commSav" >)read newton</span>
<div id="mathAns10-24" ></div>
</div>





<div id="spadComm10-25" class="spadComm" >
<form id="formComm10-25" action="javascript:makeRequest('10-25');" >
<input id="comm10-25" type="text" class="command" style="width: 10em;" value=")read vectors " />
</form>
<span id="commSav10-25" class="commSav" >)read vectors </span>
<div id="mathAns10-25" ></div>
</div>



<p>The cube root of two.
</p>




<div id="spadComm10-26" class="spadComm" >
<form id="formComm10-26" action="javascript:makeRequest('10-26');" >
<input id="comm10-26" type="text" class="command" style="width: 9em;" value="f := x^3 - 2" />
</form>
<span id="commSav10-26" class="commSav" >f := x^3 - 2</span>
<div id="mathAns10-26" ></div>
</div>



<p>Get Newton's iteration formula.
</p>




<div id="spadComm10-27" class="spadComm" >
<form id="formComm10-27" action="javascript:makeRequest('10-27');" >
<input id="comm10-27" type="text" class="command" style="width: 12em;" value="g := newtonStep f" />
</form>
<span id="commSav10-27" class="commSav" >g := newtonStep f</span>
<div id="mathAns10-27" ></div>
</div>



<p>Let  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> denote the result of
applying Newton's iteration once to the complex number  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>1</mn><mo>+</mo><mo>%</mo><mi>i</mi></mrow></mstyle></math>.
</p>




<div id="spadComm10-28" class="spadComm" >
<form id="formComm10-28" action="javascript:makeRequest('10-28');" >
<input id="comm10-28" type="text" class="command" style="width: 12em;" value="a := g(1.0 + %i)" />
</form>
<span id="commSav10-28" class="commSav" >a := g(1.0 + %i)</span>
<div id="mathAns10-28" ></div>
</div>



<p>Now apply it repeatedly. How fast does it converge?
</p>




<div id="spadComm10-29" class="spadComm" >
<form id="formComm10-29" action="javascript:makeRequest('10-29');" >
<input id="comm10-29" type="text" class="command" style="width: 18em;" value="[(a := g(a)) for i in 1..]" />
</form>
<span id="commSav10-29" class="commSav" >[(a := g(a)) for i in 1..]</span>
<div id="mathAns10-29" ></div>
</div>



<p>Check the accuracy of the last iterate.
</p>




<div id="spadComm10-30" class="spadComm" >
<form id="formComm10-30" action="javascript:makeRequest('10-30');" >
<input id="comm10-30" type="text" class="command" style="width: 3em;" value="a^3" />
</form>
<span id="commSav10-30" class="commSav" >a^3</span>
<div id="mathAns10-30" ></div>
</div>



<p>In MappingPackage1, we show how functions can be
manipulated as objects in FriCAS.
A useful operation to consider here is  <math xmlns="&mathml;" mathsize="big"><mstyle><mo>*</mo></mstyle></math>, which means
composition.
For example  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>g</mi><mo>*</mo><mi>g</mi></mrow></mstyle></math> causes the Newton iteration formula
to be applied twice.
Correspondingly,  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>g</mi><mo>*</mo><mo>*</mo><mi>n</mi></mrow></mstyle></math> means to apply the iteration formula
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> times.
</p>


<p>Apply  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>g</mi></mstyle></math> twice to the point  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>1</mn><mo>+</mo><mo>%</mo><mi>i</mi></mrow></mstyle></math>.
</p>



<div id="spadComm10-31" class="spadComm" >
<form id="formComm10-31" action="javascript:makeRequest('10-31');" >
<input id="comm10-31" type="text" class="command" style="width: 12em;" value="(g*g) (1.0 + %i)" />
</form>
<span id="commSav10-31" class="commSav" >(g*g) (1.0 + %i)</span>
<div id="mathAns10-31" ></div>
</div>



<p>Apply  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>g</mi></mstyle></math> 11 times.
</p>




<div id="spadComm10-32" class="spadComm" >
<form id="formComm10-32" action="javascript:makeRequest('10-32');" >
<input id="comm10-32" type="text" class="command" style="width: 13em;" value="(g^11) (1.0 + %i)" />
</form>
<span id="commSav10-32" class="commSav" >(g^11) (1.0 + %i)</span>
<div id="mathAns10-32" ></div>
</div>



<p>Look now at the vector field and surface generated
after two steps of Newton's formula for the cube root of two.
The poles in these pictures represent bad starting values, and the
flat areas are the regions of convergence to the three roots.
</p>



<p>The vector field.
</p>




<div class="spadgraph" style="width: 20em">
drawComplexVectorField(g^3,-3..3,-3..3)
</div>



<div class="image">
<img src="ps/vectorRoot.png" alt="picture" />
</div>

<p>The surface.
</p>




<div class="spadgraph" style="width: 15em">
drawComplex(g^3,-3..3,-3..3)
</div>



<div class="image">
<img src="ps/complexRoot.png" alt="picture" />
</div>



<p><!--
 Here and throughout the book we should use the terminology
 "type of a function", rather than talking about source and target.
 This is how the brave new world of SMWATT regards them. A function
 is just an object that has a mapping type.
-->
</p>



</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-10.9.xhtml" style="margin-right: 10px;">Previous Section 10.9 Functions Producing Functions</a><a href="section-11.0.xhtml" style="margin-right: 10px;">Next Section 11.0 Packages</a><a href="book-index.xhtml">Book Index</a></body>
</html>