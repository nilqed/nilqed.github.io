<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section9.3</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-9.2.xhtml" style="margin-right: 10px;">Previous Section 9.2 BalancedBinaryTree</a><a href="section-9.4.xhtml" style="margin-right: 10px;">Next Section 9.4 BinaryExpansion</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-9.3">
<h2 class="sectiontitle">9.3  BasicOperator</h2>


<a name="BasicOperatorXmpPage" class="label"/>


<p>A basic operator is an object that can be symbolically applied to a
list of arguments from a set, the result being a kernel over that set
or an expression.  In addition to this section, please see
<a href="section-9.21.xhtml#ExpressionXmpPage" class="ref" >ExpressionXmpPage</a>  and 
<a href="section-9.37.xhtml#KernelXmpPage" class="ref" >KernelXmpPage</a>  for additional
information and examples.
</p>


<p>You create an object of type <span class="teletype">BasicOperator</span> by using the
<span class="spadfunFrom" >operator</span><span class="index">operator</span><a name="chapter-9-6"/><span class="index">BasicOperator</span><a name="chapter-9-7"/> operation.  This first form of
this operation has one argument and it must be a symbol.  The symbol
should be quoted in case the name has been used as an identifier to
which a value has been assigned.
</p>


<p>A frequent application of <span class="teletype">BasicOperator</span> is the creation of an
operator to represent the unknown function when solving a differential
equation.
</p>


<p>Let <span class="teletype">y</span> be the unknown function in terms of <span class="teletype">x</span>.
</p>




<div id="spadComm9-21" class="spadComm" >
<form id="formComm9-21" action="javascript:makeRequest('9-21');" >
<input id="comm9-21" type="text" class="command" style="width: 11em;" value="y := operator 'y" />
</form>
<span id="commSav9-21" class="commSav" >y := operator 'y</span>
<div id="mathAns9-21" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>y</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: BasicOperator
</div>



<p>This is how you enter the equation <span class="teletype">y'' + y' + y = 0</span>.
</p>




<div id="spadComm9-22" class="spadComm" >
<form id="formComm9-22" action="javascript:makeRequest('9-22');" >
<input id="comm9-22" type="text" class="command" style="width: 28em;" value="deq := D(y x, x, 2) + D(y x, x) + y x = 0" />
</form>
<span id="commSav9-22" class="commSav" >deq := D(y x, x, 2) + D(y x, x) + y x = 0</span>
<div id="mathAns9-22" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mrow><mrow><msubsup><mi>y</mi><mrow><mspace width="0.5 em" /></mrow><mrow><mrow><mo>&prime;</mo><mo>&prime;</mo></mrow></mrow></msubsup></mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mo>+</mo><mrow><mrow><msubsup><mi>y</mi><mrow><mspace width="0.5 em" /></mrow><mrow><mo>&prime;</mo></mrow></msubsup></mrow><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mo>+</mo><mrow><mi>y</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow><mo>=</mo><mn>0</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Equation Expression Integer
</div>



<p>To solve the above equation, enter this.
</p>




<div id="spadComm9-23" class="spadComm" >
<form id="formComm9-23" action="javascript:makeRequest('9-23');" >
<input id="comm9-23" type="text" class="command" style="width: 11em;" value="solve(deq, y, x)" />
</form>
<span id="commSav9-23" class="commSav" >solve(deq, y, x)</span>
<div id="mathAns9-23" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mi>particular</mi><mo>=</mo><mn>0</mn></mrow><mo>,</mo><mrow><mi>basis</mi><mo>=</mo><mrow><mo>[</mo><mrow><mrow><mo>cos</mo><mo>(</mo><mfrac><mrow><mi>x</mi><mspace width="0.5 em" /><mrow><msqrt><mn>3</mn></msqrt></mrow></mrow><mn>2</mn></mfrac><mo>)</mo></mrow><mspace width="0.5 em" /><mrow><msup><mi>e</mi><mrow><mo>(</mo><mo>-</mo><mfrac><mi>x</mi><mn>2</mn></mfrac><mo>)</mo></mrow></msup></mrow></mrow><mo>,</mo><mrow><mrow><msup><mi>e</mi><mrow><mo>(</mo><mo>-</mo><mfrac><mi>x</mi><mn>2</mn></mfrac><mo>)</mo></mrow></msup></mrow><mspace width="0.5 em" /><mrow><mo>sin</mo><mo>(</mo><mfrac><mrow><mi>x</mi><mspace width="0.5 em" /><mrow><msqrt><mn>3</mn></msqrt></mrow></mrow><mn>2</mn></mfrac><mo>)</mo></mrow></mrow><mo>]</mo></mrow></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union(Record(particular: Expression Integer,
basis: List Expression Integer),...)
</div>



<p><!--(This reference doesn't exist!!)See <a href="ugProblemDEQPage" class="ref" >ugProblemDEQPage</a>  
in Section <a href="ugProblemDEQNumber" class="ref" >ugProblemDEQNumber</a> 
for this kind of use of <span class="teletype">BasicOperator</span>.-->
</p>


<p>Use the single argument form of <span class="spadfunFrom" >operator</span><span class="index">operator</span><a name="chapter-9-8"/><span class="index">BasicOperator</span><a name="chapter-9-9"/>
(as above) when you intend to use the operator to create functional
expressions with an arbitrary number of arguments
</p>


<p><span class="italic">Nary</span> means an arbitrary number of arguments can be used
in the functional expressions.
</p>




<div id="spadComm9-24" class="spadComm" >
<form id="formComm9-24" action="javascript:makeRequest('9-24');" >
<input id="comm9-24" type="text" class="command" style="width: 5em;" value="nary? y" />
</form>
<span id="commSav9-24" class="commSav" >nary? y</span>
<div id="mathAns9-24" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>





<div id="spadComm9-25" class="spadComm" >
<form id="formComm9-25" action="javascript:makeRequest('9-25');" >
<input id="comm9-25" type="text" class="command" style="width: 6em;" value="unary? y" />
</form>
<span id="commSav9-25" class="commSav" >unary? y</span>
<div id="mathAns9-25" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>Use the two-argument form when you want to restrict the number of
arguments in the functional expressions created with the operator.
</p>


<p>This operator can only be used to create functional expressions
with one argument.
</p>




<div id="spadComm9-26" class="spadComm" >
<form id="formComm9-26" action="javascript:makeRequest('9-26');" >
<input id="comm9-26" type="text" class="command" style="width: 19em;" value="opOne := operator('opOne, 1)" />
</form>
<span id="commSav9-26" class="commSav" >opOne := operator('opOne, 1)</span>
<div id="mathAns9-26" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>opOne</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: BasicOperator
</div>





<div id="spadComm9-27" class="spadComm" >
<form id="formComm9-27" action="javascript:makeRequest('9-27');" >
<input id="comm9-27" type="text" class="command" style="width: 8em;" value="nary? opOne" />
</form>
<span id="commSav9-27" class="commSav" >nary? opOne</span>
<div id="mathAns9-27" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>





<div id="spadComm9-28" class="spadComm" >
<form id="formComm9-28" action="javascript:makeRequest('9-28');" >
<input id="comm9-28" type="text" class="command" style="width: 8em;" value="unary? opOne" />
</form>
<span id="commSav9-28" class="commSav" >unary? opOne</span>
<div id="mathAns9-28" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>Use <span class="spadfunFrom" >arity</span><span class="index">arity</span><a name="chapter-9-10"/><span class="index">BasicOperator</span><a name="chapter-9-11"/> to learn the number of arguments 
that can be used.  It returns <span class="teletype">"false"</span> if the operator is nary.
</p>




<div id="spadComm9-29" class="spadComm" >
<form id="formComm9-29" action="javascript:makeRequest('9-29');" >
<input id="comm9-29" type="text" class="command" style="width: 8em;" value="arity opOne" />
</form>
<span id="commSav9-29" class="commSav" >arity opOne</span>
<div id="mathAns9-29" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union(NonNegativeInteger,...)
</div>



<p>Use <span class="spadfunFrom" >name</span><span class="index">name</span><a name="chapter-9-12"/><span class="index">BasicOperator</span><a name="chapter-9-13"/> to learn the name of an operator.
</p>




<div id="spadComm9-30" class="spadComm" >
<form id="formComm9-30" action="javascript:makeRequest('9-30');" >
<input id="comm9-30" type="text" class="command" style="width: 7em;" value="name opOne" />
</form>
<span id="commSav9-30" class="commSav" >name opOne</span>
<div id="mathAns9-30" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>opOne</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Symbol
</div>



<p>Use <span class="spadfunFrom" >is?</span><span class="index">is?</span><a name="chapter-9-14"/><span class="index">BasicOperator</span><a name="chapter-9-15"/> to learn if an operator has a
particular name.
</p>




<div id="spadComm9-31" class="spadComm" >
<form id="formComm9-31" action="javascript:makeRequest('9-31');" >
<input id="comm9-31" type="text" class="command" style="width: 10em;" value="is?(opOne, 'z2)" />
</form>
<span id="commSav9-31" class="commSav" >is?(opOne, 'z2)</span>
<div id="mathAns9-31" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>You can also use a string as the name to be tested against.
</p>




<div id="spadComm9-32" class="spadComm" >
<form id="formComm9-32" action="javascript:makeRequest('9-32');" >
<input id="comm9-32" type="text" class="command" style="width: 13em;" value='is?(opOne, "opOne")' />
</form>
<span id="commSav9-32" class="commSav" >is?(opOne, "opOne")</span>
<div id="mathAns9-32" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>You can attached named properties to an operator.  These are rarely
used at the top-level of the FriCAS interactive environment but are
used with FriCAS library source code.
</p>


<p>By default, an operator has no properties.
</p>




<div id="spadComm9-33" class="spadComm" >
<form id="formComm9-33" action="javascript:makeRequest('9-33');" >
<input id="comm9-33" type="text" class="command" style="width: 8em;" value="properties y" />
</form>
<span id="commSav9-33" class="commSav" >properties y</span>
<div id="mathAns9-33" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mi>table</mi><mo>(</mo><mo>)</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: AssociationList(String,None)
</div>



<p>The interface for setting and getting properties is somewhat awkward
because the property values are stored as values of type <span class="teletype">None</span>.
</p>


<p>Attach a property by using <span class="spadfunFrom" >setProperty</span><span class="index">setProperty</span><a name="chapter-9-16"/><span class="index">BasicOperator</span><a name="chapter-9-17"/>.
</p>




<div id="spadComm9-34" class="spadComm" >
<form id="formComm9-34" action="javascript:makeRequest('9-34');" >
<input id="comm9-34" type="text" class="command" style="width: 34em;" value='setProperty(y, "use", "unknown function" :: None )' />
</form>
<span id="commSav9-34" class="commSav" >setProperty(y, "use", "unknown function" :: None )</span>
<div id="mathAns9-34" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>y</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: BasicOperator
</div>





<div id="spadComm9-35" class="spadComm" >
<form id="formComm9-35" action="javascript:makeRequest('9-35');" >
<input id="comm9-35" type="text" class="command" style="width: 8em;" value="properties y" />
</form>
<span id="commSav9-35" class="commSav" >properties y</span>
<div id="mathAns9-35" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mi>table</mi><mo>(</mo><mrow><mtext><mrow><mtext mathvariant='monospace'>"use"</mtext></mrow></mtext><mo>=</mo><mi>NONE</mi></mrow><mo>)</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: AssociationList(String,None)
</div>



<p>We <span class="italic">know</span> the property value has type <span class="teletype">String</span>.
</p>




<div id="spadComm9-36" class="spadComm" >
<form id="formComm9-36" action="javascript:makeRequest('9-36');" >
<input id="comm9-36" type="text" class="command" style="width: 28em;" value='property(y, "use") :: None pretend String' />
</form>
<span id="commSav9-36" class="commSav" >property(y, "use") :: None pretend String</span>
<div id="mathAns9-36" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"unknownfunction"</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: String
</div>



<p>Use <span class="spadfunFrom" >deleteProperty!</span><span class="index">deleteProperty!</span><a name="chapter-9-18"/><span class="index">BasicOperator</span><a name="chapter-9-19"/> to destructively
remove a property.
</p>




<div id="spadComm9-37" class="spadComm" >
<form id="formComm9-37" action="javascript:makeRequest('9-37');" >
<input id="comm9-37" type="text" class="command" style="width: 17em;" value='deleteProperty!(y, "use")' />
</form>
<span id="commSav9-37" class="commSav" >deleteProperty!(y, "use")</span>
<div id="mathAns9-37" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>y</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: BasicOperator
</div>





<div id="spadComm9-38" class="spadComm" >
<form id="formComm9-38" action="javascript:makeRequest('9-38');" >
<input id="comm9-38" type="text" class="command" style="width: 8em;" value="properties y" />
</form>
<span id="commSav9-38" class="commSav" >properties y</span>
<div id="mathAns9-38" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mi>table</mi><mo>(</mo><mo>)</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: AssociationList(String,None)
</div>





</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-9.2.xhtml" style="margin-right: 10px;">Previous Section 9.2 BalancedBinaryTree</a><a href="section-9.4.xhtml" style="margin-right: 10px;">Next Section 9.4 BinaryExpansion</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>