<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section1.5</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-1.4.xhtml" style="margin-right: 10px;">Previous Section 1.4 Numbers</a><a href="section-1.6.xhtml" style="margin-right: 10px;">Next Section 1.6 Expanding to Higher Dimensions</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-1.5">
<h2 class="sectiontitle">1.5  Data Structures</h2>


<a name="ugIntroCollect" class="label"/>

<p>FriCAS has a large variety of data structures available.  Many
data structures are particularly useful for interactive computation
and others are useful for building applications.  The data structures
of FriCAS are organized into <span style="font-style: italic;"> category hierarchies</span>.
</p>


<p>A <span class="italic">list</span>, <span class="footnote">Lists are discussed in Section <a href="section-9.1.xhtml#AssociationListXmpPage" class="ref" >ListXmpPage</a></span>, is the most commonly used data structure in
FriCAS for holding objects all of the same type. The name <span class="italic">list</span> is
short for <span class="italic">linked-list of nodes.</span> Each node consists of a value
(<span class="spadfunFrom" style="font-weight: bold;">first</span><span class="index">first</span><a name="chapter-1-38"/><span class="index">List</span><a name="chapter-1-39"/>) and a link (<span class="spadfunFrom" style="font-weight: bold;">rest</span><span class="index">rest</span><a name="chapter-1-40"/><span class="index">List</span><a name="chapter-1-41"/>) that
points to the next node, or to a distinguished value denoting the
empty list.  To get to, say, the third element, FriCAS starts at the
front of the list, then traverses across two links to the third node.
</p>


<p>Write a list of elements using square brackets with commas separating
the elements.
</p>



<div id="spadComm1-72" class="spadComm" >
<form id="formComm1-72" action="javascript:makeRequest('1-72');" >
<input id="comm1-72" type="text" class="command" style="width: 10em;" value="u := [1,-7,11]" />
</form>
<span id="commSav1-72" class="commSav" >u := [1,-7,11]</span>
<div id="mathAns1-72" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mo>-</mo><mn>7</mn><mo>,</mo><mn>11</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>This is the value at the third node.  Alternatively, you can say <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>u</mi><mo>.</mo><mn>3</mn></mrow></mstyle></math>.
</p>



<div id="spadComm1-73" class="spadComm" >
<form id="formComm1-73" action="javascript:makeRequest('1-73');" >
<input id="comm1-73" type="text" class="command" style="width: 12em;" value="first rest rest u" />
</form>
<span id="commSav1-73" class="commSav" >first rest rest u</span>
<div id="mathAns1-73" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>11</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Many operations are defined on lists, such as: <span style="font-weight: bold;"> empty?</span>, to test
that a list has no elements; <span style="font-weight: bold;"> cons</span><math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mi>x</mi><mo>,</mo><mi>l</mi><mo>)</mo></mrow></mstyle></math>, to create a new list
with <span style="font-weight: bold;"> first</span> element <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> and <span style="font-weight: bold;"> rest</span> <math xmlns="&mathml;" mathsize="big"><mstyle><mi>l</mi></mstyle></math>; <span style="font-weight: bold;"> reverse</span>, to
create a new list with elements in reverse order; and <span style="font-weight: bold;"> sort</span>, to
arrange elements in order.
</p>


<p>An important point about lists is that they are <span class="italic">mutable</span>: their
constituent elements and links can be changed <span class="italic">in place.</span>
To do this, use any of the operations whose names end with the
character ``<span class="teletype">!</span>''.
</p>


<p>The operation <span class="spadfunFrom" style="font-weight: bold;">concat!</span><span class="index">concat!</span><a name="chapter-1-42"/><span class="index">List</span><a name="chapter-1-43"/><math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mi>u</mi><mo>,</mo><mi>v</mi><mo>)</mo></mrow></mstyle></math> replaces the
last link of the list <math xmlns="&mathml;" mathsize="big"><mstyle><mi>u</mi></mstyle></math> to point to some other list <math xmlns="&mathml;" mathsize="big"><mstyle><mi>v</mi></mstyle></math>.
Since <math xmlns="&mathml;" mathsize="big"><mstyle><mi>u</mi></mstyle></math> refers to the original list, this change is seen by <math xmlns="&mathml;" mathsize="big"><mstyle><mi>u</mi></mstyle></math>.
</p>



<div id="spadComm1-74" class="spadComm" >
<form id="formComm1-74" action="javascript:makeRequest('1-74');" >
<input id="comm1-74" type="text" class="command" style="width: 16em;" value="concat!(u,[9,1,3,-4]); u" />
</form>
<span id="commSav1-74" class="commSav" >concat!(u,[9,1,3,-4]); u</span>
<div id="mathAns1-74" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mo>-</mo><mn>7</mn><mo>,</mo><mn>11</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>3</mn><mo>,</mo><mo>-</mo><mn>4</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>A <span class="italic">cyclic list</span> is a list with a <span class="italic">cycle</span>: <span class="index">list:cyclic</span><a name="chapter-1-44"/> a
link pointing back to an earlier node of the list.  <span class="index">cyclic
list</span><a name="chapter-1-45"/> To create a cycle, first get a node somewhere down the list.
</p>



<div id="spadComm1-75" class="spadComm" >
<form id="formComm1-75" action="javascript:makeRequest('1-75');" >
<input id="comm1-75" type="text" class="command" style="width: 14em;" value="lastnode := rest(u,3)" />
</form>
<span id="commSav1-75" class="commSav" >lastnode := rest(u,3)</span>
<div id="mathAns1-75" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>9</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>3</mn><mo>,</mo><mo>-</mo><mn>4</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>Use <span class="spadfunFrom" style="font-weight: bold;">setrest!</span><span class="index">setrest!</span><a name="chapter-1-46"/><span class="index">List</span><a name="chapter-1-47"/> to change the link emanating from
that node to point back to an earlier part of the list.
</p>




<div id="spadComm1-76" class="spadComm" >
<form id="formComm1-76" action="javascript:makeRequest('1-76');" >
<input id="comm1-76" type="text" class="command" style="width: 21em;" value="setrest!(lastnode,rest(u,2)); u" />
</form>
<span id="commSav1-76" class="commSav" >setrest!(lastnode,rest(u,2)); u</span>
<div id="mathAns1-76" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mo>-</mo><mn>7</mn><mo>,</mo><mrow></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>A <span class="italic">stream</span> is a structure that (potentially) has an infinite
number of distinct elements. Think of a stream as an
<span class="italic">infinite list</span> where elements are computed successively.
<span class="footnote">Streams are discussed in Section{StreamXmpPage}.</span>
</p>


<p>Create an infinite stream of factored integers.  Only a certain number
of initial elements are computed and displayed.
</p>




<div id="spadComm1-77" class="spadComm" >
<form id="formComm1-77" action="javascript:makeRequest('1-77');" >
<input id="comm1-77" type="text" class="command" style="width: 20em;" value="[factor(i) for i in 2.. by 2]" />
</form>
<span id="commSav1-77" class="commSav" >[factor(i) for i in 2.. by 2]</span>
<div id="mathAns1-77" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mrow><msup><mn>2</mn><mn>2</mn></msup></mrow><mo>,</mo><mrow><mn>2</mn><mo></mo><mn>3</mn></mrow><mo>,</mo><mrow><msup><mn>2</mn><mn>3</mn></msup></mrow><mo>,</mo><mrow><mn>2</mn><mo></mo><mn>5</mn></mrow><mo>,</mo><mrow><mrow><msup><mn>2</mn><mn>2</mn></msup></mrow><mo></mo><mn>3</mn></mrow><mo>,</mo><mrow><mn>2</mn><mo></mo><mn>7</mn></mrow><mo>,</mo><mrow><msup><mn>2</mn><mn>4</mn></msup></mrow><mo>,</mo><mrow><mn>2</mn><mo></mo><mrow><msup><mn>3</mn><mn>2</mn></msup></mrow></mrow><mo>,</mo><mrow><mrow><msup><mn>2</mn><mn>2</mn></msup></mrow><mo></mo><mn>5</mn></mrow><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Factored Integer
</div>



<p>FriCAS represents streams by a collection of already-computed
elements together with a function to compute the next element <span class="italic">on
demand.</span>  Asking for the <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>-th element causes elements
<math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math> through <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> to be evaluated.
</p>



<div id="spadComm1-78" class="spadComm" >
<form id="formComm1-78" action="javascript:makeRequest('1-78');" >
<input id="comm1-78" type="text" class="command" style="width: 4em;" value="%.36" />
</form>
<span id="commSav1-78" class="commSav" >%.36</span>
<div id="mathAns1-78" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mn>2</mn><mn>3</mn></msup></mrow><mo></mo><mrow><msup><mn>3</mn><mn>2</mn></msup></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Factored Integer
</div>



<p>Streams can also be finite or cyclic.
They are implemented by a linked list structure similar to lists
and have many of the same operations.
For example, <span style="font-weight: bold;"> first</span> and <span style="font-weight: bold;"> rest</span> are used to access
elements and successive nodes of a stream.
</p>


<p>A <span class="italic">one-dimensional array</span> is another data structure used to hold
objects of the same type <span class="footnote">OnedimensionalArray is discussed in
Section <a href="section-9.57.xhtml#OneDimensionalArrayXmpPage" class="ref" >OneDimensionalArrayXmpPage</a></span>. Unlike lists,
one-dimensional arrays are inflexible---they are
<span class="index">array:one-dimensional</span><a name="chapter-1-48"/> implemented using a fixed block of
storage.  Their advantage is that they give quick and equal access
time to any element.
</p>


<p>A simple way to create a one-dimensional array is to apply the
operation <span style="font-weight: bold;"> oneDimensionalArray</span> to a list of elements.
</p>



<div id="spadComm1-79" class="spadComm" >
<form id="formComm1-79" action="javascript:makeRequest('1-79');" >
<input id="comm1-79" type="text" class="command" style="width: 27em;" value="a := oneDimensionalArray [1, -7, 3, 3/2]" />
</form>
<span id="commSav1-79" class="commSav" >a := oneDimensionalArray [1, -7, 3, 3/2]</span>
<div id="mathAns1-79" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mo>-</mo><mn>7</mn><mo>,</mo><mn>3</mn><mo>,</mo><mfrac><mn>3</mn><mn>2</mn></mfrac><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: OneDimensionalArray Fraction Integer
</div>



<p>One-dimensional arrays are also mutable: you can change their
constituent elements <span class="italic">in place.</span>
</p>



<div id="spadComm1-80" class="spadComm" >
<form id="formComm1-80" action="javascript:makeRequest('1-80');" >
<input id="comm1-80" type="text" class="command" style="width: 8em;" value="a.3 := 11; a" />
</form>
<span id="commSav1-80" class="commSav" >a.3 := 11; a</span>
<div id="mathAns1-80" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mo>-</mo><mn>7</mn><mo>,</mo><mn>11</mn><mo>,</mo><mfrac><mn>3</mn><mn>2</mn></mfrac><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: OneDimensionalArray Fraction Integer
</div>



<p>However, one-dimensional arrays are not flexible structures.
You cannot destructively <span style="font-weight: bold;"> concat!</span> them together.
</p>



<div id="spadComm1-81" class="spadComm" >
<form id="formComm1-81" action="javascript:makeRequest('1-81');" >
<input id="comm1-81" type="text" class="command" style="width: 25em;" value="concat!(a,oneDimensionalArray [1,-2])" />
</form>
<span id="commSav1-81" class="commSav" >concat!(a,oneDimensionalArray [1,-2])</span>
<div id="mathAns1-81" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;There&nbsp;are&nbsp;5&nbsp;exposed&nbsp;and&nbsp;0&nbsp;unexposed&nbsp;library&nbsp;operations&nbsp;named&nbsp;concat!<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;having&nbsp;2&nbsp;argument(s)&nbsp;but&nbsp;none&nbsp;was&nbsp;determined&nbsp;to&nbsp;be&nbsp;applicable.&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use&nbsp;HyperDoc&nbsp;Browse,&nbsp;or&nbsp;issue<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)display&nbsp;op&nbsp;concat!<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;learn&nbsp;more&nbsp;about&nbsp;the&nbsp;available&nbsp;operations.&nbsp;Perhaps&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;package-calling&nbsp;the&nbsp;operation&nbsp;or&nbsp;using&nbsp;coercions&nbsp;on&nbsp;the&nbsp;arguments<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;will&nbsp;allow&nbsp;you&nbsp;to&nbsp;apply&nbsp;the&nbsp;operation.<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;Cannot&nbsp;find&nbsp;a&nbsp;definition&nbsp;or&nbsp;applicable&nbsp;library&nbsp;operation&nbsp;named&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;concat!&nbsp;with&nbsp;argument&nbsp;type(s)&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OneDimensionalArray&nbsp;Fraction&nbsp;Integer<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OneDimensionalArray&nbsp;Integer<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perhaps&nbsp;you&nbsp;should&nbsp;use&nbsp;"@"&nbsp;to&nbsp;indicate&nbsp;the&nbsp;required&nbsp;return&nbsp;type,&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;"$"&nbsp;to&nbsp;specify&nbsp;which&nbsp;version&nbsp;of&nbsp;the&nbsp;function&nbsp;you&nbsp;need.<br />
</div>



<p>Examples of datatypes similar to <span class="teletype">OneDimensionalArray</span>
are: <span class="teletype">Vector</span> (vectors are mathematical structures
implemented by one-dimensional arrays), <span class="teletype">String</span> (arrays
of <span class="italic">characters,</span> represented by byte vectors), and
<span class="teletype">Bits</span> (represented by <span class="italic">bit vectors</span>).
</p>


<p>A vector of 32 bits, each representing the <span style="font-weight: bold;"> Boolean</span> value
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>.
</p>



<div id="spadComm1-82" class="spadComm" >
<form id="formComm1-82" action="javascript:makeRequest('1-82');" >
<input id="comm1-82" type="text" class="command" style="width: 9em;" value="bits(32,true)" />
</form>
<span id="commSav1-82" class="commSav" >bits(32,true)</span>
<div id="mathAns1-82" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"11111111111111111111111111111111"</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Bits
</div>



<p>A <span class="italic">flexible array</span> (<span class="footnote">FlexibleArray is discussed in Section
<a href="section-9.26.xhtml#FlexibleArrayXmpPage" class="ref" >FlexibleArrayXmpPage</a> </span>) is
a cross between a list <span class="index">array:flexible</span><a name="chapter-1-49"/> and a one-dimensional
array. Like a one-dimensional array, a flexible array occupies a fixed
block of storage.  Its block of storage, however, has room to expand.
When it gets full, it grows (a new, larger block of storage is
allocated); when it has too much room, it contracts.
</p>


<p>Create a flexible array of three elements.
</p>



<div id="spadComm1-83" class="spadComm" >
<form id="formComm1-83" action="javascript:makeRequest('1-83');" >
<input id="comm1-83" type="text" class="command" style="width: 20em;" value="f := flexibleArray [2, 7, -5]" />
</form>
<span id="commSav1-83" class="commSav" >f := flexibleArray [2, 7, -5]</span>
<div id="mathAns1-83" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mn>7</mn><mo>,</mo><mo>-</mo><mn>5</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FlexibleArray Integer
</div>



<p>Insert some elements between the second and third elements.
</p>



<div id="spadComm1-84" class="spadComm" >
<form id="formComm1-84" action="javascript:makeRequest('1-84');" >
<input id="comm1-84" type="text" class="command" style="width: 24em;" value="insert!(flexibleArray [11, -3],f,2)" />
</form>
<span id="commSav1-84" class="commSav" >insert!(flexibleArray [11, -3],f,2)</span>
<div id="mathAns1-84" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mn>11</mn><mo>,</mo><mo>-</mo><mn>3</mn><mo>,</mo><mn>7</mn><mo>,</mo><mo>-</mo><mn>5</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FlexibleArray Integer
</div>



<p>Flexible arrays are used to implement <span class="italic">heaps.</span> A <span class="italic">heap</span> is an
example of a data structure called a <span class="italic">priority queue</span>, where
elements are ordered with respect to one another. A heap
(<span class="footnote">Heap is discussed in Section <a href="section-9.32.xhtml#HeapXmpPage" class="ref" >HeapXmpPage</a> </span>) is organized so as to optimize insertion
and extraction of maximum elements.  The <span style="font-weight: bold;"> extract!</span> operation
returns the maximum element of the heap, after destructively removing
that element and reorganizing the heap so that the next maximum
element is ready to be delivered.
</p>


<p>An easy way to create a heap is to apply the operation <span class="italic">heap</span>
to a list of values.
</p>



<div id="spadComm1-85" class="spadComm" >
<form id="formComm1-85" action="javascript:makeRequest('1-85');" >
<input id="comm1-85" type="text" class="command" style="width: 18em;" value="h := heap [-4,7,11,3,4,-7]" />
</form>
<span id="commSav1-85" class="commSav" >h := heap [-4,7,11,3,4,-7]</span>
<div id="mathAns1-85" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>11</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>7</mn><mo>,</mo><mo>-</mo><mn>4</mn><mo>,</mo><mn>3</mn><mo>,</mo><mo>-</mo><mn>7</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Heap Integer
</div>



<p>This loop extracts elements one-at-a-time from <math xmlns="&mathml;" mathsize="big"><mstyle><mi>h</mi></mstyle></math> until the heap
is exhausted, returning the elements as a list in the order they were
extracted.
</p>



<div id="spadComm1-86" class="spadComm" >
<form id="formComm1-86" action="javascript:makeRequest('1-86');" >
<input id="comm1-86" type="text" class="command" style="width: 22em;" value="[extract!(h) while not empty?(h)]" />
</form>
<span id="commSav1-86" class="commSav" >[extract!(h) while not empty?(h)]</span>
<div id="mathAns1-86" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>11</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>3</mn><mo>,</mo><mo>-</mo><mn>4</mn><mo>,</mo><mo>-</mo><mn>7</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>A <span class="italic">binary tree</span> is a <span class="italic">tree</span> with at most two branches
<span class="index">tree</span><a name="chapter-1-50"/> per node: it is either empty, or else is a node
consisting of a value, and a left and right subtree (again, binary
trees). (<span class="footnote">BinarySearchTrees are discussed in Section 
<a href="section-9.5.xhtml#BinarySearchTreeXmpPage" class="ref" >BinarySearchTreeXmpPage</a> </span>)
Examples of binary tree types are <span class="teletype">BinarySearchTree</span>, 
<span class="teletype">PendantTree</span>, <span class="teletype">TournamentTree</span>, and <span class="teletype">BalancedBinaryTree</span>.
</p>


<p>A <span class="italic">binary search tree</span> is a binary tree such that,
<span class="index">tree:binary search</span><a name="chapter-1-51"/> for each node, the value of the node is
<span class="index">binary search tree</span><a name="chapter-1-52"/> greater than all values (if any) in the
left subtree, and less than or equal all values (if any) in the right
subtree.
</p>



<div id="spadComm1-87" class="spadComm" >
<form id="formComm1-87" action="javascript:makeRequest('1-87');" >
<input id="comm1-87" type="text" class="command" style="width: 22em;" value="binarySearchTree [5,3,2,9,4,7,11]" />
</form>
<span id="commSav1-87" class="commSav" >binarySearchTree [5,3,2,9,4,7,11]</span>
<div id="mathAns1-87" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>4</mn><mo>]</mo></mrow><mo>,</mo><mn>5</mn><mo>,</mo><mrow><mo>[</mo><mn>7</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>11</mn><mo>]</mo></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: BinarySearchTree PositiveInteger
</div>



<p>A <span class="italic">balanced binary tree</span> is useful for doing modular computations.
<span class="index">balanced binary tree</span><a name="chapter-1-53"/> Given a list <math xmlns="&mathml;" mathsize="big"><mstyle><mi>lm</mi></mstyle></math> of moduli,
<span class="index">tree:balanced binary</span><a name="chapter-1-54"/> <span style="font-weight: bold;"> modTree</span><math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mi>a</mi><mo>,</mo><mi>lm</mi><mo>)</mo></mrow></mstyle></math> produces
a balanced binary tree with the values <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math> at its leaves.
</p>



<div id="spadComm1-88" class="spadComm" >
<form id="formComm1-88" action="javascript:makeRequest('1-88');" >
<input id="comm1-88" type="text" class="command" style="width: 14em;" value="modTree(8,[2,3,5,7])" />
</form>
<span id="commSav1-88" class="commSav" >modTree(8,[2,3,5,7])</span>
<div id="mathAns1-88" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>0</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>1</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>A <span class="italic">set</span> is a collection of elements where duplication and order is
irrelevant. <span class="footnote">Sets are discussed in Section <a href="section-9.53.xhtml#MultiSetXmpPage" class="ref" >SetXmpPage</a>
</span> Sets are always finite and have no
corresponding structure like streams for infinite collections.
</p>


<p>Create sets using braces ``{`` and ``}'' rather than brackets.
</p>




<div id="spadComm1-89" class="spadComm" >
<form id="formComm1-89" action="javascript:makeRequest('1-89');" >
<input id="comm1-89" type="text" class="command" style="width: 18em;" value="fs := set[1/3,4/5,-1/3,4/5]" />
</form>
<span id="commSav1-89" class="commSav" >fs := set[1/3,4/5,-1/3,4/5]</span>
<div id="mathAns1-89" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>{</mo><mo>-</mo><mfrac><mn>1</mn><mn>3</mn></mfrac><mo>,</mo><mfrac><mn>1</mn><mn>3</mn></mfrac><mo>,</mo><mfrac><mn>4</mn><mn>5</mn></mfrac><mo>}</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Set Fraction Integer
</div>



<p>A <span class="italic">multiset</span> is a set that keeps track of the number of duplicate
values. <span class="footnote">Multisets are discussed in Section
<a href="section-9.53.xhtml#MultiSetXmpPage" class="ref" >MultiSetXmpPage</a> </span>
</p>


<p>For all the primes <math xmlns="&mathml;" mathsize="big"><mstyle><mi>p</mi></mstyle></math> between 2 and 1000, find the
distribution of <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>p</mi><mi>mod</mi><mn>5</mn></mrow></mstyle></math>.
</p>



<div id="spadComm1-90" class="spadComm" >
<form id="formComm1-90" action="javascript:makeRequest('1-90');" >
<input id="comm1-90" type="text" class="command" style="width: 28em;" value="multiset [x rem 5 for x in primes(2,1000)]" />
</form>
<span id="commSav1-90" class="commSav" >multiset [x rem 5 for x in primes(2,1000)]</span>
<div id="mathAns1-90" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>{</mo><mn>0</mn><mo>,</mo><mrow><mn>42</mn><mtext><mrow><mtext>:</mtext></mrow></mtext><mn>3</mn></mrow><mo>,</mo><mrow><mn>40</mn><mtext><mrow><mtext>:</mtext></mrow></mtext><mn>1</mn></mrow><mo>,</mo><mrow><mn>38</mn><mtext><mrow><mtext>:</mtext></mrow></mtext><mn>4</mn></mrow><mo>,</mo><mrow><mn>47</mn><mtext><mrow><mtext>:</mtext></mrow></mtext><mn>2</mn></mrow><mo>}</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Multiset Integer
</div>



<p>A <span class="italic">table</span> is conceptually a set of <span class="italic">key--value</span> pairs and is a
generalization of a multiset. For examples of tables, see 
<span class="teletype">AssociationList</span>, <span class="teletype">HashTable</span>, <span class="teletype">KeyedAccessFile</span>, 
<span class="teletype">Library</span>, <span class="teletype">SparseTable</span>, <span class="teletype">StringTable</span>, and <span class="teletype">Table</span>.  The
domain <span class="teletype">Table(Key, Entry)</span> provides a general-purpose type for
tables with <span class="italic">values</span> of type <math xmlns="&mathml;" mathsize="big"><mstyle><mi>Entry</mi></mstyle></math> indexed by <span class="italic">keys</span> of type
<math xmlns="&mathml;" mathsize="big"><mstyle><mi>Key</mi></mstyle></math>.
</p>


<p>Compute the above distribution of primes using tables.  First, let
<math xmlns="&mathml;" mathsize="big"><mstyle><mi>t</mi></mstyle></math> denote an empty table of keys and values, each of type <span class="teletype">Integer</span>.
</p>



<div id="spadComm1-91" class="spadComm" >
<form id="formComm1-91" action="javascript:makeRequest('1-91');" >
<input id="comm1-91" type="text" class="command" style="width: 25em;" value="t : Table(Integer,Integer) := empty()" />
</form>
<span id="commSav1-91" class="commSav" >t : Table(Integer,Integer) := empty()</span>
<div id="mathAns1-91" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mtext>table</mtext></mrow><mo>(</mo><mo>)</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Table(Integer,Integer)
</div>



<p>We define a function <span style="font-weight: bold;"> howMany</span> to return the number of values
of a given modulus <math xmlns="&mathml;" mathsize="big"><mstyle><mi>k</mi></mstyle></math> seen so far.  It calls
<span style="font-weight: bold;"> search</span><math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mi>k</mi><mo>,</mo><mi>t</mi><mo>)</mo></mrow></mstyle></math> which returns the number of values
stored under the key <math xmlns="&mathml;" mathsize="big"><mstyle><mi>k</mi></mstyle></math> in table <math xmlns="&mathml;" mathsize="big"><mstyle><mi>t</mi></mstyle></math>, or <span class="teletype"><span class="italic">failed</span></span>
if no such value is yet stored in <math xmlns="&mathml;" mathsize="big"><mstyle><mi>t</mi></mstyle></math> under <math xmlns="&mathml;" mathsize="big"><mstyle><mi>k</mi></mstyle></math>.
</p>


<p>In English, this says ``Define <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>howMany</mi><mo>(</mo><mi>k</mi><mo>)</mo></mrow></mstyle></math> as follows.
First, let <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> be the value of <span class="italic">search</span><math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mi>k</mi><mo>,</mo><mi>t</mi><mo>)</mo></mrow></mstyle></math>.
Then, if <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> has the value <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>"</mo><mi>failed</mi><mo>"</mo></mrow></mstyle></math>, return the value
<math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math>; otherwise return <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mstyle></math>.''
</p>



<div id="spadComm1-92" class="spadComm" >
<form id="formComm1-92" action="javascript:makeRequest('1-92');" >
<input id="comm1-92" type="text" class="command" style="width: 38em;" value='howMany(k) == (n:=search(k,t); n case "failed" => 1; n+1)' />
</form>
<span id="commSav1-92" class="commSav" >howMany(k) == (n:=search(k,t); n case "failed" => 1; n+1)</span>
<div id="mathAns1-92" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Run through the primes to create the table, then print the table.
The expression <span class="teletype">t.m := howMany(m)</span> updates the value in table <math xmlns="&mathml;" mathsize="big"><mstyle><mi>t</mi></mstyle></math>
stored under key <math xmlns="&mathml;" mathsize="big"><mstyle><mi>m</mi></mstyle></math>.
</p>



<div id="spadComm1-93" class="spadComm" >
<form id="formComm1-93" action="javascript:makeRequest('1-93');" >
<input id="comm1-93" type="text" class="command" style="width: 44em;" value="for p in primes(2,1000) repeat (m:= p rem 5; t.m:= howMany(m)); t" />
</form>
<span id="commSav1-93" class="commSav" >for p in primes(2,1000) repeat (m:= p rem 5; t.m:= howMany(m)); t</span>
<div id="mathAns1-93" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;howMany&nbsp;with&nbsp;type&nbsp;Integer&nbsp;-&gt;&nbsp;Integer&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mtext>table</mtext></mrow><mo>(</mo><mrow><mrow><mn>2</mn><mo>=</mo><mn>47</mn></mrow><mo>,</mo><mrow><mn>4</mn><mo>=</mo><mn>38</mn></mrow><mo>,</mo><mrow><mn>1</mn><mo>=</mo><mn>40</mn></mrow><mo>,</mo><mrow><mn>3</mn><mo>=</mo><mn>42</mn></mrow><mo>,</mo><mrow><mn>0</mn><mo>=</mo><mn>1</mn></mrow></mrow><mo>)</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Table(Integer,Integer)
</div>




<p>A <span class="italic">record</span> is an example of an inhomogeneous collection of
objects.<span class="footnote">See <a href="section-2.4.xhtml#ugTypesRecords" class="ref" >ugTypesRecords</a> for details.</span>  A record consists of a
set of named <span class="italic">selectors</span> that can be used to access its
components.  <span class="index">Record@{\sf Record}</span><a name="chapter-1-55"/>
</p>


<p>Declare that <math xmlns="&mathml;" mathsize="big"><mstyle><mi>daniel</mi></mstyle></math> can only be
assigned a record with two prescribed fields.
</p>



<div id="spadComm1-94" class="spadComm" >
<form id="formComm1-94" action="javascript:makeRequest('1-94');" >
<input id="comm1-94" type="text" class="command" style="width: 31em;" value="daniel : Record(age : Integer, salary : Float)" />
</form>
<span id="commSav1-94" class="commSav" >daniel : Record(age : Integer, salary : Float)</span>
<div id="mathAns1-94" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Give <math xmlns="&mathml;" mathsize="big"><mstyle><mi>daniel</mi></mstyle></math> a value, using square brackets to enclose the values of
the fields.
</p>



<div id="spadComm1-95" class="spadComm" >
<form id="formComm1-95" action="javascript:makeRequest('1-95');" >
<input id="comm1-95" type="text" class="command" style="width: 16em;" value="daniel := [28, 32005.12]" />
</form>
<span id="commSav1-95" class="commSav" >daniel := [28, 32005.12]</span>
<div id="mathAns1-95" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mi>age</mi><mo>=</mo><mn>28</mn></mrow><mo>,</mo><mrow><mi>salary</mi><mo>=</mo><mrow><mn>32005</mn><mo>.</mo><mn>12</mn></mrow></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Record(age: Integer,salary: Float)
</div>



<p>Give <math xmlns="&mathml;" mathsize="big"><mstyle><mi>daniel</mi></mstyle></math> a raise.
</p>



<div id="spadComm1-96" class="spadComm" >
<form id="formComm1-96" action="javascript:makeRequest('1-96');" >
<input id="comm1-96" type="text" class="command" style="width: 20em;" value="daniel.salary := 35000; daniel" />
</form>
<span id="commSav1-96" class="commSav" >daniel.salary := 35000; daniel</span>
<div id="mathAns1-96" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mi>age</mi><mo>=</mo><mn>28</mn></mrow><mo>,</mo><mrow><mi>salary</mi><mo>=</mo><mrow><mn>35000</mn><mo>.</mo><mn>0</mn></mrow></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Record(age: Integer,salary: Float)
</div>



<p>A <span class="italic">union</span> is a data structure used when objects have multiple
types.<span class="footnote">See <a href="section-2.5.xhtml#ugTypesUnions" class="ref" >ugTypesUnions</a> for details.</span>  <span class="index">Union@{\sf Union}</span><a name="chapter-1-56"/>
</p>


<p>Let <math xmlns="&mathml;" mathsize="big"><mstyle><mi>dog</mi></mstyle></math> be either an integer or a string value.
</p>



<div id="spadComm1-97" class="spadComm" >
<form id="formComm1-97" action="javascript:makeRequest('1-97');" >
<input id="comm1-97" type="text" class="command" style="width: 32em;" value="dog: Union(licenseNumber: Integer, name: String)" />
</form>
<span id="commSav1-97" class="commSav" >dog: Union(licenseNumber: Integer, name: String)</span>
<div id="mathAns1-97" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Give <math xmlns="&mathml;" mathsize="big"><mstyle><mi>dog</mi></mstyle></math> a name.
</p>



<div id="spadComm1-98" class="spadComm" >
<form id="formComm1-98" action="javascript:makeRequest('1-98');" >
<input id="comm1-98" type="text" class="command" style="width: 11em;" value='dog := "Whisper"' />
</form>
<span id="commSav1-98" class="commSav" >dog := "Whisper"</span>
<div id="mathAns1-98" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"Whisper"</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union(name: String,...)
</div>



<p>All told, there are over forty different data structures in FriCAS.
Using the domain constructors described in Chapter <a href="section-13.0.xhtml#ugDomains" class="ref" >ugDomains</a> you can add your own data structure or
extend an existing one.  Choosing the right data structure for your
application may be the key to obtaining good performance.
</p>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-1.4.xhtml" style="margin-right: 10px;">Previous Section 1.4 Numbers</a><a href="section-1.6.xhtml" style="margin-right: 10px;">Next Section 1.6 Expanding to Higher Dimensions</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>