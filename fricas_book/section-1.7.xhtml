<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section1.7</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-1.6.xhtml" style="margin-right: 10px;">Previous Section 1.6 Expanding to Higher Dimensions</a><a href="section-1.8.xhtml" style="margin-right: 10px;">Next Section 1.8 Polynomials</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-1.7">
<h2 class="sectiontitle">1.7  Writing Your Own Functions</h2>


<a name="ugIntroYou" class="label"/>

<p>FriCAS provides you with a very large library of predefined
operations and objects to compute with.  You can use the FriCAS
library of constructors to create new objects dynamically of quite
arbitrary complexity.  For example, you can make lists of matrices of
fractions of polynomials with complex floating point numbers as
coefficients.  Moreover, the library provides a wealth of operations
that allow you to create and manipulate these objects.
</p>


<p>For many applications, you need to interact with the interpreter and
write some FriCAS programs to tackle your application.
FriCAS allows you to write functions interactively,
<span class="index">function</span><a name="chapter-1-61"/> thereby effectively extending the system library.
Here we give a few simple examples, leaving the details to
Chapter <a href="section-6.0.xhtml#ugUser" class="ref" >ugUser</a> .
</p>


<p>We begin by looking at several ways that you can define the
<span class="italic">factorial</span> function in FriCAS.  The first way is to give a
<span class="index">function:piece-wise definition</span><a name="chapter-1-62"/> piece-wise definition of the
function.  <span class="index">piece-wise function definition</span><a name="chapter-1-63"/> This method is best
for a general recurrence relation since the pieces are gathered
together and compiled into an efficient iterative function.
Furthermore, enough previously computed values are automatically saved
so that a subsequent call to the function can pick up from where it
left off.
</p>


<p>Define the value of <span style="font-weight: bold;"> fact</span> at <math xmlns="&mathml;" mathsize="big"><mstyle><mn>0</mn></mstyle></math>.
</p>



<div id="spadComm1-106" class="spadComm" >
<form id="formComm1-106" action="javascript:makeRequest('1-106');" >
<input id="comm1-106" type="text" class="command" style="width: 8em;" value="fact(0) == 1" />
</form>
<span id="commSav1-106" class="commSav" >fact(0) == 1</span>
<div id="mathAns1-106" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Define the value of <span style="font-weight: bold;"> fact</span>(n) for general <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>.
</p>



<div id="spadComm1-107" class="spadComm" >
<form id="formComm1-107" action="javascript:makeRequest('1-107');" >
<input id="comm1-107" type="text" class="command" style="width: 15em;" value="fact(n) == n*fact(n-1)" />
</form>
<span id="commSav1-107" class="commSav" >fact(n) == n*fact(n-1)</span>
<div id="mathAns1-107" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Ask for the value at <math xmlns="&mathml;" mathsize="big"><mstyle><mn>50</mn></mstyle></math>.  The resulting function created by
FriCAS computes the value by iteration.
</p>




<div id="spadComm1-108" class="spadComm" >
<form id="formComm1-108" action="javascript:makeRequest('1-108');" >
<input id="comm1-108" type="text" class="command" style="width: 6em;" value="fact(50)" />
</form>
<span id="commSav1-108" class="commSav" >fact(50)</span>
<div id="mathAns1-108" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;fact&nbsp;with&nbsp;type&nbsp;Integer&nbsp;-&gt;&nbsp;Integer&nbsp;<br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;fact&nbsp;as&nbsp;a&nbsp;recurrence&nbsp;relation.<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>30414093201713378043612608166064768844377641568960512000000000000</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>A second definition uses an <span class="teletype">if-then-else</span> and recursion.
</p>



<div id="spadComm1-109" class="spadComm" >
<form id="formComm1-109" action="javascript:makeRequest('1-109');" >
<input id="comm1-109" type="text" class="command" style="width: 30em;" value="fac(n) == if n &lt; 3 then n else n * fac(n - 1)" />
</form>
<span id="commSav1-109" class="commSav" >fac(n) == if n &lt; 3 then n else n * fac(n - 1)</span>
<div id="mathAns1-109" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>This function is less efficient than the previous version since
each iteration involves a recursive function call.
</p>



<div id="spadComm1-110" class="spadComm" >
<form id="formComm1-110" action="javascript:makeRequest('1-110');" >
<input id="comm1-110" type="text" class="command" style="width: 5em;" value="fac(50)" />
</form>
<span id="commSav1-110" class="commSav" >fac(50)</span>
<div id="mathAns1-110" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>30414093201713378043612608166064768844377641568960512000000000000</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>A third version directly uses iteration.
</p>



<div id="spadComm1-111" class="spadComm" >
<form id="formComm1-111" action="javascript:makeRequest('1-111');" >
<input id="comm1-111" type="text" class="command" style="width: 34em;" value="fa(n) == (a := 1; for i in 2..n repeat a := a*i; a)" />
</form>
<span id="commSav1-111" class="commSav" >fa(n) == (a := 1; for i in 2..n repeat a := a*i; a)</span>
<div id="mathAns1-111" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>This is the least space-consumptive version.
</p>



<div id="spadComm1-112" class="spadComm" >
<form id="formComm1-112" action="javascript:makeRequest('1-112');" >
<input id="comm1-112" type="text" class="command" style="width: 4em;" value="fa(50)" />
</form>
<span id="commSav1-112" class="commSav" >fa(50)</span>
<div id="mathAns1-112" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;fac&nbsp;with&nbsp;type&nbsp;Integer&nbsp;-&gt;&nbsp;Integer&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>30414093201713378043612608166064768844377641568960512000000000000</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>A final version appears to construct a large list and then reduces over
it with multiplication.
</p>



<div id="spadComm1-113" class="spadComm" >
<form id="formComm1-113" action="javascript:makeRequest('1-113');" >
<input id="comm1-113" type="text" class="command" style="width: 24em;" value="f(n) == reduce(*,[i for i in 2..n])" />
</form>
<span id="commSav1-113" class="commSav" >f(n) == reduce(*,[i for i in 2..n])</span>
<div id="mathAns1-113" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>In fact, the resulting computation is optimized into an efficient
iteration loop equivalent to that of the third version.
</p>



<div id="spadComm1-114" class="spadComm" >
<form id="formComm1-114" action="javascript:makeRequest('1-114');" >
<input id="comm1-114" type="text" class="command" style="width: 4em;" value="f(50)" />
</form>
<span id="commSav1-114" class="commSav" >f(50)</span>
<div id="mathAns1-114" ></div>
</div>




<div class="verbatim"><br />
Compiling&nbsp;function&nbsp;f&nbsp;with&nbsp;type&nbsp;<br />
&nbsp;&nbsp;&nbsp;PositiveInteger&nbsp;-&gt;&nbsp;PositiveInteger&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>30414093201713378043612608166064768844377641568960512000000000000</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>The library version uses an algorithm that is different from the four
above because it highly optimizes the recurrence relation definition of
<span style="font-weight: bold;"> factorial</span>.
</p>




<div id="spadComm1-115" class="spadComm" >
<form id="formComm1-115" action="javascript:makeRequest('1-115');" >
<input id="comm1-115" type="text" class="command" style="width: 9em;" value="factorial(50)" />
</form>
<span id="commSav1-115" class="commSav" >factorial(50)</span>
<div id="mathAns1-115" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>30414093201713378043612608166064768844377641568960512000000000000</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>You are not limited to one-line functions in FriCAS.  If you place your
function definitions in <span style="font-weight: bold;"> .input</span> files <span class="index">file:input</span><a name="chapter-1-64"/> (see
<a href="section-4.1.xhtml#ugInOutIn" class="ref" >ugInOutIn</a> ), you can have multi-line
functions that use indentation for grouping.
</p>


<p>Given <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> elements, <span style="font-weight: bold;"> diagonalMatrix</span> creates an
<math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> by <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> matrix with those elements down the diagonal.
This function uses a permutation matrix
that interchanges the <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math>th and <math xmlns="&mathml;" mathsize="big"><mstyle><mi>j</mi></mstyle></math>th rows of a matrix
by which it is right-multiplied.
</p>


<p>This function definition shows a style of definition that can be used
in <span style="font-weight: bold;"> .input</span> files.  Indentation is used to create <span style="font-style: italic;"> blocks</span>:
sequences of expressions that are evaluated in sequence except as
modified by control statements such as <span class="teletype">if-then-else</span> and <span class="teletype">return</span>.
</p>




<div class="verbatim"><br />
permMat(n,&nbsp;i,&nbsp;j)&nbsp;==<br />
&nbsp;&nbsp;m&nbsp;:=&nbsp;diagonalMatrix<br />
&nbsp;&nbsp;&nbsp;&nbsp;[(if&nbsp;i&nbsp;=&nbsp;k&nbsp;or&nbsp;j&nbsp;=&nbsp;k&nbsp;then&nbsp;0&nbsp;else&nbsp;1)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;k&nbsp;in&nbsp;1..n]<br />
&nbsp;&nbsp;m(i,j)&nbsp;:=&nbsp;1<br />
&nbsp;&nbsp;m(j,i)&nbsp;:=&nbsp;1<br />
&nbsp;&nbsp;m<br />
</div>



<p>This creates a four by four matrix that interchanges the second and third
rows.
</p>



<div id="spadComm1-116" class="spadComm" >
<form id="formComm1-116" action="javascript:makeRequest('1-116');" >
<input id="comm1-116" type="text" class="command" style="width: 13em;" value="p := permMat(4,2,3)" />
</form>
<span id="commSav1-116" class="commSav" >p := permMat(4,2,3)</span>
<div id="mathAns1-116" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;permMat&nbsp;with&nbsp;type&nbsp;(PositiveInteger,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PositiveInteger,PositiveInteger)&nbsp;-&gt;&nbsp;Matrix&nbsp;Integer&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mtable><mtr><mtd><mn>1</mn></mtd><mtd><mn>0</mn></mtd><mtd><mn>0</mn></mtd><mtd><mn>0</mn></mtd></mtr><mtr><mtd><mn>0</mn></mtd><mtd><mn>0</mn></mtd><mtd><mn>1</mn></mtd><mtd><mn>0</mn></mtd></mtr><mtr><mtd><mn>0</mn></mtd><mtd><mn>1</mn></mtd><mtd><mn>0</mn></mtd><mtd><mn>0</mn></mtd></mtr><mtr><mtd><mn>0</mn></mtd><mtd><mn>0</mn></mtd><mtd><mn>0</mn></mtd><mtd><mn>1</mn></mtd></mtr></mtable><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Matrix Integer
</div>



<p>Create an example matrix to permute.
</p>



<div id="spadComm1-117" class="spadComm" >
<form id="formComm1-117" action="javascript:makeRequest('1-117');" >
<input id="comm1-117" type="text" class="command" style="width: 35em;" value="m := matrix [ [4*i + j for j in 1..4] for i in 0..3]" />
</form>
<span id="commSav1-117" class="commSav" >m := matrix [ [4*i + j for j in 1..4] for i in 0..3]</span>
<div id="mathAns1-117" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mtable><mtr><mtd><mn>1</mn></mtd><mtd><mn>2</mn></mtd><mtd><mn>3</mn></mtd><mtd><mn>4</mn></mtd></mtr><mtr><mtd><mn>5</mn></mtd><mtd><mn>6</mn></mtd><mtd><mn>7</mn></mtd><mtd><mn>8</mn></mtd></mtr><mtr><mtd><mn>9</mn></mtd><mtd><mn>10</mn></mtd><mtd><mn>11</mn></mtd><mtd><mn>12</mn></mtd></mtr><mtr><mtd><mn>13</mn></mtd><mtd><mn>14</mn></mtd><mtd><mn>15</mn></mtd><mtd><mn>16</mn></mtd></mtr></mtable><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Matrix Integer
</div>



<p>Interchange the second and third rows of m.
</p>



<div id="spadComm1-118" class="spadComm" >
<form id="formComm1-118" action="javascript:makeRequest('1-118');" >
<input id="comm1-118" type="text" class="command" style="width: 12em;" value="permMat(4,2,3) * m" />
</form>
<span id="commSav1-118" class="commSav" >permMat(4,2,3) * m</span>
<div id="mathAns1-118" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mtable><mtr><mtd><mn>1</mn></mtd><mtd><mn>2</mn></mtd><mtd><mn>3</mn></mtd><mtd><mn>4</mn></mtd></mtr><mtr><mtd><mn>9</mn></mtd><mtd><mn>10</mn></mtd><mtd><mn>11</mn></mtd><mtd><mn>12</mn></mtd></mtr><mtr><mtd><mn>5</mn></mtd><mtd><mn>6</mn></mtd><mtd><mn>7</mn></mtd><mtd><mn>8</mn></mtd></mtr><mtr><mtd><mn>13</mn></mtd><mtd><mn>14</mn></mtd><mtd><mn>15</mn></mtd><mtd><mn>16</mn></mtd></mtr></mtable><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Matrix Integer
</div>



<p>A function can also be passed as an argument to another function,
which then applies the function or passes it off to some other
function that does.  You often have to declare the type of a function
that has functional arguments.
</p>


<p>This declares <span style="font-weight: bold;"> t</span> to be a two-argument function that returns a
<span class="teletype">Float</span>.  The first argument is a function that takes one
<span class="teletype">Float</span> argument and returns a <span class="teletype">Float</span>.
</p>




<div id="spadComm1-119" class="spadComm" >
<form id="formComm1-119" action="javascript:makeRequest('1-119');" >
<input id="comm1-119" type="text" class="command" style="width: 24em;" value="t : (Float -> Float, Float) -> Float" />
</form>
<span id="commSav1-119" class="commSav" >t : (Float -> Float, Float) -> Float</span>
<div id="mathAns1-119" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>This is the definition of <span style="font-weight: bold;"> t</span>.
</p>




<div id="spadComm1-120" class="spadComm" >
<form id="formComm1-120" action="javascript:makeRequest('1-120');" >
<input id="comm1-120" type="text" class="command" style="width: 23em;" value="t(fun, x) == fun(x)^2 + sin(x)^2" />
</form>
<span id="commSav1-120" class="commSav" >t(fun, x) == fun(x)^2 + sin(x)^2</span>
<div id="mathAns1-120" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>We have not defined a <span style="font-weight: bold;"> cos</span> in the workspace. The one from the
FriCAS library will do.
</p>




<div id="spadComm1-121" class="spadComm" >
<form id="formComm1-121" action="javascript:makeRequest('1-121');" >
<input id="comm1-121" type="text" class="command" style="width: 10em;" value="t(cos, 5.2058)" />
</form>
<span id="commSav1-121" class="commSav" >t(cos, 5.2058)</span>
<div id="mathAns1-121" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>



<p>Here we define our own (user-defined) function.
</p>



<div id="spadComm1-122" class="spadComm" >
<form id="formComm1-122" action="javascript:makeRequest('1-122');" >
<input id="comm1-122" type="text" class="command" style="width: 14em;" value="cosinv(y) == cos(1/y)" />
</form>
<span id="commSav1-122" class="commSav" >cosinv(y) == cos(1/y)</span>
<div id="mathAns1-122" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Pass this function as an argument to <span style="font-weight: bold;"> t</span>.
</p>



<div id="spadComm1-123" class="spadComm" >
<form id="formComm1-123" action="javascript:makeRequest('1-123');" >
<input id="comm1-123" type="text" class="command" style="width: 12em;" value="t(cosinv, 5.2058)" />
</form>
<span id="commSav1-123" class="commSav" >t(cosinv, 5.2058)</span>
<div id="mathAns1-123" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>1</mn><mo>.</mo><mn>7392237241</mn><mo></mo><mn>8005164925</mn><mo></mo><mn>4147684772</mn><mo></mo><mn>932520785</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>



<p>FriCAS also has pattern matching capabilities for
<span class="index">simplification</span><a name="chapter-1-65"/>
simplification
<span class="index">pattern matching</span><a name="chapter-1-66"/>
of expressions and for defining new functions by rules.
For example, suppose that you want to apply regularly a transformation
that groups together products of radicals:
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle></mstyle></math>
Note that such a transformation is not generally correct.
FriCAS never uses it automatically.
</p>


<p>Give this rule the name <span style="font-weight: bold;"> groupSqrt</span>.
</p>



<div id="spadComm1-124" class="spadComm" >
<form id="formComm1-124" action="javascript:makeRequest('1-124');" >
<input id="comm1-124" type="text" class="command" style="width: 33em;" value="groupSqrt := rule(sqrt(a) * sqrt(b) == sqrt(a*b))" />
</form>
<span id="commSav1-124" class="commSav" >groupSqrt := rule(sqrt(a) * sqrt(b) == sqrt(a*b))</span>
<div id="mathAns1-124" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mo>%</mo><mi>C</mi><mo></mo><mrow><msqrt><mi>a</mi></msqrt></mrow><mo></mo><mrow><msqrt><mi>b</mi></msqrt></mrow></mrow><mtext><mrow><mtext>==</mtext></mrow></mtext><mrow><mo>%</mo><mi>C</mi><mo></mo><mrow><msqrt><mrow><mi>a</mi><mo></mo><mi>b</mi></mrow></msqrt></mrow></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: RewriteRule(Integer,Integer,Expression Integer)
</div>



<p>Here is a test expression.
</p>



<div id="spadComm1-125" class="spadComm" >
<form id="formComm1-125" action="javascript:makeRequest('1-125');" >
<input id="comm1-125" type="text" class="command" style="width: 25em;" value="a := (sqrt(x) + sqrt(y) + sqrt(z))^4" />
</form>
<span id="commSav1-125" class="commSav" >a := (sqrt(x) + sqrt(y) + sqrt(z))^4</span>
<div id="mathAns1-125" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtable><mtr><mtd><mrow><mrow><mo>(</mo><mrow><mrow><mo>(</mo><mrow><mn>4</mn><mo></mo><mi>z</mi></mrow><mo>+</mo><mrow><mn>4</mn><mo></mo><mi>y</mi></mrow><mo>+</mo><mrow><mn>12</mn><mo></mo><mi>x</mi></mrow><mo>)</mo></mrow><mo></mo><mrow><msqrt><mi>y</mi></msqrt></mrow></mrow><mo>+</mo><mrow><mrow><mo>(</mo><mrow><mn>4</mn><mo></mo><mi>z</mi></mrow><mo>+</mo><mrow><mn>12</mn><mo></mo><mi>y</mi></mrow><mo>+</mo><mrow><mn>4</mn><mo></mo><mi>x</mi></mrow><mo>)</mo></mrow><mo></mo><mrow><msqrt><mi>x</mi></msqrt></mrow></mrow><mo>)</mo></mrow><mo></mo><mrow><msqrt><mi>z</mi></msqrt></mrow></mrow><mo>+</mo></mtd></mtr><mtr><mtd></mtd></mtr><mtr><mtd><mrow><mrow><mo>(</mo><mrow><mn>12</mn><mo></mo><mi>z</mi></mrow><mo>+</mo><mrow><mn>4</mn><mo></mo><mi>y</mi></mrow><mo>+</mo><mrow><mn>4</mn><mo></mo><mi>x</mi></mrow><mo>)</mo></mrow><mo></mo><mrow><msqrt><mi>x</mi></msqrt></mrow><mo></mo><mrow><msqrt><mi>y</mi></msqrt></mrow></mrow><mo>+</mo><mrow><msup><mi>z</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mrow><mo>(</mo><mrow><mn>6</mn><mo></mo><mi>y</mi></mrow><mo>+</mo><mrow><mn>6</mn><mo></mo><mi>x</mi></mrow><mo>)</mo></mrow><mo></mo><mi>z</mi></mrow><mo>+</mo><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>6</mn><mo></mo><mi>x</mi><mo></mo><mi>y</mi></mrow><mo>+</mo><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow></mtd></mtr></mtable></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Expression Integer
</div>



<p>The rule
<span style="font-weight: bold;"> groupSqrt</span> successfully simplifies the expression.
</p>



<div id="spadComm1-126" class="spadComm" >
<form id="formComm1-126" action="javascript:makeRequest('1-126');" >
<input id="comm1-126" type="text" class="command" style="width: 8em;" value="groupSqrt a" />
</form>
<span id="commSav1-126" class="commSav" >groupSqrt a</span>
<div id="mathAns1-126" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtable><mtr><mtd><mrow><mrow><mo>(</mo><mrow><mn>4</mn><mo></mo><mi>z</mi></mrow><mo>+</mo><mrow><mn>4</mn><mo></mo><mi>y</mi></mrow><mo>+</mo><mrow><mn>12</mn><mo></mo><mi>x</mi></mrow><mo>)</mo></mrow><mo></mo><mrow><msqrt><mrow><mi>y</mi><mo></mo><mi>z</mi></mrow></msqrt></mrow></mrow><mo>+</mo><mrow><mrow><mo>(</mo><mrow><mn>4</mn><mo></mo><mi>z</mi></mrow><mo>+</mo><mrow><mn>12</mn><mo></mo><mi>y</mi></mrow><mo>+</mo><mrow><mn>4</mn><mo></mo><mi>x</mi></mrow><mo>)</mo></mrow><mo></mo><mrow><msqrt><mrow><mi>x</mi><mo></mo><mi>z</mi></mrow></msqrt></mrow></mrow><mo>+</mo></mtd></mtr><mtr><mtd></mtd></mtr><mtr><mtd><mrow><mrow><mo>(</mo><mrow><mn>12</mn><mo></mo><mi>z</mi></mrow><mo>+</mo><mrow><mn>4</mn><mo></mo><mi>y</mi></mrow><mo>+</mo><mrow><mn>4</mn><mo></mo><mi>x</mi></mrow><mo>)</mo></mrow><mo></mo><mrow><msqrt><mrow><mi>x</mi><mo></mo><mi>y</mi></mrow></msqrt></mrow></mrow><mo>+</mo><mrow><msup><mi>z</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mrow><mo>(</mo><mrow><mn>6</mn><mo></mo><mi>y</mi></mrow><mo>+</mo><mrow><mn>6</mn><mo></mo><mi>x</mi></mrow><mo>)</mo></mrow><mo></mo><mi>z</mi></mrow><mo>+</mo><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><mn>6</mn><mo></mo><mi>x</mi><mo></mo><mi>y</mi></mrow><mo>+</mo><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow></mtd></mtr></mtable></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Expression Integer
</div>





</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-1.6.xhtml" style="margin-right: 10px;">Previous Section 1.6 Expanding to Higher Dimensions</a><a href="section-1.8.xhtml" style="margin-right: 10px;">Next Section 1.8 Polynomials</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>