<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section6.10</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-6.9.xhtml" style="margin-right: 10px;">Previous Section 6.9 How FriCAS Determines What Function to Use</a><a href="section-6.11.xhtml" style="margin-right: 10px;">Next Section 6.11 Piece-Wise Function Definitions</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-6.10">
<h2 class="sectiontitle">6.10  Compiling vs. Interpreting</h2>


<a name="ugUserCompInt" class="label"/>


<p>When possible, FriCAS completely determines the type of every object in
a function, then translates the function definition to Common Lisp or
to machine code (see the next section).  This translation,
<span class="index">function:compiler</span><a name="chapter-6-15"/> called compilation, happens the first time
you call the function and results in a computational delay.
Subsequent function calls with the same argument types use the
compiled version of the code without delay.
</p>


<p>If FriCAS cannot determine the type of everything, the function may
still be executed <span class="index">function:interpretation</span><a name="chapter-6-16"/> but
<span class="index">interpret-code mode</span><a name="chapter-6-17"/> in interpret-code mode: each statement in
the function is analyzed and executed as the control flow indicates.
This process is slower than executing a compiled function, but it
allows the execution of code that may involve objects whose types
change.
</p>




<div class="boxed2">


<div class="boxed">



<p>If FriCAS decides that it cannot compile the code, it issues a message
stating the problem and then the following message:
</p>



<div class="center" style="text-align: center;">


<p><span style="font-weight: bold;"> We will attempt to step through and interpret the code.</span>
</p>



</div>



<p>This is not a time to panic.  <span class="index">panic:avoiding</span><a name="chapter-6-18"/> Rather, it just
means that what you gave to FriCAS is somehow ambiguous: either it is
not specific enough to be analyzed completely, or it is beyond FriCAS's
present interactive compilation abilities.<br/>
</p>



</div>
</div>



<p>This function runs in interpret-code mode, but it does not compile.
</p>



<div class="verbatim"><br />
varPolys(vars)&nbsp;==<br />
&nbsp;&nbsp;for&nbsp;var&nbsp;in&nbsp;vars&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;output(1&nbsp;::&nbsp;UnivariatePolynomial(var,Integer))<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>For <math xmlns="&mathml;" mathsize="big"><mstyle><mi>vars</mi></mstyle></math> equal to <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>[</mo><mtext mathvariant="monospace">'</mtext><mi>x</mi><mo>,</mo><mtext mathvariant="monospace">'</mtext><mi>y</mi><mo>,</mo><mtext mathvariant="monospace">'</mtext><mi>z</mi><mo>]</mo></mrow></mstyle></math>, this function displays <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math> three times.
</p>



<div id="spadComm6-57" class="spadComm" >
<form id="formComm6-57" action="javascript:makeRequest('6-57');" >
<input id="comm6-57" type="text" class="command" style="width: 13em;" value="varPolys ['x,'y,'z]" />
</form>
<span id="commSav6-57" class="commSav" >varPolys ['x,'y,'z]</span>
<div id="mathAns6-57" ></div>
</div>




<div class="verbatim"><br />
Cannot&nbsp;compile&nbsp;conversion&nbsp;for&nbsp;types&nbsp;involving&nbsp;local&nbsp;variables.&nbsp;<br />
&nbsp;&nbsp;&nbsp;In&nbsp;particular,&nbsp;could&nbsp;not&nbsp;compile&nbsp;the&nbsp;expression&nbsp;involving&nbsp;::&nbsp;<br />
&nbsp;&nbsp;&nbsp;UnivariatePolynomial(var,Integer)&nbsp;<br />
&nbsp;AXIOM&nbsp;will&nbsp;attempt&nbsp;to&nbsp;step&nbsp;through&nbsp;and&nbsp;interpret&nbsp;the&nbsp;code.<br />
&nbsp;1<br />
&nbsp;1<br />
&nbsp;1<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>The type of the argument to <span style="font-weight: bold;"> output</span> changes in each iteration, so
FriCAS cannot compile the function.  In this case, even the inner loop
by itself would have a problem:
</p>



<div class="verbatim"><br />
for&nbsp;var&nbsp;in&nbsp;['x,'y,'z]&nbsp;repeat<br />
&nbsp;&nbsp;output(1&nbsp;::&nbsp;UnivariatePolynomial(var,Integer))<br />
</div>




<div class="verbatim"><br />
Cannot&nbsp;compile&nbsp;conversion&nbsp;for&nbsp;types&nbsp;involving&nbsp;local&nbsp;variables.&nbsp;<br />
&nbsp;&nbsp;&nbsp;In&nbsp;particular,&nbsp;could&nbsp;not&nbsp;compile&nbsp;the&nbsp;expression&nbsp;involving&nbsp;::&nbsp;<br />
&nbsp;&nbsp;&nbsp;UnivariatePolynomial(var,Integer)&nbsp;<br />
&nbsp;AXIOM&nbsp;will&nbsp;attempt&nbsp;to&nbsp;step&nbsp;through&nbsp;and&nbsp;interpret&nbsp;the&nbsp;code.<br />
&nbsp;1<br />
&nbsp;1<br />
&nbsp;1<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Sometimes you can help a function to compile by using an extra
conversion or by using <math xmlns="&mathml;" mathsize="big"><mstyle><mi>pretend</mi></mstyle></math>.  <span class="index">pretend</span><a name="chapter-6-19"/> See
<a href="section-2.8.xhtml#ugTypesSubdomains" class="ref" >ugTypesSubdomains</a>  for details.
</p>


<p>When a function is compilable, you have the choice of whether it is
compiled to Common Lisp and then interpreted by the Common Lisp
interpreter or then further compiled from Common Lisp to machine code.
<span class="index">machine code</span><a name="chapter-6-20"/> The option is controlled via 
<span class="teletype">)set functions compile</span>.  
<span class="index">set function compile</span><a name="chapter-6-21"/> Issue <span class="teletype">)set functions compile on</span> 
to compile all the way to machine code.  With the default
setting <span class="teletype">)set functions compile off</span>, FriCAS has its Common Lisp
code interpreted because the overhead of further compilation is larger
than the run-time of most of the functions our users have defined.
You may find that selectively turning this option on and off will
<span class="index">performance</span><a name="chapter-6-22"/> give you the best performance in your particular
application.  For example, if you are writing functions for graphics
applications where hundreds of points are being computed, it is almost
certainly true that you will get the best performance by issuing 
<span class="teletype">)set functions compile on</span>.
</p>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-6.9.xhtml" style="margin-right: 10px;">Previous Section 6.9 How FriCAS Determines What Function to Use</a><a href="section-6.11.xhtml" style="margin-right: 10px;">Next Section 6.11 Piece-Wise Function Definitions</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>