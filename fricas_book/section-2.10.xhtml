<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section2.10</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-2.9.xhtml" style="margin-right: 10px;">Previous Section 2.9 Package Calling and Target Types</a><a href="section-2.11.xhtml" style="margin-right: 10px;">Next Section 2.11 Exposing Domains and Packages</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-2.10">
<h2 class="sectiontitle">2.10  Resolving Types</h2>


<a name="ugTypesResolve" class="label"/>


<p>In this section we briefly describe an internal process by which
<span class="index">resolve</span><a name="chapter-2-59"/> FriCAS determines a type to which two objects of
possibly different types can be converted.  We do this to give you
further insight into how FriCAS takes your input, analyzes it, and
produces a result.
</p>


<p>What happens when you enter <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow></mstyle></math> to FriCAS?  Let's look at what you
get from the two terms of this expression.
</p>


<p>This is a symbolic object whose type indicates the name.
</p>



<div id="spadComm2-125" class="spadComm" >
<form id="formComm2-125" action="javascript:makeRequest('2-125');" >
<input id="comm2-125" type="text" class="command" style="width: 1em;" value="x" />
</form>
<span id="commSav2-125" class="commSav" >x</span>
<div id="mathAns2-125" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>x</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Variable x
</div>



<p>This is a positive integer.
</p>



<div id="spadComm2-126" class="spadComm" >
<form id="formComm2-126" action="javascript:makeRequest('2-126');" >
<input id="comm2-126" type="text" class="command" style="width: 1em;" value="1" />
</form>
<span id="commSav2-126" class="commSav" >1</span>
<div id="mathAns2-126" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>There are no operations in <span class="teletype">PositiveInteger</span> that add positive
integers to objects of type <span class="teletype">Variable(x)</span> nor are there any in
<span class="teletype">Variable(x)</span>.  Before it can add the two parts, FriCAS must come
up with a common type to which both <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> and <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math> can be converted.  We
say that FriCAS must <span class="italic">resolve</span> the two types into a common type.
In this example, the common type is <span class="teletype">Polynomial(Integer)</span>.
</p>


<p>Once this is determined, both parts are converted into polynomials,
and the addition operation from <span class="teletype">Polynomial(Integer)</span> is used to
get the answer.
</p>



<div id="spadComm2-127" class="spadComm" >
<form id="formComm2-127" action="javascript:makeRequest('2-127');" >
<input id="comm2-127" type="text" class="command" style="width: 4em;" value="x + 1" />
</form>
<span id="commSav2-127" class="commSav" >x + 1</span>
<div id="mathAns2-127" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Integer
</div>



<p>FriCAS can always resolve two types: if nothing resembling the original
types can be found, then <span class="teletype">Any</span> is be used.  <span class="index">Any</span><a name="chapter-2-60"/> This is
fine and useful in some cases.
</p>




<div id="spadComm2-128" class="spadComm" >
<form id="formComm2-128" action="javascript:makeRequest('2-128');" >
<input id="comm2-128" type="text" class="command" style="width: 12em;" value='["string",3.14159]' />
</form>
<span id="commSav2-128" class="commSav" >["string",3.14159]</span>
<div id="mathAns2-128" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mtext><mrow><mtext mathvariant='monospace'>"string"</mtext></mrow></mtext><mo>,</mo><mrow><mn>3</mn><mo>.</mo><mn>14159</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Any
</div>



<p>In other cases objects of type <span class="teletype">Any</span> can't be used by the
operations you specified.
</p>



<div id="spadComm2-129" class="spadComm" >
<form id="formComm2-129" action="javascript:makeRequest('2-129');" >
<input id="comm2-129" type="text" class="command" style="width: 12em;" value='"string" + 3.14159' />
</form>
<span id="commSav2-129" class="commSav" >"string" + 3.14159</span>
<div id="mathAns2-129" ></div>
</div>




<div class="verbatim"><br />
There&nbsp;are&nbsp;11&nbsp;exposed&nbsp;and&nbsp;5&nbsp;unexposed&nbsp;library&nbsp;operations&nbsp;named&nbsp;+&nbsp;<br />
&nbsp;&nbsp;having&nbsp;2&nbsp;argument(s)&nbsp;but&nbsp;none&nbsp;was&nbsp;determined&nbsp;to&nbsp;be&nbsp;applicable.&nbsp;<br />
&nbsp;&nbsp;Use&nbsp;HyperDoc&nbsp;Browse,&nbsp;or&nbsp;issue<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)display&nbsp;op&nbsp;+<br />
&nbsp;&nbsp;to&nbsp;learn&nbsp;more&nbsp;about&nbsp;the&nbsp;available&nbsp;operations.&nbsp;Perhaps&nbsp;<br />
&nbsp;&nbsp;package-calling&nbsp;the&nbsp;operation&nbsp;or&nbsp;using&nbsp;coercions&nbsp;on&nbsp;the&nbsp;<br />
&nbsp;&nbsp;arguments&nbsp;will&nbsp;allow&nbsp;you&nbsp;to&nbsp;apply&nbsp;the&nbsp;operation.<br />
&nbsp;<br />
Cannot&nbsp;find&nbsp;a&nbsp;definition&nbsp;or&nbsp;applicable&nbsp;library&nbsp;operation&nbsp;named&nbsp;+&nbsp;<br />
&nbsp;&nbsp;with&nbsp;argument&nbsp;type(s)&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Float<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;Perhaps&nbsp;you&nbsp;should&nbsp;use&nbsp;"@"&nbsp;to&nbsp;indicate&nbsp;the&nbsp;required&nbsp;return&nbsp;type,&nbsp;<br />
&nbsp;&nbsp;or&nbsp;"$"&nbsp;to&nbsp;specify&nbsp;which&nbsp;version&nbsp;of&nbsp;the&nbsp;function&nbsp;you&nbsp;need.<br />
</div>



<p>Although this example was contrived, your expressions may need to be
qualified slightly to help FriCAS resolve the types involved.  You may
need to declare a few variables, do some package calling, provide some
target type information or do some explicit conversions.
</p>


<p>We suggest that you just enter the expression you want evaluated and
see what FriCAS does.  We think you will be impressed with its ability
to <span class="italic">do what I mean.</span>  If FriCAS is still being obtuse, give it some
hints.  As you work with FriCAS, you will learn where it needs a little
help to analyze quickly and perform your computations.
</p>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-2.9.xhtml" style="margin-right: 10px;">Previous Section 2.9 Package Calling and Target Types</a><a href="section-2.11.xhtml" style="margin-right: 10px;">Next Section 2.11 Exposing Domains and Packages</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>