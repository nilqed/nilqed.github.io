<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section6.16</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-6.15.xhtml" style="margin-right: 10px;">Previous Section 6.15 Functions Defined with Blocks</a><a href="section-6.17.xhtml" style="margin-right: 10px;">Next Section 6.17 Anonymous Functions</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-6.16">
<h2 class="sectiontitle">6.16  Free and Local Variables</h2>


<a name="ugUserFreeLocal" class="label"/>


<p>When you want to refer to a variable that is not local to your
function, use a <span class="italic"><span class="teletype">free</span></span> declaration.  <span class="index">free</span><a name="chapter-6-44"/> Variables
declared to be <span class="teletype">free</span> <span class="index">free variable</span><a name="chapter-6-45"/> are assumed to be defined
globally <span class="index">variable:free</span><a name="chapter-6-46"/> in the <span class="index">variable:global</span><a name="chapter-6-47"/>
workspace.  <span class="index">global variable</span><a name="chapter-6-48"/>
</p>


<p>This is a global workspace variable.
</p>



<div id="spadComm6-134" class="spadComm" >
<form id="formComm6-134" action="javascript:makeRequest('6-134');" >
<input id="comm6-134" type="text" class="command" style="width: 8em;" value="counter := 0" />
</form>
<span id="commSav6-134" class="commSav" >counter := 0</span>
<div id="mathAns6-134" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>0</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: NonNegativeInteger
</div>



<p>This function refers to the global <math xmlns="&mathml;" mathsize="big"><mstyle><mi>counter</mi></mstyle></math>.
</p>



<div class="verbatim"><br />
f()&nbsp;==<br />
&nbsp;&nbsp;free&nbsp;counter<br />
&nbsp;&nbsp;counter&nbsp;:=&nbsp;counter&nbsp;+&nbsp;1<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>The global <math xmlns="&mathml;" mathsize="big"><mstyle><mi>counter</mi></mstyle></math> is incremented by <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math>.
</p>



<div id="spadComm6-135" class="spadComm" >
<form id="formComm6-135" action="javascript:makeRequest('6-135');" >
<input id="comm6-135" type="text" class="command" style="width: 2em;" value="f()" />
</form>
<span id="commSav6-135" class="commSav" >f()</span>
<div id="mathAns6-135" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;f&nbsp;with&nbsp;type&nbsp;()&nbsp;-&gt;&nbsp;NonNegativeInteger&nbsp;<br />
<br />
+++&nbsp;|*0;f;1;G82322|&nbsp;redefined<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm6-136" class="spadComm" >
<form id="formComm6-136" action="javascript:makeRequest('6-136');" >
<input id="comm6-136" type="text" class="command" style="width: 5em;" value="counter" />
</form>
<span id="commSav6-136" class="commSav" >counter</span>
<div id="mathAns6-136" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: NonNegativeInteger
</div>




<p>Usually FriCAS can tell that you mean to refer to a global variable and
so <span class="teletype">free</span> isn't always necessary.  However, for clarity and the sake
of self-documentation, we encourage you to use it.
</p>


<p>Declare a variable to be <span class="italic"><span class="teletype">local</span></span> when you do not want to refer to
<span class="index">variable:local</span><a name="chapter-6-49"/> a global variable by the same name.
<span class="index">local variable</span><a name="chapter-6-50"/>
</p>


<p>This function uses <math xmlns="&mathml;" mathsize="big"><mstyle><mi>counter</mi></mstyle></math> as a local variable.
</p>



<div class="verbatim"><br />
g()&nbsp;==<br />
&nbsp;&nbsp;local&nbsp;counter<br />
&nbsp;&nbsp;counter&nbsp;:=&nbsp;7<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Apply the function.
</p>



<div id="spadComm6-137" class="spadComm" >
<form id="formComm6-137" action="javascript:makeRequest('6-137');" >
<input id="comm6-137" type="text" class="command" style="width: 2em;" value="g()" />
</form>
<span id="commSav6-137" class="commSav" >g()</span>
<div id="mathAns6-137" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>7</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Check that the global value of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>counter</mi></mstyle></math> is unchanged.
</p>



<div id="spadComm6-138" class="spadComm" >
<form id="formComm6-138" action="javascript:makeRequest('6-138');" >
<input id="comm6-138" type="text" class="command" style="width: 5em;" value="counter" />
</form>
<span id="commSav6-138" class="commSav" >counter</span>
<div id="mathAns6-138" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: NonNegativeInteger
</div>



<p>Parameters to a function are local variables in the function.  Even if
you issue a <span class="teletype">free</span> declaration for a parameter, it is still local.
</p>


<p>What happens if you do not declare that a variable <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> in the body of
your function is <span class="teletype">local</span> or <span class="teletype">free</span>?  Well, FriCAS decides on this basis:
</p>



<ol>
<li>
 FriCAS scans your function line-by-line, from top-to-bottom.
The right-hand side of an assignment is looked at before the left-hand
side.
</li>
<li> If <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> is referenced before it is assigned a value, it is a
<span class="teletype">free</span> (global) variable.
</li>
<li> If <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> is assigned a value before it is referenced, it is a
<span class="teletype">local</span> variable.
</li>
</ol>



<p>Set two global variables to 1.
</p>



<div id="spadComm6-139" class="spadComm" >
<form id="formComm6-139" action="javascript:makeRequest('6-139');" >
<input id="comm6-139" type="text" class="command" style="width: 8em;" value="a := b := 1" />
</form>
<span id="commSav6-139" class="commSav" >a := b := 1</span>
<div id="mathAns6-139" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Refer to <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> before it is assigned a value, but assign a value to <math xmlns="&mathml;" mathsize="big"><mstyle><mi>b</mi></mstyle></math>
before it is referenced.
</p>



<div class="verbatim"><br />
h()&nbsp;==<br />
&nbsp;&nbsp;b&nbsp;:=&nbsp;a&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;a&nbsp;:=&nbsp;b&nbsp;+&nbsp;a<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Can you predict this result?
</p>



<div id="spadComm6-140" class="spadComm" >
<form id="formComm6-140" action="javascript:makeRequest('6-140');" >
<input id="comm6-140" type="text" class="command" style="width: 2em;" value="h()" />
</form>
<span id="commSav6-140" class="commSav" >h()</span>
<div id="mathAns6-140" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;h&nbsp;with&nbsp;type&nbsp;()&nbsp;-&gt;&nbsp;PositiveInteger&nbsp;<br />
<br />
+++&nbsp;|*0;h;1;G82322|&nbsp;redefined<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>3</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>How about this one?
</p>



<div id="spadComm6-141" class="spadComm" >
<form id="formComm6-141" action="javascript:makeRequest('6-141');" >
<input id="comm6-141" type="text" class="command" style="width: 4em;" value="[a, b]" />
</form>
<span id="commSav6-141" class="commSav" >[a, b]</span>
<div id="mathAns6-141" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>3</mn><mo>,</mo><mn>1</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>What happened?  In the first line of the function body for <math xmlns="&mathml;" mathsize="big"><mstyle><mi>h</mi></mstyle></math>, <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> is
referenced on the right-hand side of the assignment.  Thus <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> is a
free variable.  The variable <math xmlns="&mathml;" mathsize="big"><mstyle><mi>b</mi></mstyle></math> is not referenced in that line, but
it is assigned a value.  Thus <math xmlns="&mathml;" mathsize="big"><mstyle><mi>b</mi></mstyle></math> is a local variable and is given the
value <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>a</mi><mo>+</mo><mn>1</mn><mo>=</mo><mn>2</mn></mrow></mstyle></math>.  In the second line, the free variable <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> is
assigned the value <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>b</mi><mo>+</mo><mi>a</mi></mrow></mstyle></math> which equals <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>2</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>3</mn><mo>.</mo></mrow></mstyle></math> This is the value
returned by the function.  Since <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> was free in <span style="font-weight: bold;"> h</span>, the global
variable <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> has value <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>3</mn><mo>.</mo></mrow></mstyle></math> Since <math xmlns="&mathml;" mathsize="big"><mstyle><mi>b</mi></mstyle></math> was local in <span style="font-weight: bold;"> h</span>, the global
variable <math xmlns="&mathml;" mathsize="big"><mstyle><mi>b</mi></mstyle></math> is unchanged---it still has the value <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math>.
</p>


<p>It is good programming practice always to declare global variables.
However, by far the most common situation is to have local variables
in your functions.  No declaration is needed for this situation, but
be sure to initialize their values.
</p>


<p>Be careful if you use free variables and you cache the value of your
function (see <a href="section-6.12.xhtml#ugUserCache" class="ref" >ugUserCache</a> ).
Caching <span class="italic">only</span> checks if the values of the function arguments are
the same as in a function call previously seen.  It does not check if
any of the free variables on which the function depends have changed
between function calls.
</p>


<p>Turn on caching for <span style="font-weight: bold;"> p</span>.
</p>



<div id="spadComm6-142" class="spadComm" >
<form id="formComm6-142" action="javascript:makeRequest('6-142');" >
<input id="comm6-142" type="text" class="command" style="width: 14em;" value=")set fun cache all p" />
</form>
<span id="commSav6-142" class="commSav" >)set fun cache all p</span>
<div id="mathAns6-142" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;function&nbsp;p&nbsp;will&nbsp;cache&nbsp;all&nbsp;values.<br />
</div>



<p>Define <span style="font-weight: bold;"> p</span> to depend on the free variable <math xmlns="&mathml;" mathsize="big"><mstyle><mi>N</mi></mstyle></math>.
</p>



<div id="spadComm6-143" class="spadComm" >
<form id="formComm6-143" action="javascript:makeRequest('6-143');" >
<input id="comm6-143" type="text" class="command" style="width: 42em;" value="p(i,x) == ( free N; reduce( + , [ (x-i)^n for n in 1..N ] ) )" />
</form>
<span id="commSav6-143" class="commSav" >p(i,x) == ( free N; reduce( + , [ (x-i)^n for n in 1..N ] ) )</span>
<div id="mathAns6-143" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Set the value of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>N</mi></mstyle></math>.
</p>



<div id="spadComm6-144" class="spadComm" >
<form id="formComm6-144" action="javascript:makeRequest('6-144');" >
<input id="comm6-144" type="text" class="command" style="width: 4em;" value="N := 1" />
</form>
<span id="commSav6-144" class="commSav" >N := 1</span>
<div id="mathAns6-144" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Evaluate <span style="font-weight: bold;"> p</span> the first time.
</p>



<div id="spadComm6-145" class="spadComm" >
<form id="formComm6-145" action="javascript:makeRequest('6-145');" >
<input id="comm6-145" type="text" class="command" style="width: 5em;" value="p(0, x)" />
</form>
<span id="commSav6-145" class="commSav" >p(0, x)</span>
<div id="mathAns6-145" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>x</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Integer
</div>



<p>Change the value of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>N</mi></mstyle></math>.
</p>



<div id="spadComm6-146" class="spadComm" >
<form id="formComm6-146" action="javascript:makeRequest('6-146');" >
<input id="comm6-146" type="text" class="command" style="width: 4em;" value="N := 2" />
</form>
<span id="commSav6-146" class="commSav" >N := 2</span>
<div id="mathAns6-146" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Evaluate <span style="font-weight: bold;"> p</span> the second time.
</p>



<div id="spadComm6-147" class="spadComm" >
<form id="formComm6-147" action="javascript:makeRequest('6-147');" >
<input id="comm6-147" type="text" class="command" style="width: 5em;" value="p(0, x)" />
</form>
<span id="commSav6-147" class="commSav" >p(0, x)</span>
<div id="mathAns6-147" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>x</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Integer
</div>



<p>If caching had been turned off, the second evaluation would have
reflected the changed value of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>N</mi></mstyle></math>.
</p>


<p>Turn off caching for <span style="font-weight: bold;"> p</span>.
</p>



<div id="spadComm6-148" class="spadComm" >
<form id="formComm6-148" action="javascript:makeRequest('6-148');" >
<input id="comm6-148" type="text" class="command" style="width: 12em;" value=")set fun cache 0 p" />
</form>
<span id="commSav6-148" class="commSav" >)set fun cache 0 p</span>
<div id="mathAns6-148" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Caching&nbsp;for&nbsp;function&nbsp;p&nbsp;is&nbsp;turned&nbsp;off<br />
</div>



<p>FriCAS does not allow <span class="italic">fluid variables</span>, that is, variables
<span class="index">variable:fluid</span><a name="chapter-6-51"/> bound by a function <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math> that can be referenced
by functions called by <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math>.  <span class="index">fluid variable</span><a name="chapter-6-52"/>
</p>


<p>Values are passed to functions by <span class="italic">reference</span>: a pointer to the
value is passed rather than a copy of the value or a pointer to a
copy.
</p>


<p>This is a global variable that is bound to a record object.
</p>



<div id="spadComm6-149" class="spadComm" >
<form id="formComm6-149" action="javascript:makeRequest('6-149');" >
<input id="comm6-149" type="text" class="command" style="width: 20em;" value="r : Record(i : Integer) := [1]" />
</form>
<span id="commSav6-149" class="commSav" >r : Record(i : Integer) := [1]</span>
<div id="mathAns6-149" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Record(i: Integer)
</div>



<p>This function first modifies the one component of its record argument
and then rebinds the parameter to another record.
</p>



<div class="verbatim"><br />
resetRecord&nbsp;rr&nbsp;==<br />
&nbsp;&nbsp;rr.i&nbsp;:=&nbsp;2<br />
&nbsp;&nbsp;rr&nbsp;:=&nbsp;[10]<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Pass <math xmlns="&mathml;" mathsize="big"><mstyle><mi>r</mi></mstyle></math> as an argument to <span style="font-weight: bold;"> resetRecord</span>. 
</p>



<div id="spadComm6-150" class="spadComm" >
<form id="formComm6-150" action="javascript:makeRequest('6-150');" >
<input id="comm6-150" type="text" class="command" style="width: 9em;" value="resetRecord r" />
</form>
<span id="commSav6-150" class="commSav" >resetRecord r</span>
<div id="mathAns6-150" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mi>i</mi><mo>=</mo><mn>10</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Record(i: Integer)
</div>



<p>The value of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>r</mi></mstyle></math> was changed by the expression <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>rr</mi><mo>.</mo><mi>i</mi><mo>:</mo><mo>=</mo><mn>2</mn></mrow></mstyle></math> but not by
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>rr</mi><mo>:</mo><mo>=</mo><mo>[</mo><mn>10</mn><mo>]</mo></mrow></mstyle></math>.
</p>



<div id="spadComm6-151" class="spadComm" >
<form id="formComm6-151" action="javascript:makeRequest('6-151');" >
<input id="comm6-151" type="text" class="command" style="width: 1em;" value="r" />
</form>
<span id="commSav6-151" class="commSav" >r</span>
<div id="mathAns6-151" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mi>i</mi><mo>=</mo><mn>2</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Record(i: Integer)
</div>



<p>To conclude this section, we give an iterative definition of
<span class="index">Fibonacci numbers</span><a name="chapter-6-53"/> a function that computes Fibonacci numbers.
This definition approximates the definition into which FriCAS
transforms the recurrence relation definition of <span style="font-weight: bold;"> fib</span> in
<a href="section-6.13.xhtml#ugUserRecur" class="ref" >ugUserRecur</a> .
</p>


<p>Global variables <span class="teletype">past</span> and <span class="teletype">present</span> are used to hold the last
computed Fibonacci numbers.
</p>



<div id="spadComm6-152" class="spadComm" >
<form id="formComm6-152" action="javascript:makeRequest('6-152');" >
<input id="comm6-152" type="text" class="command" style="width: 14em;" value="past := present := 1" />
</form>
<span id="commSav6-152" class="commSav" >past := present := 1</span>
<div id="mathAns6-152" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Global variable <math xmlns="&mathml;" mathsize="big"><mstyle><mi>index</mi></mstyle></math> gives the current index of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>present</mi></mstyle></math>.
</p>



<div id="spadComm6-153" class="spadComm" >
<form id="formComm6-153" action="javascript:makeRequest('6-153');" >
<input id="comm6-153" type="text" class="command" style="width: 7em;" value="index := 2" />
</form>
<span id="commSav6-153" class="commSav" >index := 2</span>
<div id="mathAns6-153" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Here is a recurrence relation defined in terms of these three global
variables.
</p>



<div class="verbatim"><br />
fib(n)&nbsp;==<br />
&nbsp;&nbsp;free&nbsp;past,&nbsp;present,&nbsp;index<br />
&nbsp;&nbsp;n&nbsp;&lt;&nbsp;3&nbsp;=&gt;&nbsp;1<br />
&nbsp;&nbsp;n&nbsp;=&nbsp;index&nbsp;-&nbsp;1&nbsp;=&gt;&nbsp;past<br />
&nbsp;&nbsp;if&nbsp;n&nbsp;&lt;&nbsp;index-1&nbsp;then<br />
&nbsp;&nbsp;&nbsp;&nbsp;(past,present)&nbsp;:=&nbsp;(1,1)<br />
&nbsp;&nbsp;&nbsp;&nbsp;index&nbsp;:=&nbsp;2<br />
&nbsp;&nbsp;while&nbsp;(index&nbsp;&lt;&nbsp;n)&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;(past,present)&nbsp;:=&nbsp;(present,&nbsp;past+present)<br />
&nbsp;&nbsp;&nbsp;&nbsp;index&nbsp;:=&nbsp;index&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;present<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Compute the infinite stream of Fibonacci numbers.
</p>



<div id="spadComm6-154" class="spadComm" >
<form id="formComm6-154" action="javascript:makeRequest('6-154');" >
<input id="comm6-154" type="text" class="command" style="width: 20em;" value="fibs := [fib(n) for n in 1..]" />
</form>
<span id="commSav6-154" class="commSav" >fibs := [fib(n) for n in 1..]</span>
<div id="mathAns6-154" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>13</mn><mo>,</mo><mn>21</mn><mo>,</mo><mn>34</mn><mo>,</mo><mn>55</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream PositiveInteger
</div>



<p>What is the 1000th Fibonacci number?
</p>



<div id="spadComm6-155" class="spadComm" >
<form id="formComm6-155" action="javascript:makeRequest('6-155');" >
<input id="comm6-155" type="text" class="command" style="width: 6em;" value="fibs 1000" />
</form>
<span id="commSav6-155" class="commSav" >fibs 1000</span>
<div id="mathAns6-155" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;434665576869374564356885276750406258025646605173717804024_<br />
&nbsp;&nbsp;&nbsp;&nbsp;8172908953655541794905189040387984007925516929592259308_<br />
&nbsp;&nbsp;&nbsp;&nbsp;0322634775209689623239873322471161642996440906533187938_<br />
&nbsp;&nbsp;&nbsp;&nbsp;298969649928516003704476137795166849228875<br />
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>As an exercise, we suggest you write a function in an iterative style
that computes the value of the recurrence relation 
<math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math> 
having the initial values 
<math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math>. 
How would you write the function using an element <span class="teletype">OneDimensionalArray</span> 
or <span class="teletype">Vector</span> to hold the previously computed values?
</p>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-6.15.xhtml" style="margin-right: 10px;">Previous Section 6.15 Functions Defined with Blocks</a><a href="section-6.17.xhtml" style="margin-right: 10px;">Next Section 6.17 Anonymous Functions</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>