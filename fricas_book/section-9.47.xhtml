<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section9.47</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-9.46.xhtml" style="margin-right: 10px;">Previous Section 9.46 LinearOrdinaryDifferentialOperator2</a><a href="section-9.48.xhtml" style="margin-right: 10px;">Next Section 9.48 LyndonWord</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-9.47">
<h2 class="sectiontitle">9.47  List</h2>


<a name="ListXmpPage" class="label"/>


<p>A <span class="index">list</span><a name="chapter-9-28"/> is a finite collection of elements in a specified
order that can contain duplicates.  A list is a convenient structure
to work with because it is easy to add or remove elements and the
length need not be constant.  There are many different kinds of lists
in FriCAS, but the default types (and those used most often) are
created by the <span class="teletype">List</span> constructor.  For example, there are objects
of type <span class="teletype">List Integer</span>, <span class="teletype">List Float</span> and <span class="teletype">List Polynomial
Fraction Integer</span>.  Indeed, you can even have <span class="teletype">List List List
Boolean</span> (that is, lists of lists of lists of Boolean values).  You
can have lists of any type of FriCAS object.
</p>



<a name="subsec-9.47.1"/>
<div class="subsection"  id="subsec-9.47.1">
<h3 class="subsectitle">9.47.1  Creating Lists</h3>



<p>The easiest way to create a list with, for example, the elements
<span class="teletype">2, 4, 5, 6</span> is to enclose the elements with square
brackets and separate the elements with commas.
</p>


<p>The spaces after the commas are optional, but they do improve the
readability.
</p>




<div id="spadComm9-47" class="spadComm" >
<form id="formComm9-47" action="javascript:makeRequest('9-47');" >
<input id="comm9-47" type="text" class="command" style="width: 8em;" value="[2, 4, 5, 6]" />
</form>
<span id="commSav9-47" class="commSav" >[2, 4, 5, 6]</span>
<div id="mathAns9-47" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>6</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>To create a list with the single element <span class="teletype">1</span>, you can use
either <span class="teletype">[1]</span> or the operation <span class="spadfunFrom" >list</span><span class="index">list</span><a name="chapter-9-29"/><span class="index">List</span><a name="chapter-9-30"/>.
</p>




<div id="spadComm9-48" class="spadComm" >
<form id="formComm9-48" action="javascript:makeRequest('9-48');" >
<input id="comm9-48" type="text" class="command" style="width: 2em;" value="[1]" />
</form>
<span id="commSav9-48" class="commSav" >[1]</span>
<div id="mathAns9-48" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





<div id="spadComm9-49" class="spadComm" >
<form id="formComm9-49" action="javascript:makeRequest('9-49');" >
<input id="comm9-49" type="text" class="command" style="width: 5em;" value="list(1)" />
</form>
<span id="commSav9-49" class="commSav" >list(1)</span>
<div id="mathAns9-49" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>Once created, two lists <span class="teletype">k</span> and <span class="teletype">m</span> can be concatenated by
issuing <span class="teletype">append(k,m)</span>.  <span class="spadfunFrom" >append</span><span class="index">append</span><a name="chapter-9-31"/><span class="index">List</span><a name="chapter-9-32"/> does <span class="italic">not</span>
physically join the lists, but rather produces a new list with the
elements coming from the two arguments.
</p>




<div id="spadComm9-50" class="spadComm" >
<form id="formComm9-50" action="javascript:makeRequest('9-50');" >
<input id="comm9-50" type="text" class="command" style="width: 16em;" value="append([1,2,3],[5,6,7])" />
</form>
<span id="commSav9-50" class="commSav" >append([1,2,3],[5,6,7])</span>
<div id="mathAns9-50" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>Use <span class="spadfunFrom" >cons</span><span class="index">cons</span><a name="chapter-9-33"/><span class="index">List</span><a name="chapter-9-34"/> to append an element onto the front of a
list.
</p>




<div id="spadComm9-51" class="spadComm" >
<form id="formComm9-51" action="javascript:makeRequest('9-51');" >
<input id="comm9-51" type="text" class="command" style="width: 11em;" value="cons(10,[9,8,7])" />
</form>
<span id="commSav9-51" class="commSav" >cons(10,[9,8,7])</span>
<div id="mathAns9-51" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>10</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





</div>



<a name="subsec-9.47.2"/>
<div class="subsection"  id="subsec-9.47.2">
<h3 class="subsectitle">9.47.2  Accessing List Elements</h3>



<p>To determine whether a list has any elements, use the operation
<span class="spadfunFrom" >empty?</span><span class="index">empty?</span><a name="chapter-9-35"/><span class="index">List</span><a name="chapter-9-36"/>.
</p>




<div id="spadComm9-52" class="spadComm" >
<form id="formComm9-52" action="javascript:makeRequest('9-52');" >
<input id="comm9-52" type="text" class="command" style="width: 8em;" value="empty? [x+1]" />
</form>
<span id="commSav9-52" class="commSav" >empty? [x+1]</span>
<div id="mathAns9-52" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>Alternatively, equality with the list constant <span class="spadfunFrom" >nil</span><span class="index">nil</span><a name="chapter-9-37"/><span class="index">List</span><a name="chapter-9-38"/> can
be tested.
</p>




<div id="spadComm9-53" class="spadComm" >
<form id="formComm9-53" action="javascript:makeRequest('9-53');" >
<input id="comm9-53" type="text" class="command" style="width: 12em;" value="([] = nil)@Boolean" />
</form>
<span id="commSav9-53" class="commSav" >([] = nil)@Boolean</span>
<div id="mathAns9-53" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>We'll use this in some of the following examples.
</p>




<div id="spadComm9-54" class="spadComm" >
<form id="formComm9-54" action="javascript:makeRequest('9-54');" >
<input id="comm9-54" type="text" class="command" style="width: 16em;" value="k := [4,3,7,3,8,5,9,2] " />
</form>
<span id="commSav9-54" class="commSav" >k := [4,3,7,3,8,5,9,2] </span>
<div id="mathAns9-54" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>4</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>2</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>Each of the next four expressions extracts the <span class="spadfunFrom" >first</span><span class="index">first</span><a name="chapter-9-39"/><span class="index">List</span><a name="chapter-9-40"/>
element of <span class="teletype">k</span>.
</p>




<div id="spadComm9-55" class="spadComm" >
<form id="formComm9-55" action="javascript:makeRequest('9-55');" >
<input id="comm9-55" type="text" class="command" style="width: 6em;" value="first k " />
</form>
<span id="commSav9-55" class="commSav" >first k </span>
<div id="mathAns9-55" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>4</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm9-56" class="spadComm" >
<form id="formComm9-56" action="javascript:makeRequest('9-56');" >
<input id="comm9-56" type="text" class="command" style="width: 6em;" value="k.first " />
</form>
<span id="commSav9-56" class="commSav" >k.first </span>
<div id="mathAns9-56" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>4</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm9-57" class="spadComm" >
<form id="formComm9-57" action="javascript:makeRequest('9-57');" >
<input id="comm9-57" type="text" class="command" style="width: 3em;" value="k.1 " />
</form>
<span id="commSav9-57" class="commSav" >k.1 </span>
<div id="mathAns9-57" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>4</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm9-58" class="spadComm" >
<form id="formComm9-58" action="javascript:makeRequest('9-58');" >
<input id="comm9-58" type="text" class="command" style="width: 4em;" value="k(1) " />
</form>
<span id="commSav9-58" class="commSav" >k(1) </span>
<div id="mathAns9-58" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>4</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>The last two forms generalize to <span class="teletype">k.i</span> and <span class="teletype">k(i)</span>,
respectively, where  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>1</mn><mo>&#x2264;</mo><mi>i</mi><mo>&#x2264;</mo><mi>n</mi></mrow></mstyle></math> and <span class="teletype">n</span> equals the length
of <span class="teletype">k</span>.
</p>


<p>This length is calculated by <span class="spadopFrom" title="List"> #</span>.
</p>




<div id="spadComm9-59" class="spadComm" >
<form id="formComm9-59" action="javascript:makeRequest('9-59');" >
<input id="comm9-59" type="text" class="command" style="width: 6em;" value="n :=  #k " />
</form>
<span id="commSav9-59" class="commSav" >n :=  #k </span>
<div id="mathAns9-59" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>8</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Performing an operation such as <span class="teletype">k.i</span> is sometimes referred to as
<span class="italic">indexing into k</span> or <span class="italic">elting into k</span>.  The latter phrase comes
about because the name of the operation that extracts elements is
called <span class="spadfunFrom" >elt</span><span class="index">elt</span><a name="chapter-9-41"/><span class="index">List</span><a name="chapter-9-42"/>.  That is, <span class="teletype">k.3</span> is just
alternative syntax for <span class="teletype">elt(k,3)</span>.  It is important to remember
that list indices begin with 1.  If we issue <span class="teletype">k := [1,3,2,9,5]</span>
then <span class="teletype">k.4</span> returns <span class="teletype">9</span>.  It is an error to use an index that
is not in the range from <span class="teletype">1</span> to the length of the list.
</p>


<p>The last element of a list is extracted by any of the
following three expressions.
</p>




<div id="spadComm9-60" class="spadComm" >
<form id="formComm9-60" action="javascript:makeRequest('9-60');" >
<input id="comm9-60" type="text" class="command" style="width: 5em;" value="last k " />
</form>
<span id="commSav9-60" class="commSav" >last k </span>
<div id="mathAns9-60" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm9-61" class="spadComm" >
<form id="formComm9-61" action="javascript:makeRequest('9-61');" >
<input id="comm9-61" type="text" class="command" style="width: 5em;" value="k.last " />
</form>
<span id="commSav9-61" class="commSav" >k.last </span>
<div id="mathAns9-61" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>This form computes the index of the last element and then extracts the
element from the list.
</p>




<div id="spadComm9-62" class="spadComm" >
<form id="formComm9-62" action="javascript:makeRequest('9-62');" >
<input id="comm9-62" type="text" class="command" style="width: 6em;" value="k.( #k) " />
</form>
<span id="commSav9-62" class="commSav" >k.( #k) </span>
<div id="mathAns9-62" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





</div>



<a name="subsec-9.47.3"/>
<div class="subsection"  id="subsec-9.47.3">
<h3 class="subsectitle">9.47.3  Changing List Elements</h3>



<p>We'll use this in some of the following examples.
</p>




<div id="spadComm9-63" class="spadComm" >
<form id="formComm9-63" action="javascript:makeRequest('9-63');" >
<input id="comm9-63" type="text" class="command" style="width: 16em;" value="k := [4,3,7,3,8,5,9,2] " />
</form>
<span id="commSav9-63" class="commSav" >k := [4,3,7,3,8,5,9,2] </span>
<div id="mathAns9-63" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>4</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>2</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>List elements are reset by using the <span class="teletype">k.i</span> form on the left-hand
side of an assignment.  This expression resets the first element of
<span class="teletype">k</span> to <span class="teletype">999</span>.
</p>




<div id="spadComm9-64" class="spadComm" >
<form id="formComm9-64" action="javascript:makeRequest('9-64');" >
<input id="comm9-64" type="text" class="command" style="width: 8em;" value="k.1 := 999 " />
</form>
<span id="commSav9-64" class="commSav" >k.1 := 999 </span>
<div id="mathAns9-64" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>999</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>As with indexing into a list, it is an error to use an index that is
not within the proper bounds.  Here you see that <span class="teletype">k</span> was modified.
</p>




<div id="spadComm9-65" class="spadComm" >
<form id="formComm9-65" action="javascript:makeRequest('9-65');" >
<input id="comm9-65" type="text" class="command" style="width: 2em;" value="k " />
</form>
<span id="commSav9-65" class="commSav" >k </span>
<div id="mathAns9-65" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>999</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>2</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>The operation that performs the assignment of an element to a
particular position in a list is called <span class="spadfunFrom" >setelt</span><span class="index">setelt</span><a name="chapter-9-43"/><span class="index">List</span><a name="chapter-9-44"/>.
This operation is <span class="italic">destructive</span> in that it changes the list.  In
the above example, the assignment returned the value <span class="teletype">999</span> and
<span class="teletype">k</span> was modified.  For this reason, lists are called
<span class="index">mutable</span><a name="chapter-9-45"/> objects: it is possible to change part of a list
(mutate it) rather than always returning a new list reflecting the
intended modifications.
</p>


<p>Moreover, since lists can share structure, changes to one list can
sometimes affect others.
</p>




<div id="spadComm9-66" class="spadComm" >
<form id="formComm9-66" action="javascript:makeRequest('9-66');" >
<input id="comm9-66" type="text" class="command" style="width: 8em;" value="k := [1,2] " />
</form>
<span id="commSav9-66" class="commSav" >k := [1,2] </span>
<div id="mathAns9-66" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





<div id="spadComm9-67" class="spadComm" >
<form id="formComm9-67" action="javascript:makeRequest('9-67');" >
<input id="comm9-67" type="text" class="command" style="width: 10em;" value="m := cons(0,k) " />
</form>
<span id="commSav9-67" class="commSav" >m := cons(0,k) </span>
<div id="mathAns9-67" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>0</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>Change the second element of <span class="teletype">m</span>.
</p>




<div id="spadComm9-68" class="spadComm" >
<form id="formComm9-68" action="javascript:makeRequest('9-68');" >
<input id="comm9-68" type="text" class="command" style="width: 7em;" value="m.2 := 99 " />
</form>
<span id="commSav9-68" class="commSav" >m.2 := 99 </span>
<div id="mathAns9-68" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>99</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>See, <span class="teletype">m</span> was altered.
</p>




<div id="spadComm9-69" class="spadComm" >
<form id="formComm9-69" action="javascript:makeRequest('9-69');" >
<input id="comm9-69" type="text" class="command" style="width: 2em;" value="m " />
</form>
<span id="commSav9-69" class="commSav" >m </span>
<div id="mathAns9-69" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>0</mn><mo>,</mo><mn>99</mn><mo>,</mo><mn>2</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>But what about <span class="teletype">k</span>?  It changed too!
</p>




<div id="spadComm9-70" class="spadComm" >
<form id="formComm9-70" action="javascript:makeRequest('9-70');" >
<input id="comm9-70" type="text" class="command" style="width: 2em;" value="k  " />
</form>
<span id="commSav9-70" class="commSav" >k  </span>
<div id="mathAns9-70" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>99</mn><mo>,</mo><mn>2</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





</div>



<a name="subsec-9.47.4"/>
<div class="subsection"  id="subsec-9.47.4">
<h3 class="subsectitle">9.47.4  Other Functions</h3>



<p>An operation that is used frequently in list processing is that
which returns all elements in a list after the first element.
</p>




<div id="spadComm9-71" class="spadComm" >
<form id="formComm9-71" action="javascript:makeRequest('9-71');" >
<input id="comm9-71" type="text" class="command" style="width: 9em;" value="k := [1,2,3] " />
</form>
<span id="commSav9-71" class="commSav" >k := [1,2,3] </span>
<div id="mathAns9-71" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>Use the <span class="spadfunFrom" >rest</span><span class="index">rest</span><a name="chapter-9-46"/><span class="index">List</span><a name="chapter-9-47"/> operation to do this.
</p>




<div id="spadComm9-72" class="spadComm" >
<form id="formComm9-72" action="javascript:makeRequest('9-72');" >
<input id="comm9-72" type="text" class="command" style="width: 5em;" value="rest k " />
</form>
<span id="commSav9-72" class="commSav" >rest k </span>
<div id="mathAns9-72" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>To remove duplicate elements in a list <span class="teletype">k</span>, use
<span class="spadfunFrom" >removeDuplicates</span><span class="index">removeDuplicates</span><a name="chapter-9-48"/><span class="index">List</span><a name="chapter-9-49"/>.
</p>




<div id="spadComm9-73" class="spadComm" >
<form id="formComm9-73" action="javascript:makeRequest('9-73');" >
<input id="comm9-73" type="text" class="command" style="width: 22em;" value="removeDuplicates [4,3,4,3,5,3,4]" />
</form>
<span id="commSav9-73" class="commSav" >removeDuplicates [4,3,4,3,5,3,4]</span>
<div id="mathAns9-73" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>4</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>To get a list with elements in the order opposite to those in
a list <span class="teletype">k</span>, use <span class="spadfunFrom" >reverse</span><span class="index">reverse</span><a name="chapter-9-50"/><span class="index">List</span><a name="chapter-9-51"/>.
</p>




<div id="spadComm9-74" class="spadComm" >
<form id="formComm9-74" action="javascript:makeRequest('9-74');" >
<input id="comm9-74" type="text" class="command" style="width: 14em;" value="reverse [1,2,3,4,5,6]" />
</form>
<span id="commSav9-74" class="commSav" >reverse [1,2,3,4,5,6]</span>
<div id="mathAns9-74" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>6</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>1</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>To test whether an element is in a list, use
<span class="spadfunFrom" >member?</span><span class="index">member?</span><a name="chapter-9-52"/><span class="index">List</span><a name="chapter-9-53"/>: <span class="teletype">member?(a,k)</span> returns <span class="teletype">true</span> or
<span class="teletype">false</span> depending on whether <span class="teletype">a</span> is in <span class="teletype">k</span> or not.
</p>




<div id="spadComm9-75" class="spadComm" >
<form id="formComm9-75" action="javascript:makeRequest('9-75');" >
<input id="comm9-75" type="text" class="command" style="width: 18em;" value="member?(1/2,[3/4,5/6,1/2])" />
</form>
<span id="commSav9-75" class="commSav" >member?(1/2,[3/4,5/6,1/2])</span>
<div id="mathAns9-75" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>





<div id="spadComm9-76" class="spadComm" >
<form id="formComm9-76" action="javascript:makeRequest('9-76');" >
<input id="comm9-76" type="text" class="command" style="width: 18em;" value="member?(1/12,[3/4,5/6,1/2])" />
</form>
<span id="commSav9-76" class="commSav" >member?(1/12,[3/4,5/6,1/2])</span>
<div id="mathAns9-76" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>As an exercise, the reader should determine how to get a list
containing all but the last of the elements in a given non-empty list
<span class="teletype">k</span>.<span class="footnote"><span class="teletype">reverse(rest(reverse(k)))</span> works.</span>
</p>




</div>



<a name="subsec-9.47.5"/>
<div class="subsection"  id="subsec-9.47.5">
<h3 class="subsectitle">9.47.5  Dot, Dot</h3>



<p>Certain lists are used so often that FriCAS provides an easy way of
constructing them.  If <span class="teletype">n</span> and <span class="teletype">m</span> are integers, then 
<span class="teletype">expand [n..m]</span> creates a list containing <span class="teletype">n, n+1, ... m</span>.  If 
<span class="teletype">n > m</span> then the list is empty.  It is actually permissible to leave
off the <span class="teletype">m</span> in the dot-dot construction (see below).
</p>


<p>The dot-dot notation can be used more than once in a list construction
and with specific elements being given.  Items separated by dots are
called <span class="italic">segments.</span>
</p>




<div id="spadComm9-77" class="spadComm" >
<form id="formComm9-77" action="javascript:makeRequest('9-77');" >
<input id="comm9-77" type="text" class="command" style="width: 11em;" value="[1..3,10,20..23]" />
</form>
<span id="commSav9-77" class="commSav" >[1..3,10,20..23]</span>
<div id="mathAns9-77" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mn>1</mn><mo>.</mo><mo>.</mo><mn>3</mn></mrow><mo>,</mo><mrow><mn>10</mn><mo>.</mo><mo>.</mo><mn>10</mn></mrow><mo>,</mo><mrow><mn>20</mn><mo>.</mo><mo>.</mo><mn>23</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Segment PositiveInteger
</div>



<p>Segments can be expanded into the range of items between the
endpoints by using <span class="spadfunFrom" >expand</span><span class="index">expand</span><a name="chapter-9-54"/><span class="index">Segment</span><a name="chapter-9-55"/>.
</p>




<div id="spadComm9-78" class="spadComm" >
<form id="formComm9-78" action="javascript:makeRequest('9-78');" >
<input id="comm9-78" type="text" class="command" style="width: 16em;" value="expand [1..3,10,20..23]" />
</form>
<span id="commSav9-78" class="commSav" >expand [1..3,10,20..23]</span>
<div id="mathAns9-78" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>10</mn><mo>,</mo><mn>20</mn><mo>,</mo><mn>21</mn><mo>,</mo><mn>22</mn><mo>,</mo><mn>23</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>What happens if we leave off a number on the right-hand side of
<span class="spadopFrom" title="UniversalSegment">..</span>?
</p>




<div id="spadComm9-79" class="spadComm" >
<form id="formComm9-79" action="javascript:makeRequest('9-79');" >
<input id="comm9-79" type="text" class="command" style="width: 8em;" value="expand [1..]" />
</form>
<span id="commSav9-79" class="commSav" >expand [1..]</span>
<div id="mathAns9-79" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>10</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Integer
</div>



<p>What is created in this case is a <span class="teletype">Stream</span> which is a
generalization of a list.  See 
<a href="section-9.76.xhtml#StreamXmpPage" class="ref" >StreamXmpPage</a>  for more
information.
</p>




</div>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-9.46.xhtml" style="margin-right: 10px;">Previous Section 9.46 LinearOrdinaryDifferentialOperator2</a><a href="section-9.48.xhtml" style="margin-right: 10px;">Next Section 9.48 LyndonWord</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>