<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section6.19</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-6.18.xhtml" style="margin-right: 10px;">Previous Section 6.18 Example: A Database</a><a href="section-6.20.xhtml" style="margin-right: 10px;">Next Section 6.20 Example: Testing for Palindromes</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-6.19">
<h2 class="sectiontitle">6.19  Example: A Famous Triangle</h2>


<a name="ugUserTriangle" class="label"/>


<p>In this example we write some functions that display Pascal's
triangle.  <span class="index">Pascal's triangle</span><a name="chapter-6-60"/> It demonstrates the use of
piece-wise definitions and some output operations you probably haven't
seen before.
</p>


<p>To make these output operations available, we have to <span class="italic">expose</span> the
domain <span class="teletype">OutputForm</span>.  <span class="index">OutputForm</span><a name="chapter-6-61"/> See 
<a href="section-2.11.xhtml#ugTypesExpose" class="ref" >ugTypesExpose</a> 
for more information about exposing domains and packages.
</p>



<div id="spadComm6-183" class="spadComm" >
<form id="formComm6-183" action="javascript:makeRequest('6-183');" >
<input id="comm6-183" type="text" class="command" style="width: 26em;" value=")set expose add constructor OutputForm" />
</form>
<span id="commSav6-183" class="commSav" >)set expose add constructor OutputForm</span>
<div id="mathAns6-183" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;OutputForm&nbsp;is&nbsp;now&nbsp;explicitly&nbsp;exposed&nbsp;in&nbsp;frame&nbsp;G82322&nbsp;<br />
</div>



<p>Define the values along the first row and any column <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math>.
</p>



<div id="spadComm6-184" class="spadComm" >
<form id="formComm6-184" action="javascript:makeRequest('6-184');" >
<input id="comm6-184" type="text" class="command" style="width: 11em;" value="pascal(1,i) == 1" />
</form>
<span id="commSav6-184" class="commSav" >pascal(1,i) == 1</span>
<div id="mathAns6-184" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Define the values for when the row and column index <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math> are equal.
Repeating the argument name indicates that the two index values are equal.
</p>



<div id="spadComm6-185" class="spadComm" >
<form id="formComm6-185" action="javascript:makeRequest('6-185');" >
<input id="comm6-185" type="text" class="command" style="width: 11em;" value="pascal(n,n) == 1" />
</form>
<span id="commSav6-185" class="commSav" >pascal(n,n) == 1</span>
<div id="mathAns6-185" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div class="verbatim"><br />
pascal(i,j&nbsp;|&nbsp;1&nbsp;&lt;&nbsp;i&nbsp;and&nbsp;i&nbsp;&lt;&nbsp;j)&nbsp;==<br />
&nbsp;&nbsp;&nbsp;pascal(i-1,j-1)+pascal(i,j-1)<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Now that we have defined the coefficients in Pascal's triangle, let's
write a couple of one-liners to display it. 
</p>


<p>First, define a function that gives the <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>-th row.
</p>



<div id="spadComm6-186" class="spadComm" >
<form id="formComm6-186" action="javascript:makeRequest('6-186');" >
<input id="comm6-186" type="text" class="command" style="width: 29em;" value="pascalRow(n) == [pascal(i,n) for i in 1..n]" />
</form>
<span id="commSav6-186" class="commSav" >pascalRow(n) == [pascal(i,n) for i in 1..n]</span>
<div id="mathAns6-186" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Next, we write the function <span style="font-weight: bold;"> displayRow</span> to display the row,
separating entries by blanks and centering.
</p>



<div id="spadComm6-187" class="spadComm" >
<form id="formComm6-187" action="javascript:makeRequest('6-187');" >
<input id="comm6-187" type="text" class="command" style="width: 38em;" value="displayRow(n) == output center blankSeparate pascalRow(n)" />
</form>
<span id="commSav6-187" class="commSav" >displayRow(n) == output center blankSeparate pascalRow(n)</span>
<div id="mathAns6-187" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Here we have used three output operations.  Operation
<span class="spadfunFrom" >output</span><span class="index">output</span><a name="chapter-6-62"/><span class="index">OutputForm</span><a name="chapter-6-63"/> displays the printable form of
objects on the screen, <span class="spadfunFrom" >center</span><span class="index">center</span><a name="chapter-6-64"/><span class="index">OutputForm</span><a name="chapter-6-65"/> centers a
printable form in the width of the screen, and
<span class="spadfunFrom" >blankSeparate</span><span class="index">blankSeparate</span><a name="chapter-6-66"/><span class="index">OutputForm</span><a name="chapter-6-67"/> takes a list of nprintable
forms and inserts a blank between successive elements.
</p>


<p>Look at the result.
</p>



<div id="spadComm6-188" class="spadComm" >
<form id="formComm6-188" action="javascript:makeRequest('6-188');" >
<input id="comm6-188" type="text" class="command" style="width: 22em;" value="for i in 1..7 repeat displayRow i" />
</form>
<span id="commSav6-188" class="commSav" >for i in 1..7 repeat displayRow i</span>
<div id="mathAns6-188" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;pascal&nbsp;with&nbsp;type&nbsp;(Integer,Integer)&nbsp;-&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PositiveInteger&nbsp;<br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;pascalRow&nbsp;with&nbsp;type&nbsp;PositiveInteger&nbsp;-&gt;&nbsp;List&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PositiveInteger&nbsp;<br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;displayRow&nbsp;with&nbsp;type&nbsp;PositiveInteger&nbsp;-&gt;&nbsp;Void&nbsp;<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;1<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;2&nbsp;1<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;3&nbsp;3&nbsp;1<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;4&nbsp;6&nbsp;4&nbsp;1<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;5&nbsp;10&nbsp;10&nbsp;5&nbsp;1<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;6&nbsp;15&nbsp;20&nbsp;15&nbsp;6&nbsp;1<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Being purists, we find this less than satisfactory.  Traditionally,
elements of Pascal's triangle are centered between the left and right
elements on the line above.
</p>


<p>To fix this misalignment, we go back and redefine <span style="font-weight: bold;"> pascalRow</span> to
right adjust the entries within the triangle within a width of four
characters.
</p>




<div id="spadComm6-189" class="spadComm" >
<form id="formComm6-189" action="javascript:makeRequest('6-189');" >
<input id="comm6-189" type="text" class="command" style="width: 35em;" value="pascalRow(n) == [right(pascal(i,n),4) for i in 1..n]" />
</form>
<span id="commSav6-189" class="commSav" >pascalRow(n) == [right(pascal(i,n),4) for i in 1..n]</span>
<div id="mathAns6-189" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiled&nbsp;code&nbsp;for&nbsp;pascalRow&nbsp;has&nbsp;been&nbsp;cleared.<br />
&nbsp;&nbsp;&nbsp;Compiled&nbsp;code&nbsp;for&nbsp;displayRow&nbsp;has&nbsp;been&nbsp;cleared.<br />
&nbsp;&nbsp;&nbsp;1&nbsp;old&nbsp;definition(s)&nbsp;deleted&nbsp;for&nbsp;function&nbsp;or&nbsp;rule&nbsp;pascalRow&nbsp;<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Finally let's look at our purely reformatted triangle.
</p>



<div id="spadComm6-190" class="spadComm" >
<form id="formComm6-190" action="javascript:makeRequest('6-190');" >
<input id="comm6-190" type="text" class="command" style="width: 22em;" value="for i in 1..7 repeat displayRow i" />
</form>
<span id="commSav6-190" class="commSav" >for i in 1..7 repeat displayRow i</span>
<div id="mathAns6-190" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;pascalRow&nbsp;with&nbsp;type&nbsp;PositiveInteger&nbsp;-&gt;&nbsp;List&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OutputForm&nbsp;<br />
<br />
+++&nbsp;|*1;pascalRow;1;G82322|&nbsp;redefined<br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;displayRow&nbsp;with&nbsp;type&nbsp;PositiveInteger&nbsp;-&gt;&nbsp;Void&nbsp;<br />
<br />
+++&nbsp;|*1;displayRow;1;G82322|&nbsp;redefined<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;1<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;1<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;1<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;1<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;1<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;1<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Unexpose <span class="teletype">OutputForm</span> so we don't get unexpected results later.
</p>



<div id="spadComm6-191" class="spadComm" >
<form id="formComm6-191" action="javascript:makeRequest('6-191');" >
<input id="comm6-191" type="text" class="command" style="width: 26em;" value=")set expose drop constructor OutputForm" />
</form>
<span id="commSav6-191" class="commSav" >)set expose drop constructor OutputForm</span>
<div id="mathAns6-191" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;OutputForm&nbsp;is&nbsp;now&nbsp;explicitly&nbsp;hidden&nbsp;in&nbsp;frame&nbsp;G82322&nbsp;<br />
</div>





</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-6.18.xhtml" style="margin-right: 10px;">Previous Section 6.18 Example: A Database</a><a href="section-6.20.xhtml" style="margin-right: 10px;">Next Section 6.20 Example: Testing for Palindromes</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>