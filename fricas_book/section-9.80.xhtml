<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section9.80</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-9.79.xhtml" style="margin-right: 10px;">Previous Section 9.79 Symbol</a><a href="section-9.81.xhtml" style="margin-right: 10px;">Next Section 9.81 TextFile</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-9.80">
<h2 class="sectiontitle">9.80  Table</h2>


<a name="TableXmpPage" class="label"/>


<p>The <span class="teletype">Table</span> constructor provides a general structure for
associative storage.  This type provides hash tables in which data
objects can be saved according to keys of any type.  For a given
table, specific types must be chosen for the keys and entries.
</p>


<p>In this example the keys to the table are polynomials with integer
coefficients.  The entries in the table are strings.
</p>




<div id="spadComm9-157" class="spadComm" >
<form id="formComm9-157" action="javascript:makeRequest('9-157');" >
<input id="comm9-157" type="text" class="command" style="width: 32em;" value="t: Table(Polynomial Integer, String) := table() " />
</form>
<span id="commSav9-157" class="commSav" >t: Table(Polynomial Integer, String) := table() </span>
<div id="mathAns9-157" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mi>table</mi><mo>(</mo><mo>)</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Table(Polynomial Integer,String)
</div>



<p>To save an entry in the table, the <span class="spadfunFrom" >setelt</span><span class="index">setelt</span><a name="chapter-9-92"/><span class="index">Table</span><a name="chapter-9-93"/>
operation is used.  This can be called directly, giving the table a
key and an entry.
</p>




<div id="spadComm9-158" class="spadComm" >
<form id="formComm9-158" action="javascript:makeRequest('9-158');" >
<input id="comm9-158" type="text" class="command" style="width: 26em;" value='setelt(t, x^2 - 1, "Easy to factor") ' />
</form>
<span id="commSav9-158" class="commSav" >setelt(t, x^2 - 1, "Easy to factor") </span>
<div id="mathAns9-158" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"<mspace width="0.5em"/>Easy<mspace width="0.5em"/>to<mspace width="0.5em"/>factor<mspace width="0.5em"/>"<mspace width="0.5em"/></mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: String
</div>



<p>Alternatively, you can use assignment syntax.
</p>




<div id="spadComm9-159" class="spadComm" >
<form id="formComm9-159" action="javascript:makeRequest('9-159');" >
<input id="comm9-159" type="text" class="command" style="width: 23em;" value='t(x^3 + 1) := "Harder to factor" ' />
</form>
<span id="commSav9-159" class="commSav" >t(x^3 + 1) := "Harder to factor" </span>
<div id="mathAns9-159" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"<mspace width="0.5em"/>Harder<mspace width="0.5em"/>to<mspace width="0.5em"/>factor<mspace width="0.5em"/>"<mspace width="0.5em"/></mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: String
</div>





<div id="spadComm9-160" class="spadComm" >
<form id="formComm9-160" action="javascript:makeRequest('9-160');" >
<input id="comm9-160" type="text" class="command" style="width: 22em;" value='t(x) := "The easiest to factor" ' />
</form>
<span id="commSav9-160" class="commSav" >t(x) := "The easiest to factor" </span>
<div id="mathAns9-160" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"<mspace width="0.5em"/>The<mspace width="0.5em"/>easiest<mspace width="0.5em"/>to<mspace width="0.5em"/>factor<mspace width="0.5em"/>"<mspace width="0.5em"/></mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: String
</div>



<p>Entries are retrieved from the table by calling the
<span class="spadfunFrom" >elt</span><span class="index">elt</span><a name="chapter-9-94"/><span class="index">Table</span><a name="chapter-9-95"/> operation.
</p>




<div id="spadComm9-161" class="spadComm" >
<form id="formComm9-161" action="javascript:makeRequest('9-161');" >
<input id="comm9-161" type="text" class="command" style="width: 7em;" value="elt(t, x) " />
</form>
<span id="commSav9-161" class="commSav" >elt(t, x) </span>
<div id="mathAns9-161" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"<mspace width="0.5em"/>The<mspace width="0.5em"/>easiest<mspace width="0.5em"/>to<mspace width="0.5em"/>factor<mspace width="0.5em"/>"<mspace width="0.5em"/></mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: String
</div>



<p>This operation is called when a table is <span class="italic">applied</span> to a key using
this or the following syntax.
</p>




<div id="spadComm9-162" class="spadComm" >
<form id="formComm9-162" action="javascript:makeRequest('9-162');" >
<input id="comm9-162" type="text" class="command" style="width: 3em;" value="t.x " />
</form>
<span id="commSav9-162" class="commSav" >t.x </span>
<div id="mathAns9-162" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"<mspace width="0.5em"/>The<mspace width="0.5em"/>easiest<mspace width="0.5em"/>to<mspace width="0.5em"/>factor<mspace width="0.5em"/>"<mspace width="0.5em"/></mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: String
</div>





<div id="spadComm9-163" class="spadComm" >
<form id="formComm9-163" action="javascript:makeRequest('9-163');" >
<input id="comm9-163" type="text" class="command" style="width: 3em;" value="t x " />
</form>
<span id="commSav9-163" class="commSav" >t x </span>
<div id="mathAns9-163" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"<mspace width="0.5em"/>The<mspace width="0.5em"/>easiest<mspace width="0.5em"/>to<mspace width="0.5em"/>factor<mspace width="0.5em"/>"<mspace width="0.5em"/></mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: String
</div>



<p>Parentheses are used only for grouping.  They are needed if the key is
an infixed expression.
</p>




<div id="spadComm9-164" class="spadComm" >
<form id="formComm9-164" action="javascript:makeRequest('9-164');" >
<input id="comm9-164" type="text" class="command" style="width: 9em;" value="t.(x^2 - 1) " />
</form>
<span id="commSav9-164" class="commSav" >t.(x^2 - 1) </span>
<div id="mathAns9-164" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"<mspace width="0.5em"/>Easy<mspace width="0.5em"/>to<mspace width="0.5em"/>factor<mspace width="0.5em"/>"<mspace width="0.5em"/></mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: String
</div>



<p>Note that the <span class="spadfunFrom" >elt</span><span class="index">elt</span><a name="chapter-9-96"/><span class="index">Table</span><a name="chapter-9-97"/> operation is used only when the
key is known to be in the table---otherwise an error is generated.
</p>




<div id="spadComm9-165" class="spadComm" >
<form id="formComm9-165" action="javascript:makeRequest('9-165');" >
<input id="comm9-165" type="text" class="command" style="width: 9em;" value="t (x^3 + 1) " />
</form>
<span id="commSav9-165" class="commSav" >t (x^3 + 1) </span>
<div id="mathAns9-165" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"<mspace width="0.5em"/>Harder<mspace width="0.5em"/>to<mspace width="0.5em"/>factor<mspace width="0.5em"/>"<mspace width="0.5em"/></mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: String
</div>



<p>You can get a list of all the keys to a table using the
<span class="spadfunFrom" >keys</span><span class="index">keys</span><a name="chapter-9-98"/><span class="index">Table</span><a name="chapter-9-99"/> operation.
</p>




<div id="spadComm9-166" class="spadComm" >
<form id="formComm9-166" action="javascript:makeRequest('9-166');" >
<input id="comm9-166" type="text" class="command" style="width: 5em;" value="keys t " />
</form>
<span id="commSav9-166" class="commSav" >keys t </span>
<div id="mathAns9-166" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mi>x</mi><mo>,</mo><mrow><mrow><msup><mi>x</mi><mn>3</mn></msup></mrow><mo>+</mo><mn>1</mn></mrow><mo>,</mo><mrow><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><mo>-</mo><mn>1</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Polynomial Integer
</div>



<p>If you wish to test whether a key is in a table, the
<span class="spadfunFrom" >search</span><span class="index">search</span><a name="chapter-9-100"/><span class="index">Table</span><a name="chapter-9-101"/> operation is used.  This operation returns
either an entry or <span class="teletype">"failed"</span>.
</p>




<div id="spadComm9-167" class="spadComm" >
<form id="formComm9-167" action="javascript:makeRequest('9-167');" >
<input id="comm9-167" type="text" class="command" style="width: 9em;" value="search(x, t) " />
</form>
<span id="commSav9-167" class="commSav" >search(x, t) </span>
<div id="mathAns9-167" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"<mspace width="0.5em"/>The<mspace width="0.5em"/>easiest<mspace width="0.5em"/>to<mspace width="0.5em"/>factor<mspace width="0.5em"/>"<mspace width="0.5em"/></mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union(String,...)
</div>





<div id="spadComm9-168" class="spadComm" >
<form id="formComm9-168" action="javascript:makeRequest('9-168');" >
<input id="comm9-168" type="text" class="command" style="width: 11em;" value="search(x^2, t) " />
</form>
<span id="commSav9-168" class="commSav" >search(x^2, t) </span>
<div id="mathAns9-168" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"<mspace width="0.5em"/>failed<mspace width="0.5em"/>"<mspace width="0.5em"/></mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union("failed",...)
</div>



<p>The return type is a union so the success of the search can be tested
using <span class="teletype">case</span>.  
</p>




<div id="spadComm9-169" class="spadComm" >
<form id="formComm9-169" action="javascript:makeRequest('9-169');" >
<input id="comm9-169" type="text" class="command" style="width: 20em;" value='search(x^2, t) case "failed" ' />
</form>
<span id="commSav9-169" class="commSav" >search(x^2, t) case "failed" </span>
<div id="mathAns9-169" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true<mspace width="0.5em"/></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>The <span class="spadfunFrom" >remove</span><span class="index">remove</span><a name="chapter-9-102"/><span class="index">Table</span><a name="chapter-9-103"/> operation is used to delete values from a
table.
</p>




<div id="spadComm9-170" class="spadComm" >
<form id="formComm9-170" action="javascript:makeRequest('9-170');" >
<input id="comm9-170" type="text" class="command" style="width: 14em;" value="remove!(x^2-1, t)  " />
</form>
<span id="commSav9-170" class="commSav" >remove!(x^2-1, t)  </span>
<div id="mathAns9-170" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"<mspace width="0.5em"/>Easy<mspace width="0.5em"/>to<mspace width="0.5em"/>factor<mspace width="0.5em"/>"<mspace width="0.5em"/></mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union(String,...)
</div>



<p>If an entry exists under the key, then it is returned.  Otherwise
<span class="spadfunFrom" >remove</span><span class="index">remove</span><a name="chapter-9-104"/><span class="index">Table</span><a name="chapter-9-105"/> returns <span class="teletype">"failed"</span>.
</p>




<div id="spadComm9-171" class="spadComm" >
<form id="formComm9-171" action="javascript:makeRequest('9-171');" >
<input id="comm9-171" type="text" class="command" style="width: 11em;" value="remove!(x-1, t) " />
</form>
<span id="commSav9-171" class="commSav" >remove!(x-1, t) </span>
<div id="mathAns9-171" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"<mspace width="0.5em"/>failed<mspace width="0.5em"/>"<mspace width="0.5em"/></mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union("failed",...)
</div>



<p>The number of key-entry pairs can be found using the
<span class="spadfunFrom" > #</span><span class="index"> #</span><a name="chapter-9-106"/><span class="index">Table</span><a name="chapter-9-107"/> operation.
</p>




<div id="spadComm9-172" class="spadComm" >
<form id="formComm9-172" action="javascript:makeRequest('9-172');" >
<input id="comm9-172" type="text" class="command" style="width: 3em;" value=" #t " />
</form>
<span id="commSav9-172" class="commSav" > #t </span>
<div id="mathAns9-172" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Just as <span class="spadfunFrom" >keys</span><span class="index">keys</span><a name="chapter-9-108"/><span class="index">Table</span><a name="chapter-9-109"/> returns a list of keys to the table,
a list of all the entries can be obtained using the
<span class="spadfunFrom" >members</span><span class="index">members</span><a name="chapter-9-110"/><span class="index">Table</span><a name="chapter-9-111"/> operation.
</p>




<div id="spadComm9-173" class="spadComm" >
<form id="formComm9-173" action="javascript:makeRequest('9-173');" >
<input id="comm9-173" type="text" class="command" style="width: 7em;" value="members t " />
</form>
<span id="commSav9-173" class="commSav" >members t </span>
<div id="mathAns9-173" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mtext><mrow><mtext mathvariant='monospace'>"<mspace width="0.5em"/>The<mspace width="0.5em"/>easiest<mspace width="0.5em"/>to<mspace width="0.5em"/>factor<mspace width="0.5em"/>"<mspace width="0.5em"/></mtext></mrow></mtext><mo>,</mo><mtext><mrow><mtext mathvariant='monospace'>"<mspace width="0.5em"/>Harder<mspace width="0.5em"/>to<mspace width="0.5em"/>factor<mspace width="0.5em"/>"<mspace width="0.5em"/></mtext></mrow></mtext><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List String
</div>



<p>A number of useful operations take functions and map them on to the
table to compute the result.  Here we count the entries which
have <span class="italic"><span class="teletype">Hard</span></span> as a prefix.
</p>




<div id="spadComm9-174" class="spadComm" >
<form id="formComm9-174" action="javascript:makeRequest('9-174');" >
<input id="comm9-174" type="text" class="command" style="width: 29em;" value='count(s: String +-> prefix?("Hard", s), t) ' />
</form>
<span id="commSav9-174" class="commSav" >count(s: String +-> prefix?("Hard", s), t) </span>
<div id="mathAns9-174" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Other table types are provided to support various needs.
\indent
</p>



<div class="beginlist">
<div class="item">
 <span class="teletype">AssociationList</span> gives a list with a table view.
This allows new entries to be appended onto the front of the list
to cover up old entries.
This is useful when table entries need to be stacked or when
frequent list traversals are required.
See <a href="section-9.1.xhtml#AssociationListXmpPage" class="ref" >AssociationListXmpPage</a>  
for more information.
</div>
<div class="item"> <span class="teletype">EqTable</span> gives tables in which keys are considered
equal only when they are in fact the same instance of a structure.
See <a href="section-9.18.xhtml#EqTableXmpPage" class="ref" >EqTableXmpPage</a>  for more information.
</div>
<div class="item"> <span class="teletype">StringTable</span> should be used when the keys are known to
be strings.
See <a href="section-9.78.xhtml#StringTableXmpPage" class="ref" >StringTableXmpPage</a>  
for more information.
</div>
<div class="item"> <span class="teletype">SparseTable</span> provides tables with default
entries, so
lookup never fails.  The <span class="teletype">GeneralSparseTable</span> constructor
can be used to make any table type behave this way.
See <a href="section-9.30.xhtml#GeneralSparseTableXmpPage" class="ref" >SparseTableXmpPage</a>  
for more information.
</div>
<div class="item"> <span class="teletype">KeyedAccessFile</span> allows values to be saved in a file,
accessed as a table.
See <a href="section-9.38.xhtml#KeyedAccessFileXmpPage" class="ref" >KeyedAccessFileXmpPage</a>  
for more information.
</div>
</div>






</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-9.79.xhtml" style="margin-right: 10px;">Previous Section 9.79 Symbol</a><a href="section-9.81.xhtml" style="margin-right: 10px;">Next Section 9.81 TextFile</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>