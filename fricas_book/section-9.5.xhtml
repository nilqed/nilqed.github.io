<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section9.5</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-9.4.xhtml" style="margin-right: 10px;">Previous Section 9.4 BinaryExpansion</a><a href="section-9.6.xhtml" style="margin-right: 10px;">Next Section 9.6 CardinalNumber</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-9.5">
<h2 class="sectiontitle">9.5  BinarySearchTree</h2>


<a name="BinarySearchTreeXmpPage" class="label"/>


<p><span class="teletype">BinarySearchTree(R)</span> is the domain of binary trees with elements
of type <span class="teletype">R</span>, ordered across the nodes of the tree.  A non-empty
binary search tree has a value of type <span class="teletype">R</span>, and <span class="teletype">right</span> and
<span class="teletype">left</span> binary search subtrees.  If a subtree is empty, it is
displayed as a period (<span class="italic">.</span>).
</p>


<p>Define a list of values to be placed across the tree.  The resulting
tree has <span class="teletype">8</span> at the root; all other elements are in the left
subtree.
</p>




<div id="spadComm9-46" class="spadComm" >
<form id="formComm9-46" action="javascript:makeRequest('9-46');" >
<input id="comm9-46" type="text" class="command" style="width: 17em;" value="lv := [8,3,5,4,6,2,1,5,7]" />
</form>
<span id="commSav9-46" class="commSav" >lv := [8,3,5,4,6,2,1,5,7]</span>
<div id="mathAns9-46" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>8</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>A convenient way to create a binary search tree is to apply the
operation <span class="teletype">binarySearchTree</span> to a list of elements.
</p>




<div id="spadComm9-47" class="spadComm" >
<form id="formComm9-47" action="javascript:makeRequest('9-47');" >
<input id="comm9-47" type="text" class="command" style="width: 16em;" value="t := binarySearchTree lv" />
</form>
<span id="commSav9-47" class="commSav" >t := binarySearchTree lv</span>
<div id="mathAns9-47" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mo>[</mo><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mo>.</mo><mo>]</mo></mrow><mo>,</mo><mn>3</mn><mo>,</mo><mrow><mo>[</mo><mn>4</mn><mo>,</mo><mn>5</mn><mo>,</mo><mrow><mo>[</mo><mn>5</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow><mo>]</mo></mrow><mo>]</mo></mrow><mo>,</mo><mn>8</mn><mo>,</mo><mo>.</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: BinarySearchTree PositiveInteger
</div>



<p>Another approach is to first create an empty binary search tree of integers.
</p>




<div id="spadComm9-48" class="spadComm" >
<form id="formComm9-48" action="javascript:makeRequest('9-48');" >
<input id="comm9-48" type="text" class="command" style="width: 21em;" value="emptybst := empty()$BSTREE(INT)" />
</form>
<span id="commSav9-48" class="commSav" >emptybst := empty()$BSTREE(INT)</span>
<div id="mathAns9-48" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mspace width="0.5 em" /><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: BinarySearchTree Integer
</div>



<p>Insert the value <span class="teletype">8</span>.  This establishes <span class="teletype">8</span> as the root of the
binary search tree.  Values inserted later that are less than <span class="teletype">8</span>
get stored in the <span class="teletype">left</span> subtree, others in the <span class="teletype">right</span> subtree.
</p>




<div id="spadComm9-49" class="spadComm" >
<form id="formComm9-49" action="javascript:makeRequest('9-49');" >
<input id="comm9-49" type="text" class="command" style="width: 17em;" value="t1 := insert!(8,emptybst)" />
</form>
<span id="commSav9-49" class="commSav" >t1 := insert!(8,emptybst)</span>
<div id="mathAns9-49" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>8</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: BinarySearchTree Integer
</div>



<p>Insert the value <span class="teletype">3</span>. This number becomes the root of the <span class="teletype">left</span> subtree of <span class="teletype">t1</span>.  For optimal retrieval, it is thus
important to insert the middle elements first.
</p>




<div id="spadComm9-50" class="spadComm" >
<form id="formComm9-50" action="javascript:makeRequest('9-50');" >
<input id="comm9-50" type="text" class="command" style="width: 9em;" value="insert!(3,t1)" />
</form>
<span id="commSav9-50" class="commSav" >insert!(3,t1)</span>
<div id="mathAns9-50" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>3</mn><mo>,</mo><mn>8</mn><mo>,</mo><mo>.</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: BinarySearchTree Integer
</div>



<p>We go back to the original tree <span class="teletype">t</span>.  The leaves of the binary
search tree are those which have empty <span class="teletype">left</span> and <span class="teletype">right</span> subtrees.
</p>




<div id="spadComm9-51" class="spadComm" >
<form id="formComm9-51" action="javascript:makeRequest('9-51');" >
<input id="comm9-51" type="text" class="command" style="width: 6em;" value="leaves t" />
</form>
<span id="commSav9-51" class="commSav" >leaves t</span>
<div id="mathAns9-51" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>The operation <span class="teletype">split</span><span class="teletype">(k,t)</span> returns a <span class="index">record</span><a name="chapter-9-22"/>
containing the two subtrees: one with all elements <span class="italic">less</span> than 
<span class="teletype">k</span>, another with elements <span class="italic">greater</span> than <span class="teletype">k</span>.
</p>




<div id="spadComm9-52" class="spadComm" >
<form id="formComm9-52" action="javascript:makeRequest('9-52');" >
<input id="comm9-52" type="text" class="command" style="width: 7em;" value="split(3,t)" />
</form>
<span id="commSav9-52" class="commSav" >split(3,t)</span>
<div id="mathAns9-52" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mi>less</mi><mo>=</mo><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mo>.</mo><mo>]</mo></mrow></mrow><mo>,</mo><mrow><mi>greater</mi><mo>=</mo><mrow><mo>[</mo><mrow><mo>[</mo><mo>.</mo><mo>,</mo><mn>3</mn><mo>,</mo><mrow><mo>[</mo><mn>4</mn><mo>,</mo><mn>5</mn><mo>,</mo><mrow><mo>[</mo><mn>5</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow><mo>]</mo></mrow><mo>]</mo></mrow><mo>,</mo><mn>8</mn><mo>,</mo><mo>.</mo><mo>]</mo></mrow></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: 
Record(less: BinarySearchTree PositiveInteger,greater: 
BinarySearchTree PositiveInteger)
</div>



<p>Define <span class="teletype">insertRoot</span> to insert new elements by creating a new node.
</p>




<div id="spadComm9-53" class="spadComm" >
<form id="formComm9-53" action="javascript:makeRequest('9-53');" >
<input id="comm9-53" type="text" class="command" style="width: 28em;" value="insertRoot: (INT,BSTREE INT) -> BSTREE INT" />
</form>
<span id="commSav9-53" class="commSav" >insertRoot: (INT,BSTREE INT) -> BSTREE INT</span>
<div id="mathAns9-53" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>The new node puts the inserted value between its <span class="italic">less</span> tree and
<span class="italic">greater</span> tree.
</p>




<div class="verbatim"><br />
insertRoot(x,&nbsp;t)&nbsp;==<br />
&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;:=&nbsp;split(x,&nbsp;t)<br />
&nbsp;&nbsp;&nbsp;&nbsp;node(a.less,&nbsp;x,&nbsp;a.greater)<br />
</div>



<p>Function <span class="teletype">buildFromRoot</span> builds a binary search tree from a list
of elements <span class="teletype">ls</span> and the empty tree <span class="teletype">emptybst</span>.
</p>




<div id="spadComm9-54" class="spadComm" >
<form id="formComm9-54" action="javascript:makeRequest('9-54');" >
<input id="comm9-54" type="text" class="command" style="width: 34em;" value="buildFromRoot ls == reduce(insertRoot,ls,emptybst)" />
</form>
<span id="commSav9-54" class="commSav" >buildFromRoot ls == reduce(insertRoot,ls,emptybst)</span>
<div id="mathAns9-54" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Apply this to the reverse of the list <span class="teletype">lv</span>.
</p>




<div id="spadComm9-55" class="spadComm" >
<form id="formComm9-55" action="javascript:makeRequest('9-55');" >
<input id="comm9-55" type="text" class="command" style="width: 20em;" value="rt := buildFromRoot reverse lv" />
</form>
<span id="commSav9-55" class="commSav" >rt := buildFromRoot reverse lv</span>
<div id="mathAns9-55" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mo>[</mo><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mo>.</mo><mo>]</mo></mrow><mo>,</mo><mn>3</mn><mo>,</mo><mrow><mo>[</mo><mn>4</mn><mo>,</mo><mn>5</mn><mo>,</mo><mrow><mo>[</mo><mn>5</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>7</mn><mo>]</mo></mrow><mo>]</mo></mrow><mo>]</mo></mrow><mo>,</mo><mn>8</mn><mo>,</mo><mo>.</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: BinarySearchTree Integer
</div>



<p>Have FriCAS check that these are equal.
</p>




<div id="spadComm9-56" class="spadComm" >
<form id="formComm9-56" action="javascript:makeRequest('9-56');" >
<input id="comm9-56" type="text" class="command" style="width: 11em;" value="(t = rt)@Boolean" />
</form>
<span id="commSav9-56" class="commSav" >(t = rt)@Boolean</span>
<div id="mathAns9-56" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>





</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-9.4.xhtml" style="margin-right: 10px;">Previous Section 9.4 BinaryExpansion</a><a href="section-9.6.xhtml" style="margin-right: 10px;">Next Section 9.6 CardinalNumber</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>