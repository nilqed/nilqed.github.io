<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section6.14</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-6.13.xhtml" style="margin-right: 10px;">Previous Section 6.13 Recurrence Relations</a><a href="section-6.15.xhtml" style="margin-right: 10px;">Next Section 6.15 Functions Defined with Blocks</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-6.14">
<h2 class="sectiontitle">6.14  Making Functions from Objects</h2>


<a name="ugUserMake" class="label"/>


<p>There are many times when you compute a complicated expression and
then wish to use that expression as the body of a function.  FriCAS
provides an operation called <span style="font-weight: bold;"> function</span> to do <span class="index">function:from
an object</span><a name="chapter-6-38"/> this. <span class="index">function:made by function @{made by 
<span style="font-weight: bold;"> function</span><a name="chapter-6-39"/>}</span> It creates a function object and places it into the
workspace.  There are several versions, depending on how many
arguments the function has.  The first argument to <span style="font-weight: bold;"> function</span> is
always the expression to be converted into the function body, and the
second is always the name to be used for the function.  For more
information, see section <a href="section-9.50.xhtml#MakeFunctionXmpPage" class="ref" >MakeFunctionXmpPage</a> .
</p>


<p>Start with a simple example of a polynomial in three variables.
</p>



<div id="spadComm6-107" class="spadComm" >
<form id="formComm6-107" action="javascript:makeRequest('6-107');" >
<input id="comm6-107" type="text" class="command" style="width: 14em;" value="p := -x + y^2 - z^3" />
</form>
<span id="commSav6-107" class="commSav" >p := -x + y^2 - z^3</span>
<div id="mathAns6-107" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mrow><msup><mi>z</mi><mn>3</mn></msup></mrow><mo>+</mo><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow><mo>-</mo><mi>x</mi></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Integer
</div>



<p>To make this into a function of no arguments that simply returns the
polynomial, use the two argument form of <span style="font-weight: bold;"> function</span>.
</p>



<div id="spadComm6-108" class="spadComm" >
<form id="formComm6-108" action="javascript:makeRequest('6-108');" >
<input id="comm6-108" type="text" class="command" style="width: 10em;" value="function(p,'f0)" />
</form>
<span id="commSav6-108" class="commSav" >function(p,'f0)</span>
<div id="mathAns6-108" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>f0</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Symbol
</div>



<p>To avoid possible conflicts (see below), it is a good idea to
quote always this second argument.
</p>



<div id="spadComm6-109" class="spadComm" >
<form id="formComm6-109" action="javascript:makeRequest('6-109');" >
<input id="comm6-109" type="text" class="command" style="width: 2em;" value="f0" />
</form>
<span id="commSav6-109" class="commSav" >f0</span>
<div id="mathAns6-109" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mi>f0</mi><mo></mo><mrow><mo>(</mo><mo>)</mo></mrow><mo></mo><mo>=</mo><mo>=</mo><mo></mo><mrow><mo>-</mo><mrow><msup><mi>z</mi><mn>3</mn></msup></mrow><mo>+</mo><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow><mo>-</mo><mi>x</mi></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FunctionCalled f0
</div>



<p>This is what you get when you evaluate the function.
</p>



<div id="spadComm6-110" class="spadComm" >
<form id="formComm6-110" action="javascript:makeRequest('6-110');" >
<input id="comm6-110" type="text" class="command" style="width: 3em;" value="f0()" />
</form>
<span id="commSav6-110" class="commSav" >f0()</span>
<div id="mathAns6-110" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mrow><msup><mi>z</mi><mn>3</mn></msup></mrow><mo>+</mo><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow><mo>-</mo><mi>x</mi></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Integer
</div>



<p>To make a function in <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math>, use a version of <span style="font-weight: bold;"> function</span> that takes
three arguments.  The last argument is the name of the variable to use
as the parameter.  Typically, this variable occurs in the expression
and, like the function name, you should quote it to avoid possible confusion.
</p>



<div id="spadComm6-111" class="spadComm" >
<form id="formComm6-111" action="javascript:makeRequest('6-111');" >
<input id="comm6-111" type="text" class="command" style="width: 12em;" value="function(p,'f1,'x)" />
</form>
<span id="commSav6-111" class="commSav" >function(p,'f1,'x)</span>
<div id="mathAns6-111" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>f1</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Symbol
</div>



<p>This is what the new function looks like.
</p>



<div id="spadComm6-112" class="spadComm" >
<form id="formComm6-112" action="javascript:makeRequest('6-112');" >
<input id="comm6-112" type="text" class="command" style="width: 2em;" value="f1" />
</form>
<span id="commSav6-112" class="commSav" >f1</span>
<div id="mathAns6-112" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mi>f1</mi><mo></mo><mi>x</mi><mo></mo><mo>=</mo><mo>=</mo><mo></mo><mrow><mo>-</mo><mrow><msup><mi>z</mi><mn>3</mn></msup></mrow><mo>+</mo><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow><mo>-</mo><mi>x</mi></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FunctionCalled f1
</div>



<p>This is the value of <span style="font-weight: bold;"> f1</span> at <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>x</mi><mo>=</mo><mn>3</mn></mrow></mstyle></math>.  Notice that the return type
of the function is <span class="teletype">Polynomial (Integer)</span>, the same as <math xmlns="&mathml;" mathsize="big"><mstyle><mi>p</mi></mstyle></math>.
</p>



<div id="spadComm6-113" class="spadComm" >
<form id="formComm6-113" action="javascript:makeRequest('6-113');" >
<input id="comm6-113" type="text" class="command" style="width: 4em;" value="f1(3)" />
</form>
<span id="commSav6-113" class="commSav" >f1(3)</span>
<div id="mathAns6-113" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;f1&nbsp;with&nbsp;type&nbsp;PositiveInteger&nbsp;-&gt;&nbsp;Polynomial&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mrow><msup><mi>z</mi><mn>3</mn></msup></mrow><mo>+</mo><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow><mo>-</mo><mn>3</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Integer
</div>



<p>To use <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> and <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math> as parameters, use the four argument form of <span style="font-weight: bold;"> function</span>.
</p>



<div id="spadComm6-114" class="spadComm" >
<form id="formComm6-114" action="javascript:makeRequest('6-114');" >
<input id="comm6-114" type="text" class="command" style="width: 14em;" value="function(p,'f2,'x,'y)" />
</form>
<span id="commSav6-114" class="commSav" >function(p,'f2,'x,'y)</span>
<div id="mathAns6-114" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>f2</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Symbol
</div>





<div id="spadComm6-115" class="spadComm" >
<form id="formComm6-115" action="javascript:makeRequest('6-115');" >
<input id="comm6-115" type="text" class="command" style="width: 2em;" value="f2" />
</form>
<span id="commSav6-115" class="commSav" >f2</span>
<div id="mathAns6-115" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mi>f2</mi><mo></mo><mrow><mo>(</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo>)</mo></mrow><mo></mo><mo>=</mo><mo>=</mo><mo></mo><mrow><mo>-</mo><mrow><msup><mi>z</mi><mn>3</mn></msup></mrow><mo>+</mo><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow><mo>-</mo><mi>x</mi></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FunctionCalled f2
</div>



<p>Evaluate <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f2</mi></mstyle></math> at <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>x</mi><mo>=</mo><mn>3</mn></mrow></mstyle></math> and <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>y</mi><mo>=</mo><mn>0</mn></mrow></mstyle></math>.  The return type of <span style="font-weight: bold;"> f2</span> is
still <span class="teletype">Polynomial(Integer)</span> because the variable <math xmlns="&mathml;" mathsize="big"><mstyle><mi>z</mi></mstyle></math> is still
present and not one of the parameters.
</p>



<div id="spadComm6-116" class="spadComm" >
<form id="formComm6-116" action="javascript:makeRequest('6-116');" >
<input id="comm6-116" type="text" class="command" style="width: 5em;" value="f2(3,0)" />
</form>
<span id="commSav6-116" class="commSav" >f2(3,0)</span>
<div id="mathAns6-116" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mrow><msup><mi>z</mi><mn>3</mn></msup></mrow><mo>-</mo><mn>3</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Integer
</div>



<p>Finally, use all three variables as parameters.  There is no five
argument form of <span style="font-weight: bold;"> function</span>, so use the one with three arguments,
the third argument being a list of the parameters.
</p>



<div id="spadComm6-117" class="spadComm" >
<form id="formComm6-117" action="javascript:makeRequest('6-117');" >
<input id="comm6-117" type="text" class="command" style="width: 18em;" value="function(p,'f3,['x,'y,'z])" />
</form>
<span id="commSav6-117" class="commSav" >function(p,'f3,['x,'y,'z])</span>
<div id="mathAns6-117" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>f3</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Symbol
</div>



<p>Evaluate this using the same values for <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> and <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math> as above, but let
<math xmlns="&mathml;" mathsize="big"><mstyle><mi>z</mi></mstyle></math> be <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>-</mo><mn>6</mn></mrow></mstyle></math>.  The result type of <span style="font-weight: bold;"> f3</span> is <span class="teletype">Integer</span>.
</p>



<div id="spadComm6-118" class="spadComm" >
<form id="formComm6-118" action="javascript:makeRequest('6-118');" >
<input id="comm6-118" type="text" class="command" style="width: 2em;" value="f3" />
</form>
<span id="commSav6-118" class="commSav" >f3</span>
<div id="mathAns6-118" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mi>f3</mi><mo></mo><mrow><mo>(</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo>,</mo><mi>z</mi><mo>)</mo></mrow><mo></mo><mo>=</mo><mo>=</mo><mo></mo><mrow><mo>-</mo><mrow><msup><mi>z</mi><mn>3</mn></msup></mrow><mo>+</mo><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow><mo>-</mo><mi>x</mi></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FunctionCalled f3
</div>





<div id="spadComm6-119" class="spadComm" >
<form id="formComm6-119" action="javascript:makeRequest('6-119');" >
<input id="comm6-119" type="text" class="command" style="width: 7em;" value="f3(3,0,-6)" />
</form>
<span id="commSav6-119" class="commSav" >f3(3,0,-6)</span>
<div id="mathAns6-119" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;f3&nbsp;with&nbsp;type&nbsp;(PositiveInteger,NonNegativeInteger,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer)&nbsp;-&gt;&nbsp;Integer&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>213</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>The four functions we have defined via <math xmlns="&mathml;" mathsize="big"><mstyle><mi>p</mi></mstyle></math> have been undeclared.  To
declare a function whose body is to be generated by 
<span class="index">function:declaring</span><a name="chapter-6-40"/> <span style="font-weight: bold;"> function</span>, issue the declaration 
<span class="italic">before</span> the function is created.
</p>



<div id="spadComm6-120" class="spadComm" >
<form id="formComm6-120" action="javascript:makeRequest('6-120');" >
<input id="comm6-120" type="text" class="command" style="width: 20em;" value="g: (Integer, Integer) -> Float" />
</form>
<span id="commSav6-120" class="commSav" >g: (Integer, Integer) -> Float</span>
<div id="mathAns6-120" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm6-121" class="spadComm" >
<form id="formComm6-121" action="javascript:makeRequest('6-121');" >
<input id="comm6-121" type="text" class="command" style="width: 15em;" value="D(sin(x-y)/cos(x+y),x)" />
</form>
<span id="commSav6-121" class="commSav" >D(sin(x-y)/cos(x+y),x)</span>
<div id="mathAns6-121" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mfrac><mrow><mo>-</mo><mrow><mrow><mo>sin</mo><mo>(</mo><mrow><mi>y</mi><mo>-</mo><mi>x</mi></mrow><mo>)</mo></mrow><mo></mo><mrow><mo>sin</mo><mo>(</mo><mrow><mi>y</mi><mo>+</mo><mi>x</mi></mrow><mo>)</mo></mrow></mrow><mo>+</mo><mrow><mrow><mo>cos</mo><mo>(</mo><mrow><mi>y</mi><mo>-</mo><mi>x</mi></mrow><mo>)</mo></mrow><mo></mo><mrow><mo>cos</mo><mo>(</mo><mrow><mi>y</mi><mo>+</mo><mi>x</mi></mrow><mo>)</mo></mrow></mrow></mrow><mrow><msup><mrow><mo>cos</mo><mo>(</mo><mrow><mi>y</mi><mo>+</mo><mi>x</mi></mrow><mo>)</mo></mrow><mn>2</mn></msup></mrow></mfrac></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Expression Integer
</div>





<div id="spadComm6-122" class="spadComm" >
<form id="formComm6-122" action="javascript:makeRequest('6-122');" >
<input id="comm6-122" type="text" class="command" style="width: 14em;" value="function(%,'g,'x,'y)" />
</form>
<span id="commSav6-122" class="commSav" >function(%,'g,'x,'y)</span>
<div id="mathAns6-122" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>g</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Symbol
</div>





<div id="spadComm6-123" class="spadComm" >
<form id="formComm6-123" action="javascript:makeRequest('6-123');" >
<input id="comm6-123" type="text" class="command" style="width: 1em;" value="g" />
</form>
<span id="commSav6-123" class="commSav" >g</span>
<div id="mathAns6-123" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mi>g</mi><mo></mo><mrow><mo>(</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo>)</mo></mrow><mo></mo><mo>=</mo><mo>=</mo><mo></mo><mfrac><mrow><mo>-</mo><mrow><mrow><mo>sin</mo><mo>(</mo><mrow><mi>y</mi><mo>-</mo><mi>x</mi></mrow><mo>)</mo></mrow><mo></mo><mrow><mo>sin</mo><mo>(</mo><mrow><mi>y</mi><mo>+</mo><mi>x</mi></mrow><mo>)</mo></mrow></mrow><mo>+</mo><mrow><mrow><mo>cos</mo><mo>(</mo><mrow><mi>y</mi><mo>-</mo><mi>x</mi></mrow><mo>)</mo></mrow><mo></mo><mrow><mo>cos</mo><mo>(</mo><mrow><mi>y</mi><mo>+</mo><mi>x</mi></mrow><mo>)</mo></mrow></mrow></mrow><mrow><msup><mrow><mo>cos</mo><mo>(</mo><mrow><mi>y</mi><mo>+</mo><mi>x</mi></mrow><mo>)</mo></mrow><mn>2</mn></msup></mrow></mfrac></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: FunctionCalled g
</div>



<p>It is an error to use <math xmlns="&mathml;" mathsize="big"><mstyle><mi>g</mi></mstyle></math> without the quote in the penultimate
expression since <math xmlns="&mathml;" mathsize="big"><mstyle><mi>g</mi></mstyle></math> had been declared but did not have a value.
Similarly, since it is common to overuse variable names like <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math>, <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math>,
and so on, you avoid problems if you always quote the variable names
for <span style="font-weight: bold;"> function</span>.  In general, if <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> has a value and you use <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math>
without a quote in a call to <span style="font-weight: bold;"> function</span>, then FriCAS does not know
what you are trying to do.
</p>


<p>What kind of object is allowable as the first argument to 
<span style="font-weight: bold;"> function</span>?  Let's use the Browse facility of HyperDoc to find out.
<span class="index">Browse@Browse</span><a name="chapter-6-41"/> At the main Browse menu, enter the string 
<span class="teletype">function</span> and then click on <span style="font-weight: bold;"> Operations.</span>  The exposed operations
called <span style="font-weight: bold;"> function</span> all take an object whose type belongs to
category <span class="teletype">ConvertibleTo InputForm</span>.  What domains are those?  Go
back to the main Browse menu, erase <span class="teletype">function</span>, enter 
<span class="teletype">ConvertibleTo</span> in the input area, and click on <span style="font-weight: bold;"> categories</span> on the
<span class="teletype">Constructors</span> line.  At the bottom of the page, enter 
<span class="teletype">InputForm</span> in the input area following <span style="font-weight: bold;"> S =</span>.  Click on 
<span class="teletype">Cross Reference</span> and then on <span class="teletype">Domains</span>.  
The list you see contains over forty domains that belong to the 
category <span class="teletype">ConvertibleTo InputForm</span>.  Thus you can use <span style="font-weight: bold;"> function</span> 
for <span class="teletype">Integer</span>, <span class="teletype">Float</span>, <span class="teletype">String</span>, <span class="teletype">Complex</span>, 
<span class="teletype">Expression</span>, and so on.
</p>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-6.13.xhtml" style="margin-right: 10px;">Previous Section 6.13 Recurrence Relations</a><a href="section-6.15.xhtml" style="margin-right: 10px;">Next Section 6.15 Functions Defined with Blocks</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>