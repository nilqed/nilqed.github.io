<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section6.17</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-6.16.xhtml" style="margin-right: 10px;">Previous Section 6.16 Free and Local Variables</a><a href="section-6.18.xhtml" style="margin-right: 10px;">Next Section 6.18 Example: A Database</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-6.17">
<h2 class="sectiontitle">6.17  Anonymous Functions</h2>


<a name="ugUserAnon" class="label"/>




<div class="boxed2">


<div class="boxed">



<p>An <span class="italic">anonymous function</span> is a function that is
<span class="index">function:anonymous</span><a name="chapter-6-54"/> defined <span class="index">anonymous function</span><a name="chapter-6-55"/> by
giving a list of parameters, the <span class="italic">maps-to</span> compound 
<span class="index">+-> @<span class="teletype">+-></span></span><a name="chapter-6-56"/> symbol ``<span class="teletype">+-></span>'' 
(from the mathematical symbol <math xmlns="&mathml;" mathsize="big"><mstyle><mo>&#x21a6;</mo></mstyle></math>), and
by an expression involving the parameters, the evaluation of which
determines the return value of the function.
</p>




<div class="center" style="text-align: center;">


<p><span class="teletype">( <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>parm</mtext></mrow><mn>1</mn></msub></mrow></mstyle></math>, <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>parm</mtext></mrow><mn>2</mn></msub></mrow></mstyle></math>, ..., 
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>parm</mtext></mrow><mi>N</mi></msub></mrow></mstyle></math> ) <span class="teletype">+-></span> <span class="italic">expression</span></span>
</p>



</div>




</div>
</div>



<p>You can apply an anonymous function in several ways.
</p>



<ol>
<li>
 Place the anonymous function definition in parentheses
directly followed by a list of arguments.
</li>
<li> Assign the anonymous function to a variable and then
use the variable name when you would normally use a function name.
</li>
<li> Use <span class="italic"><span class="teletype">==</span></span> to use the anonymous function definition as
the arguments and body of a regular function definition.
</li>
<li> Have a named function contain a declared anonymous function and
use the result returned by the named function.
</li>
</ol>




<a name="subsec-6.17.1"/>
<div class="subsection"  id="subsec-6.17.1">
<h3 class="subsectitle">6.17.1  Some Examples</h3>


<a name="ugUserAnonExamp" class="label"/>


<p>Anonymous functions are particularly useful for defining functions
<span class="italic">on the fly.</span> That is, they are handy for simple functions that are
used only in one place.  In the following examples, we show how to
write some simple anonymous functions.
</p>


<p>This is a simple absolute value function.
</p>



<div id="spadComm6-156" class="spadComm" >
<form id="formComm6-156" action="javascript:makeRequest('6-156');" >
<input id="comm6-156" type="text" class="command" style="width: 20em;" value="x +-> if x &lt; 0 then -x else x" />
</form>
<span id="commSav6-156" class="commSav" >x +-> if x &lt; 0 then -x else x</span>
<div id="mathAns6-156" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mi>x</mi><mo>&#x21a6;</mo><mrow><mi>if</mi><mo></mo><mrow><mi>x</mi><mo>&lt;</mo><mn>0</mn></mrow><mo></mo><mrow><mtable><mtr><mtd><mrow><mi>then</mi><mo></mo><mo>-</mo><mi>x</mi></mrow></mtd></mtr><mtr><mtd><mrow><mi>else</mi><mo></mo><mi>x</mi></mrow></mtd></mtr></mtable></mrow></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: AnonymousFunction
</div>





<div id="spadComm6-157" class="spadComm" >
<form id="formComm6-157" action="javascript:makeRequest('6-157');" >
<input id="comm6-157" type="text" class="command" style="width: 7em;" value="abs1 := %" />
</form>
<span id="commSav6-157" class="commSav" >abs1 := %</span>
<div id="mathAns6-157" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mi>x</mi><mo>&#x21a6;</mo><mrow><mi>if</mi><mo></mo><mrow><mi>x</mi><mo>&lt;</mo><mn>0</mn></mrow><mo></mo><mrow><mtable><mtr><mtd><mrow><mi>then</mi><mo></mo><mo>-</mo><mi>x</mi></mrow></mtd></mtr><mtr><mtd><mrow><mi>else</mi><mo></mo><mi>x</mi></mrow></mtd></mtr></mtable></mrow></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: AnonymousFunction
</div>



<p>This function returns <span class="teletype">true</span> if the absolute value of
the first argument is greater than the absolute value of the
second, <span class="teletype">false</span> otherwise.
</p>




<div id="spadComm6-158" class="spadComm" >
<form id="formComm6-158" action="javascript:makeRequest('6-158');" >
<input id="comm6-158" type="text" class="command" style="width: 18em;" value="(x,y) +-> abs1(x) > abs1(y)" />
</form>
<span id="commSav6-158" class="commSav" >(x,y) +-> abs1(x) > abs1(y)</span>
<div id="mathAns6-158" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mo>(</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo>)</mo></mrow><mo>&#x21a6;</mo><mrow><mrow><mi>abs1</mi><mo>(</mo><mi>y</mi><mo>)</mo></mrow><mo>&lt;</mo><mrow><mi>abs1</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: AnonymousFunction
</div>



<p>We use the above function to <span class="italic">sort</span> a list of integers.
</p>



<div id="spadComm6-159" class="spadComm" >
<form id="formComm6-159" action="javascript:makeRequest('6-159');" >
<input id="comm6-159" type="text" class="command" style="width: 21em;" value="sort(%,[3,9,-4,10,-3,-1,-9,5])" />
</form>
<span id="commSav6-159" class="commSav" >sort(%,[3,9,-4,10,-3,-1,-9,5])</span>
<div id="mathAns6-159" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>10</mn><mo>,</mo><mo>-</mo><mn>9</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>5</mn><mo>,</mo><mo>-</mo><mn>4</mn><mo>,</mo><mo>-</mo><mn>3</mn><mo>,</mo><mn>3</mn><mo>,</mo><mo>-</mo><mn>1</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>This function returns <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math> if <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>i</mi><mo>+</mo><mi>j</mi></mrow></mstyle></math> is even, <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>-</mo><mn>1</mn></mrow></mstyle></math> otherwise.
</p>



<div id="spadComm6-160" class="spadComm" >
<form id="formComm6-160" action="javascript:makeRequest('6-160');" >
<input id="comm6-160" type="text" class="command" style="width: 32em;" value="ev := ( (i,j) +-> if even?(i+j) then 1 else -1)" />
</form>
<span id="commSav6-160" class="commSav" >ev := ( (i,j) +-> if even?(i+j) then 1 else -1)</span>
<div id="mathAns6-160" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: AnonymousFunction
</div>



<p>We create a four-by-four matrix containing <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math> or <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>-</mo><mn>1</mn></mrow></mstyle></math> depending on
whether the row plus the column index is even or not.
</p>



<div id="spadComm6-161" class="spadComm" >
<form id="formComm6-161" action="javascript:makeRequest('6-161');" >
<input id="comm6-161" type="text" class="command" style="width: 38em;" value="matrix([ [ev(row,col) for row in 1..4] for col in 1..4])" />
</form>
<span id="commSav6-161" class="commSav" >matrix([ [ev(row,col) for row in 1..4] for col in 1..4])</span>
<div id="mathAns6-161" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mtable><mtr><mtd><mn>1</mn></mtd><mtd><mo>-</mo><mn>1</mn></mtd><mtd><mn>1</mn></mtd><mtd><mo>-</mo><mn>1</mn></mtd></mtr><mtr><mtd><mo>-</mo><mn>1</mn></mtd><mtd><mn>1</mn></mtd><mtd><mo>-</mo><mn>1</mn></mtd><mtd><mn>1</mn></mtd></mtr><mtr><mtd><mn>1</mn></mtd><mtd><mo>-</mo><mn>1</mn></mtd><mtd><mn>1</mn></mtd><mtd><mo>-</mo><mn>1</mn></mtd></mtr><mtr><mtd><mo>-</mo><mn>1</mn></mtd><mtd><mn>1</mn></mtd><mtd><mo>-</mo><mn>1</mn></mtd><mtd><mn>1</mn></mtd></mtr></mtable><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Matrix Integer
</div>



<p>This function returns <span class="teletype">true</span> if a polynomial in <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> has multiple
roots, <span class="teletype">false</span> otherwise.  It is defined and applied in the same
expression.
</p>



<div id="spadComm6-162" class="spadComm" >
<form id="formComm6-162" action="javascript:makeRequest('6-162');" >
<input id="comm6-162" type="text" class="command" style="width: 30em;" value="( p +-> not one?(gcd(p,D(p,x))) )(x^2+4*x+4)" />
</form>
<span id="commSav6-162" class="commSav" >( p +-> not one?(gcd(p,D(p,x))) )(x^2+4*x+4)</span>
<div id="mathAns6-162" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>This and the next expression are equivalent.
</p>



<div id="spadComm6-163" class="spadComm" >
<form id="formComm6-163" action="javascript:makeRequest('6-163');" >
<input id="comm6-163" type="text" class="command" style="width: 24em;" value="g(x,y,z) == cos(x + sin(y + tan(z)))" />
</form>
<span id="commSav6-163" class="commSav" >g(x,y,z) == cos(x + sin(y + tan(z)))</span>
<div id="mathAns6-163" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>The one you use is a matter of taste.
</p>



<div id="spadComm6-164" class="spadComm" >
<form id="formComm6-164" action="javascript:makeRequest('6-164');" >
<input id="comm6-164" type="text" class="command" style="width: 28em;" value="g == (x,y,z) +-> cos(x + sin(y + tan(z)))" />
</form>
<span id="commSav6-164" class="commSav" >g == (x,y,z) +-> cos(x + sin(y + tan(z)))</span>
<div id="mathAns6-164" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;1&nbsp;old&nbsp;definition(s)&nbsp;deleted&nbsp;for&nbsp;function&nbsp;or&nbsp;rule&nbsp;g&nbsp;<br />
</div>




<div class="returnType">
Type: Void
</div>





</div>



<a name="subsec-6.17.2"/>
<div class="subsection"  id="subsec-6.17.2">
<h3 class="subsectitle">6.17.2  Declaring Anonymous Functions</h3>


<a name="ugUserAnonDeclare" class="label"/>


<p>If you declare any of the arguments you must declare all of them. Thus,
</p>



<div class="verbatim"><br />
(x:&nbsp;INT,y):&nbsp;FRAC&nbsp;INT&nbsp;+-&gt;&nbsp;(x&nbsp;+&nbsp;2*y)/(y&nbsp;-&nbsp;1)<br />
</div>


<p>is not legal.
</p>


<p>This is an example of a fully declared anonymous function.
<span class="index">function:declaring</span><a name="chapter-6-57"/> <span class="index">function:anonymous:declaring</span><a name="chapter-6-58"/> The
output shown just indicates that the object you created is a
particular kind of map, that is, function.
</p>



<div id="spadComm6-165" class="spadComm" >
<form id="formComm6-165" action="javascript:makeRequest('6-165');" >
<input id="comm6-165" type="text" class="command" style="width: 32em;" value="(x: INT,y: INT): FRAC INT +-> (x + 2*y)/(y - 1)" />
</form>
<span id="commSav6-165" class="commSav" >(x: INT,y: INT): FRAC INT +-> (x + 2*y)/(y - 1)</span>
<div id="mathAns6-165" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ((Integer,Integer) <span class="teletype">-></span> Fraction Integer)
</div>



<p>FriCAS allows you to declare the arguments and not declare
the return type.
</p>



<div id="spadComm6-166" class="spadComm" >
<form id="formComm6-166" action="javascript:makeRequest('6-166');" >
<input id="comm6-166" type="text" class="command" style="width: 25em;" value="(x: INT,y: INT) +-> (x + 2*y)/(y - 1)" />
</form>
<span id="commSav6-166" class="commSav" >(x: INT,y: INT) +-> (x + 2*y)/(y - 1)</span>
<div id="mathAns6-166" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ((Integer,Integer) <span class="teletype">-></span> Fraction Integer)
</div>



<p>The return type is computed from the types of the arguments and the
body of the function.  You cannot declare the return type if you do
not declare the arguments.  Therefore,
</p>



<div class="verbatim"><br />
(x,y):&nbsp;FRAC&nbsp;INT&nbsp;+-&gt;&nbsp;(x&nbsp;+&nbsp;2*y)/(y&nbsp;-&nbsp;1)<br />
</div>



<p>is not legal. This and the next expression are equivalent.
</p>



<div id="spadComm6-167" class="spadComm" >
<form id="formComm6-167" action="javascript:makeRequest('6-167');" >
<input id="comm6-167" type="text" class="command" style="width: 32em;" value="h(x: INT,y: INT): FRAC INT == (x + 2*y)/(y - 1)" />
</form>
<span id="commSav6-167" class="commSav" >h(x: INT,y: INT): FRAC INT == (x + 2*y)/(y - 1)</span>
<div id="mathAns6-167" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Function&nbsp;declaration&nbsp;h&nbsp;:&nbsp;(Integer,Integer)&nbsp;-&gt;&nbsp;Fraction&nbsp;Integer<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;has&nbsp;been&nbsp;added&nbsp;to&nbsp;workspace.<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>The one you use is a matter of taste.
</p>



<div id="spadComm6-168" class="spadComm" >
<form id="formComm6-168" action="javascript:makeRequest('6-168');" >
<input id="comm6-168" type="text" class="command" style="width: 35em;" value="h == (x: INT,y: INT): FRAC INT +-> (x + 2*y)/(y - 1)" />
</form>
<span id="commSav6-168" class="commSav" >h == (x: INT,y: INT): FRAC INT +-> (x + 2*y)/(y - 1)</span>
<div id="mathAns6-168" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Function&nbsp;declaration&nbsp;h&nbsp;:&nbsp;(Integer,Integer)&nbsp;-&gt;&nbsp;Fraction&nbsp;Integer<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;has&nbsp;been&nbsp;added&nbsp;to&nbsp;workspace.<br />
&nbsp;&nbsp;&nbsp;1&nbsp;old&nbsp;definition(s)&nbsp;deleted&nbsp;for&nbsp;function&nbsp;or&nbsp;rule&nbsp;h&nbsp;<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>When should you declare an anonymous function?  
</p>



<ol>
<li>
 If you use an anonymous function and FriCAS can't figure out what
you are trying to do, declare the function.  
</li>
<li> If the function has nontrivial argument types or a nontrivial 
return type that FriCAS may be able to determine eventually, but you 
are not willing to wait that long, declare the function.  
</li>
<li> If the function will only be used for arguments of specific types 
and it is not too much trouble to declare the function, do so.  
</li>
<li> If you are using the anonymous function as an argument to another 
function (such as <span style="font-weight: bold;"> map</span> or <span style="font-weight: bold;"> sort</span>), consider declaring the function.  
</li>
<li> If you define an anonymous function inside a named function, 
you <span class="italic">must</span> declare the anonymous function.  
</li>
</ol>



<p>This is an example of a named function for integers that returns a
function.
</p>



<div id="spadComm6-169" class="spadComm" >
<form id="formComm6-169" action="javascript:makeRequest('6-169');" >
<input id="comm6-169" type="text" class="command" style="width: 29em;" value="addx x == ((y: Integer): Integer +-> x + y)" />
</form>
<span id="commSav6-169" class="commSav" >addx x == ((y: Integer): Integer +-> x + y)</span>
<div id="mathAns6-169" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>We define <span style="font-weight: bold;"> g</span> to be a function that adds <math xmlns="&mathml;" mathsize="big"><mstyle><mn>10</mn></mstyle></math> to its
argument.
</p>



<div id="spadComm6-170" class="spadComm" >
<form id="formComm6-170" action="javascript:makeRequest('6-170');" >
<input id="comm6-170" type="text" class="command" style="width: 8em;" value="g := addx 10" />
</form>
<span id="commSav6-170" class="commSav" >g := addx 10</span>
<div id="mathAns6-170" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;addx&nbsp;with&nbsp;type&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PositiveInteger&nbsp;-&gt;&nbsp;(Integer&nbsp;-&gt;&nbsp;Integer)&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: (Integer <span class="teletype">-></span> Integer)
</div>



<p>Try it out.
</p>



<div id="spadComm6-171" class="spadComm" >
<form id="formComm6-171" action="javascript:makeRequest('6-171');" >
<input id="comm6-171" type="text" class="command" style="width: 2em;" value="g 3" />
</form>
<span id="commSav6-171" class="commSav" >g 3</span>
<div id="mathAns6-171" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>13</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm6-172" class="spadComm" >
<form id="formComm6-172" action="javascript:makeRequest('6-172');" >
<input id="comm6-172" type="text" class="command" style="width: 4em;" value="g(-4)" />
</form>
<span id="commSav6-172" class="commSav" >g(-4)</span>
<div id="mathAns6-172" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>6</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p><span class="index">function:anonymous:restrictions</span><a name="chapter-6-59"/>
An anonymous function cannot be recursive: since it does not have a
name, you cannot even call it within itself!  If you place an
anonymous function inside a named function, the anonymous function
must be declared.
</p>




</div>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-6.16.xhtml" style="margin-right: 10px;">Previous Section 6.16 Free and Local Variables</a><a href="section-6.18.xhtml" style="margin-right: 10px;">Next Section 6.18 Example: A Database</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>