<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section16.7</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-16.6.xhtml" style="margin-right: 10px;">Previous Section 16.6 )clear</a><a href="section-16.8.xhtml" style="margin-right: 10px;">Next Section 16.8 )display</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-16.7">
<h2 class="sectiontitle">16.7  )compile</h2>


<p><span class="index">ugSysCmdcompile</span><a name="chapter-16-42"/>
</p>


<p><span class="index">compile</span><a name="chapter-16-43"/>
</p>



<p><span style="font-weight: bold;"> User Level Required:</span> compiler
</p>


<p><span style="font-weight: bold;"> Command Syntax:</span>
</p>




<div class="beginlist">
<div class="item">
 <span class="teletype">)compile</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">fileName</span></span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">fileName</span>.as</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">directory/fileName</span>.as</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">fileName</span>.ao</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">directory/fileName</span>.ao</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">fileName</span>.al</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">directory/fileName</span>.al</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">fileName</span>.lsp</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">directory/fileName</span>.lsp</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">fileName</span>.spad</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">directory/fileName</span>.spad</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">fileName</span> )new</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">fileName</span> )old</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">fileName</span> )translate</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">fileName</span> )quiet</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">fileName</span> )noquiet</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">fileName</span> )moreargs</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">fileName</span> )onlyargs</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">fileName</span> )break</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">fileName</span> )nobreak</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">fileName</span> )library</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">fileName</span> )nolibrary</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">fileName</span> )vartrace</span>
</div>
<div class="item"> <span class="teletype">)compile <span class="italic">fileName</span> )constructor</span> <span class="italic">nameOrAbbrev</span>
</div>
</div>



<p><span style="font-weight: bold;"> Command Description:</span>
</p>


<p>You use this command to invoke the new FriCAS library compiler or
the old FriCAS system compiler.
The <span class="teletype">)compile</span> system command is actually a combination of
FriCAS processing and a call to the Aldor compiler.
It is performing double-duty, acting as a front-end to
both the Aldor compiler and the old FriCAS system
compiler.
(The old FriCAS system compiler was written in Lisp and was
an integral part of the FriCAS environment.
The Aldor compiler is written in C and executed by the operating system
when called from within FriCAS.)
</p>


<p>The command compiles files with file extensions <span class="italic">.as, .ao</span>
and <span class="italic">.al</span> with the
Aldor compiler and files with file extension <span class="italic">.spad</span> with the
old FriCAS system compiler.
It also can compile files with file extension <span class="italic">.lsp</span>. These
are assumed to be Lisp files genererated by the Aldor
compiler.
If you omit the file extension, the command looks to see if you
have specified the <span class="teletype">)new</span> or <span class="teletype">)old</span> option.
If you have given one of these options, the corresponding compiler
is used.
Otherwise, the command first looks in the standard system
directories for files with extension <span class="italic">.as, .ao</span> and <span class="italic">.al</span> and then files with extension <span class="italic">.spad</span>.
The first file found has the appropriate compiler invoked on it.
If the command cannot find a matching file, an error message is
displayed and the command terminates.
</p>


<p>The <span class="teletype">)translate</span> option is used to invoke a special version
of the old system compiler that will translate a <span class="italic">.spad</span> file
to a <span class="italic">.as</span> file. That is, the <span class="italic">.spad</span> file will be parsed and
analyzed and a file using the new syntax will be created. By default,
the <span class="italic">.as</span> file is created in the same directory as the
<span class="italic">.spad</span> file. If that directory is not writable, the current
directory is used. If the current directory is not writable, an
error message is given and the command terminates.
Note that <span class="teletype">)translate</span> implies the <span class="teletype">)old</span> option so the
file extension can safely be omitted. If <span class="teletype">)translate</span> is
given, all other options are ignored.
Please be aware that the translation is not necessarily one
hundred percent complete or correct.
You should attempt to compile the output with the Aldor compiler
and make any necessary corrections.
</p>


<p>We now describe the options for the new Aldor compiler.
</p>


<p>The first thing <span class="teletype">)compile</span> does is look for a source code
filename among its arguments.
Thus
</p>



<div class="verbatim"><br />
)compile&nbsp;mycode.as<br />
)compile&nbsp;/u/jones/as/mycode.as<br />
)compile&nbsp;mycode<br />
</div>


<p>all invoke <span class="teletype">)compiler</span> on the file <span class="teletype">/u/jones/as/mycode.as</span> if the current FriCAS working
directory is <span class="teletype">/u/jones/as.</span> (Recall that you can set the
working directory via the <span class="teletype">)cd</span> command. If you don't set it
explicitly, it is the directory from which you started
FriCAS.)
</p>


<p>This is frequently all you need to compile your file.
This simple command:
</p>



<ol>
<li>
 Invokes the Aldor compiler and produces Lisp output.
</li>
<li> Calls the Lisp compiler if the Aldor compilation was
successful.
</li>
<li> Uses the <span class="teletype">)library</span> command to tell FriCAS about
the contents of your compiled file and arrange to have those
contents loaded on demand.
</li>
</ol>



<p>Should you not want the <span class="teletype">)library</span> command automatically
invoked, call <span class="teletype">)compile</span> with the <span class="teletype">)nolibrary</span> option.
For example,
</p>



<div class="verbatim"><br />
)compile&nbsp;mycode.as&nbsp;)nolibrary<br />
</div>



<p>The general description of Aldor command line arguments is in
the Aldor documentation.
The default options used by the <span class="teletype">)compile</span> command can be
viewed and set using the <span class="teletype">)set compiler args</span> FriCAS
system command.
The current defaults are
</p>



<div class="verbatim"><br />
-O&nbsp;-Fasy&nbsp;-Fao&nbsp;-Flsp&nbsp;-laxiom&nbsp;-Mno-AXL_W_WillObsolete&nbsp;-DFriCAS<br />
</div>


<p>These options mean:
</p>



<ul>
<li>
 <span class="teletype">-O</span>: perform all optimizations,
</li>
<li> <span class="teletype">-Fasy</span>: generate a <span class="teletype">.asy</span> file,
</li>
<li> <span class="teletype">-Fao</span>: generate a <span class="teletype">.ao</span> file,
</li>
<li> <span class="teletype">-Flsp</span>: generate a <span class="teletype">.lsp</span> (Lisp)
file,
<span class="index">Lisp:code generation</span><a name="chapter-16-44"/>
</li>
<li> <span class="teletype">-laxiom</span>: use the <span class="teletype">axiom</span> library <span class="teletype">libaxiom.al</span>,
</li>
<li> <span class="teletype">-Mno-AXL_W_WillObsolete</span>: do not display messages
about older generated files becoming obsolete, and
</li>
<li> <span class="teletype">-DFriCAS</span>: define the global assertion <span class="teletype">FriCAS</span> so that the
Aldor libraries for generating stand-alone code
are not accidentally used with FriCAS.
</li>
</ul>



<p>To supplement these default arguments, use the <span class="teletype">)moreargs</span> option on
<span class="teletype">)compile.</span>
For example,
</p>



<div class="verbatim"><br />
)compile&nbsp;mycode.as&nbsp;)moreargs&nbsp;"-v"<br />
</div>


<p>uses the default arguments and appends the <span class="teletype">-v</span> (verbose)
argument flag.
The additional argument specification <span style="font-weight: bold;"> must be enclosed in
double quotes.</span>
</p>


<p>To completely replace these default arguments for a particular
use of <span class="teletype">)compile</span>, use the <span class="teletype">)onlyargs</span> option.
For example,
</p>



<div class="verbatim"><br />
)compile&nbsp;mycode.as&nbsp;)onlyargs&nbsp;"-v&nbsp;-O"<br />
</div>


<p>only uses the <span class="teletype">-v</span> (verbose) and <span class="teletype">-O</span> (optimize)
arguments.
The argument specification <span style="font-weight: bold;"> must be enclosed in double quotes.</span>
In this example, Lisp code is not produced and so the compilation
output will not be available to FriCAS.
</p>


<p>To completely replace the default arguments for all calls to <span class="teletype">)compile</span> within your FriCAS session, use <span class="teletype">)set compiler args.</span>
For example, to use the above arguments for all compilations, issue
</p>



<div class="verbatim"><br />
)set&nbsp;compiler&nbsp;args&nbsp;"-v&nbsp;-O"<br />
</div>


<p>Make sure you include the necessary <span class="teletype">-l</span> and <span class="teletype">-Y</span>
arguments along with those needed for Lisp file creation.
As above, <span style="font-weight: bold;"> the argument specification must be enclosed in double
quotes.</span>
</p>


<p>By default, the <span class="teletype">)library</span> system command <span class="italic">exposes</span> all
domains and categories it processes.
This means that the FriCAS intepreter will consider those
domains and categories when it is trying to resolve a reference
to a function.
Sometimes domains and categories should not be exposed.
For example, a domain may just be used privately by another
domain and may not be meant for top-level use.
The <span class="teletype">)library</span> command should still be used, though, so that
the code will be loaded on demand.
In this case, you should use the <span class="teletype">)nolibrary</span> option on <span class="teletype">)compile</span> and the <span class="teletype">)noexpose</span> option in the <span class="teletype">)library</span>
command. For example,
</p>



<div class="verbatim"><br />
)compile&nbsp;mycode.as&nbsp;)nolibrary<br />
)library&nbsp;mycode&nbsp;)noexpose<br />
</div>



<p>Once you have established your own collection of compiled code,
you may find it handy to use the <span class="teletype">)dir</span> option on the
<span class="teletype">)library</span> command.
This causes <span class="teletype">)library</span> to process all compiled code in the
specified directory. For example,
</p>



<div class="verbatim"><br />
)library&nbsp;)dir&nbsp;/u/jones/as/quantum<br />
</div>


<p>You must give an explicit directory after <span class="teletype">)dir</span>, even if you
want all compiled code in the current working directory
processed, e.g.
</p>



<div class="verbatim"><br />
)library&nbsp;)dir&nbsp;.<br />
</div>



<p>The <span class="teletype">)compile</span> command works with several file extensions. We saw
above what happens when it is invoked on a file with extension <span class="teletype">.as.</span> A <span class="teletype">.ao</span> file is a portable binary compiled version of a
<span class="teletype">.as</span> file, and <span class="teletype">)compile</span> simply passes the <span class="teletype">.ao</span> file
onto Aldor. The generated Lisp file is compiled and <span class="teletype">)library</span>
is automatically called, just as if you had specified a <span class="teletype">.as</span> file.
</p>


<p>A <span class="teletype">.al</span> file is an archive file containing <span class="teletype">.ao</span> files. The
archive is created (on Unix systems) with the <span class="teletype">ar</span> program. When
<span class="teletype">)compile</span> is given a <span class="teletype">.al</span> file, it creates a directory whose
name is based on that of the archive. For example, if you issue
</p>



<div class="verbatim"><br />
)compile&nbsp;mylib.al<br />
</div>


<p>the directory <span class="teletype">mylib.axldir</span> is created. All
members of the archive are unarchived into the
directory and <span class="teletype">)compile</span> is called on each <span class="teletype">.ao</span> file found. It
is your responsibility to remove the directory and its contents, if you
choose to do so.
</p>


<p>A <span class="teletype">.lsp</span> file is a Lisp source file, presumably, in our context,
generated by Aldor when called with the <span class="teletype">-Flsp</span> option. When
<span class="teletype">)compile</span> is used with a <span class="teletype">.lsp</span> file, the Lisp file is
compiled and <span class="teletype">)library</span> is called. You must also have present a
<span class="teletype">.asy</span> generated from the same source file.
</p>


<p>The following are descriptions of options for the old system compiler.
</p>


<p>You can compile category, domain, and package constructors
contained in files with file extension <span class="italic">.spad</span>.
You can compile individual constructors or every constructor
in a file.
</p>


<p>The full filename is remembered between invocations of this command and
<span class="teletype">)edit</span> commands.
The sequence of commands
</p>



<div class="verbatim"><br />
)compile&nbsp;matrix.spad<br />
)edit<br />
)compile<br />
</div>


<p>will call the compiler, edit, and then call the compiler again
on the file <span style="font-weight: bold;"> matrix.spad.</span>
If you do not specify a <span class="italic">directory,</span> the working current
directory (see 
<a href="ugSysCmdcd" class="ref" >ugSysCmdcd</a> )
is searched for the file.
If the file is not found, the standard system directories are searched.
</p>


<p>If you do not give any options, all constructors within a file are
compiled.
Each constructor should have an <span class="teletype">)abbreviation</span> command in
the file in which it is defined.
We suggest that you place the <span class="teletype">)abbreviation</span> commands at the
top of the file in the order in which the constructors are
defined.
The list of commands serves as a table of contents for the file.
<span class="index">abbreviation</span><a name="chapter-16-45"/>
</p>


<p>The <span class="teletype">)library</span> option causes directories containing the
compiled code for each constructor
to be created in the working current directory.
The name of such a directory consists of the constructor
abbreviation and the <span style="font-weight: bold;"> .NRLIB</span> file extension.
For example, the directory containing the compiled code for
the <span class="teletype">MATRIX</span> constructor is called <span style="font-weight: bold;"> MATRIX.NRLIB.</span>
The <span class="teletype">)nolibrary</span> option says that such files should not
be created.
The default is <span class="teletype">)library.</span>
Note that the semantics of <span class="teletype">)library</span> and <span class="teletype">)nolibrary</span>
for the new Aldor compiler and for the old system compiler are
completely different.
</p>


<p>The <span class="teletype">)vartrace</span> option causes the compiler to generate
extra code for the constructor to support conditional tracing of
variable assignments. (see 
<a href="ugSysCmdtrace" class="ref" >ugSysCmdtrace</a> ). Without
this option, this code is suppressed and one cannot use
the <span class="teletype">)vars</span> option for the trace command.
</p>


<p>The <span class="teletype">)constructor</span> option is used to
specify a particular constructor to compile.
All other constructors in the file are ignored.
The constructor name or abbreviation follows <span class="teletype">)constructor.</span>
Thus either
</p>



<div class="verbatim"><br />
)compile&nbsp;matrix.spad&nbsp;)constructor&nbsp;RectangularMatrix<br />
</div>


<p>or
</p>



<div class="verbatim"><br />
)compile&nbsp;matrix.spad&nbsp;)constructor&nbsp;RMATRIX<br />
</div>


<p>compiles  the <span class="teletype">RectangularMatrix</span> constructor
defined in <span style="font-weight: bold;"> matrix.spad.</span>
</p>


<p>The <span class="teletype">)break</span> and <span class="teletype">)nobreak</span> options determine what
the old system compiler does when it encounters an error.
<span class="teletype">)break</span> is the default and it indicates that processing
should stop at the first error.
The value of the <span class="teletype">)set break</span> variable then controls what happens.
</p>


<p><!--
 BEGIN OBSOLTE
 It is important for you to realize that it does not suffice to compile a
 constructor to use the new code in the interpreter.
 After compilation, the <span class="teletype">)load</span> command with the
 <span class="teletype">)update</span> option should be used to bring in the new code
 and update internal system tables with information about the
 constructor.
 END OBSOLTE
-->
</p>


<p><span style="font-weight: bold;"> Also See:</span>
<span class="teletype">)abbreviation</span> <span class="index">ugSysCmdabbreviation</span><a name="chapter-16-46"/>,
<span class="teletype">)edit</span> <span class="index">ugSysCmdedit</span><a name="chapter-16-47"/>, and
<span class="teletype">)library</span> <span class="index">ugSysCmdlibrary</span><a name="chapter-16-48"/>.
</p>





</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-16.6.xhtml" style="margin-right: 10px;">Previous Section 16.6 )clear</a><a href="section-16.8.xhtml" style="margin-right: 10px;">Next Section 16.8 )display</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>