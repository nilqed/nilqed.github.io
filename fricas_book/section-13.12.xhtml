<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section13.12</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-13.11.xhtml" style="margin-right: 10px;">Previous Section 13.11 Short Forms</a><a href="section-13.13.xhtml" style="margin-right: 10px;">Next Section 13.13 Example 2: Building A Query Facility</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-13.12">
<h2 class="sectiontitle">13.12  Example 1: Clifford Algebra</h2>


<a name="ugDomainsClifford" class="label"/>



<p>Now that we have <span class="teletype"> QuadraticForm</span> available,
let's put it to use.
Given some quadratic form <math xmlns="&mathml;" mathsize="big"><mstyle><mi>Q</mi></mstyle></math> described by an
<math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> by <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> matrix over a field <math xmlns="&mathml;" mathsize="big"><mstyle><mi>K</mi></mstyle></math>, the domain
<span class="teletype"> CliffordAlgebra(n, K, Q)</span> defines a vector space of
dimension <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow></mstyle></math> over <math xmlns="&mathml;" mathsize="big"><mstyle><mi>K</mi></mstyle></math>.
This is an interesting domain since complex numbers, quaternions,
exterior algebras and spin algebras are all examples of Clifford
algebras.
</p>


<p>The basic idea is this:
the quadratic form <math xmlns="&mathml;" mathsize="big"><mstyle><mi>Q</mi></mstyle></math> defines a basis
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>e</mi><mn>1</mn></msub><mo>,</mo><msub><mi>e</mi><mn>2</mn></msub><mo>&#x2026;</mo><mo>,</mo><msub><mi>e</mi><mi>n</mi></msub></mrow></mstyle></math> for the
vector space <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mi>K</mi><mi>n</mi></msup></mrow></mstyle></math>, the direct product of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>K</mi></mstyle></math>
with itself <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> times.
From this, the Clifford algebra generates a basis of
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow></mstyle></math> elements given by all the possible products
of the <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>e</mi><mi>i</mi></msub></mrow></mstyle></math> in order without duplicates, that is,
</p>


<p>1,
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>e</mi><mn>1</mn></msub></mrow></mstyle></math>,
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>e</mi><mn>2</mn></msub></mrow></mstyle></math>,
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>e</mi><mn>1</mn></msub><msub><mi>e</mi><mn>2</mn></msub></mrow></mstyle></math>,
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>e</mi><mn>3</mn></msub></mrow></mstyle></math>,
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>e</mi><mn>1</mn></msub><msub><mi>e</mi><mn>3</mn></msub></mrow></mstyle></math>,
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>e</mi><mn>2</mn></msub><msub><mi>e</mi><mn>3</mn></msub></mrow></mstyle></math>,
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>e</mi><mn>1</mn></msub><msub><mi>e</mi><mn>2</mn></msub><msub><mi>e</mi><mn>3</mn></msub></mrow></mstyle></math>,
and so on.
</p>


<p>The algebra is defined by the relations
</p>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtable><mtr><mtd><msub><mi>e</mi><mi>i</mi></msub><mo></mo><msub><mi>e</mi><mi>i</mi></msub></mtd><mtd><mo>=</mo></mtd><mtd><mi>Q</mi><mo>(</mo><msub><mi>e</mi><mi>i</mi></msub><mo>)</mo></mtd></mtr><mtr><mtd><msub><mi>e</mi><mi>i</mi></msub><mo></mo><msub><mi>e</mi><mi>j</mi></msub></mtd><mtd><mo>=</mo></mtd><mtd><mo>-</mo><msub><mi>e</mi><mi>j</mi></msub><mo></mo><msub><mi>e</mi><mi>i</mi></msub></mtd><mtd><mtext><mi>for</mi></mtext><mi>i</mi><mo>&#x02260;</mo><mi>j</mi></mtd></mtr></mtable></mrow></mstyle></math>
</td></tr>
</table>
</div>

<p>Now look at the snapshot of its definition given below.
Lines 9-10 show part of the definitions of the
<span class="teletype"> Exports</span>.  A Clifford algebra over a field <math xmlns="&mathml;" mathsize="big"><mstyle><mi>K</mi></mstyle></math> is asserted to be
a ring, an algebra over <math xmlns="&mathml;" mathsize="big"><mstyle><mi>K</mi></mstyle></math>, and a vector space over <math xmlns="&mathml;" mathsize="big"><mstyle><mi>K</mi></mstyle></math>.  Its
explicit exports include <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>e</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>,</mo></mrow></mstyle></math> which returns the <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>-th unit
element.
</p>


<a name="figclifalg" class="label"/>




<div class="verbatim"><br />
NNI&nbsp;==&gt;&nbsp;NonNegativeInteger<br />
PI&nbsp;&nbsp;==&gt;&nbsp;PositiveInteger<br />
<br />
CliffordAlgebra(n,K,q):&nbsp;Exports&nbsp;==&nbsp;Implementation&nbsp;where<br />
&nbsp;&nbsp;&nbsp;&nbsp;n:&nbsp;PI<br />
&nbsp;&nbsp;&nbsp;&nbsp;K:&nbsp;Field<br />
&nbsp;&nbsp;&nbsp;&nbsp;q:&nbsp;QuadraticForm(n,&nbsp;K)<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;Exports&nbsp;==&nbsp;Join(Ring,Algebra(K),VectorSpace(K))&nbsp;with<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e:&nbsp;PI&nbsp;-&gt;&nbsp;$<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;Implementation&nbsp;==&nbsp;add<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Qeelist&nbsp;:=&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[q.unitVector(i::PI)&nbsp;for&nbsp;i&nbsp;in&nbsp;1..n]<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dim&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;&nbsp;2^n<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rep&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;PrimitiveArray&nbsp;K<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;New&nbsp;==&gt;&nbsp;new(dim,&nbsp;0$K)$Rep<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;+&nbsp;y&nbsp;==<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;:=&nbsp;New<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;0..dim-1&nbsp;repeat&nbsp;z.i&nbsp;:=&nbsp;x.i&nbsp;+&nbsp;y.i<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addMonomProd:&nbsp;(K,&nbsp;NNI,&nbsp;K,&nbsp;NNI,&nbsp;$)&nbsp;-&gt;&nbsp;$<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addMonomProd(c1,&nbsp;b1,&nbsp;c2,&nbsp;b2,&nbsp;z)&nbsp;==&nbsp;&nbsp;...<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;*&nbsp;y&nbsp;==<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;:=&nbsp;New<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;ix&nbsp;in&nbsp;0..dim-1&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;x.ix&nbsp;\notequal{}&nbsp;0&nbsp;then&nbsp;for&nbsp;iy&nbsp;in&nbsp;0..dim-1&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;y.iy&nbsp;\notequal{}&nbsp;0<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;then&nbsp;addMonomProd(x.ix,ix,y.iy,iy,z)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br />
</div>


<p><div class="caption">Part of the <span class="teletype"> CliffordAlgebra</span> domain.</div>
</p>



<p>The <span class="teletype"> Implementation</span> part begins by defining a local variable
<math xmlns="&mathml;" mathsize="big"><mstyle><mi>Qeelist</mi></mstyle></math> to hold the list of all <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>q</mi><mo>.</mo><mi>v</mi></mrow></mstyle></math> where <math xmlns="&mathml;" mathsize="big"><mstyle><mi>v</mi></mstyle></math>
runs over the unit vectors from 1 to the dimension <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>.
Another local variable <math xmlns="&mathml;" mathsize="big"><mstyle><mi>dim</mi></mstyle></math> is set to <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow></mstyle></math>,
computed once and for all.
The representation for the domain is
<span class="teletype"> PrimitiveArray(K)</span>,
which is a basic array of elements from domain <math xmlns="&mathml;" mathsize="big"><mstyle><mi>K</mi></mstyle></math>.
Line 18 defines <math xmlns="&mathml;" mathsize="big"><mstyle><mi>New</mi></mstyle></math> as shorthand for the more lengthy
expression <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>new</mi><mo>(</mo><mi>dim</mi><mo>,</mo><mn>0</mn><mi>$</mi><mi>K</mi><mo>)</mo><mi>$</mi><mi>Rep</mi></mrow></mstyle></math>, which computes a primitive
array of length <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow></mstyle></math> filled with <math xmlns="&mathml;" mathsize="big"><mstyle><mn>0</mn></mstyle></math>'s from
domain <math xmlns="&mathml;" mathsize="big"><mstyle><mi>K</mi></mstyle></math>.
</p>


<p>Lines 19-22 define the sum of two elements <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> and <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math>
straightforwardly.
First, a new array of all <math xmlns="&mathml;" mathsize="big"><mstyle><mn>0</mn></mstyle></math>'s is created, then filled with
the sum of the corresponding elements.
Indexing for primitive arrays starts at 0.
The definition of the product of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> and <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math> first requires
the definition of a local function <span style="font-weight: bold;"> addMonomProd</span>.
FriCAS knows it is local since it is not an exported function.
The types of all local functions must be declared.
</p>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-13.11.xhtml" style="margin-right: 10px;">Previous Section 13.11 Short Forms</a><a href="section-13.13.xhtml" style="margin-right: 10px;">Next Section 13.13 Example 2: Building A Query Facility</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>