<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section10.9</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-10.8.xhtml" style="margin-right: 10px;">Previous Section 10.8 Drawing Complex Functions</a><a href="section-10.10.xhtml" style="margin-right: 10px;">Next Section 10.10 Automatic Newton Iteration Formulas</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-10.9">
<h2 class="sectiontitle">10.9  Functions Producing Functions</h2>


<a name="ugIntProgFunctions" class="label"/>


<p>In <a href="section-6.14.xhtml#ugUserMake" class="ref" >ugUserMake</a> , 
you learned how to use the operation
<span style="font-weight: bold;"> function</span> to create a function from symbolic formulas.
Here we introduce a similar operation which not only
creates functions, but functions from functions.
</p>


<p>The facility we need is provided by the package
<span class="teletype">MakeUnaryCompiledFunction(E,S,T)</span>.
<span class="index">MakeUnaryCompiledFunction</span><a name="chapter-10-7"/>
This package produces a unary (one-argument) compiled
function from some symbolic data
generated by a previous computation.<span class="footnote">
<span class="teletype">MakeBinaryCompiledFunction</span> is available for binary
functions.</span>
<span class="index">MakeBinaryCompiledFunction</span><a name="chapter-10-8"/>
The  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>E</mi></mstyle></math> tells where the symbolic data comes from;
the  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>S</mi></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>T</mi></mstyle></math> give FriCAS the
source and target type of the function, respectively.
The compiled function produced  has type
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>S</mi></mstyle></math>-> <math xmlns="&mathml;" mathsize="big"><mstyle><mi>T</mi></mstyle></math>.
To produce a compiled function with definition  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>p</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mo>=</mo><mi>expr</mi></mrow></mstyle></math>, call
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>compiledFunction</mi><mo>(</mo><mi>expr</mi><mo>,</mo><mi>x</mi><mo>)</mo></mrow></mstyle></math> from this package.
The function you get has no name.
You must to assign the function to the variable  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>p</mi></mstyle></math> to give it that name.
</p>



<p>Do some computation.
</p>




<div id="spadComm10-20" class="spadComm" >
<form id="formComm10-20" action="javascript:makeRequest('10-20');" >
<input id="comm10-20" type="text" class="command" style="width: 7em;" value="(x+1/3)^5" />
</form>
<span id="commSav10-20" class="commSav" >(x+1/3)^5</span>
<div id="mathAns10-20" ></div>
</div>



<p>Convert this to an anonymous function of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math>.
Assign it to the variable  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>p</mi></mstyle></math> to give the function a name.
</p>




<div id="spadComm10-21" class="spadComm" >
<form id="formComm10-21" action="javascript:makeRequest('10-21');" >
<input id="comm10-21" type="text" class="command" style="width: 55em;" value="p := compiledFunction(%,x)$MakeUnaryCompiledFunction(POLY FRAC INT,DFLOAT,DFLOAT)" />
</form>
<span id="commSav10-21" class="commSav" >p := compiledFunction(%,x)$MakeUnaryCompiledFunction(POLY FRAC INT,DFLOAT,DFLOAT)</span>
<div id="mathAns10-21" ></div>
</div>



<p>Apply the function.
</p>




<div id="spadComm10-22" class="spadComm" >
<form id="formComm10-22" action="javascript:makeRequest('10-22');" >
<input id="comm10-22" type="text" class="command" style="width: 8em;" value="p(sin(1.3))" />
</form>
<span id="commSav10-22" class="commSav" >p(sin(1.3))</span>
<div id="mathAns10-22" ></div>
</div>



<p>For a more sophisticated application, read on.
</p>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-10.8.xhtml" style="margin-right: 10px;">Previous Section 10.8 Drawing Complex Functions</a><a href="section-10.10.xhtml" style="margin-right: 10px;">Next Section 10.10 Automatic Newton Iteration Formulas</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>