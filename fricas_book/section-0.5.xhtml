<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section0.5</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-0.4.xhtml" style="margin-right: 10px;">Previous Section 0.4 Using FriCAS as a Symbolic Calculator</a><a href="section-0.6.xhtml" style="margin-right: 10px;">Next Section 0.6 Data Structures in FriCAS</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-0.5">
<h2 class="sectiontitle">0.5  General Points about FriCAS</h2>



<a name="subsec-0.5.1"/>
<div class="subsection"  id="subsec-0.5.1">
<h3 class="subsectitle">0.5.1  Computation Without Output</h3>


<p>It is sometimes desirable to enter an expression and prevent FriCAS from
displaying the result. To do this the expression should be terminated with
a semicolon <span class="italic">;</span>. In a previous section it was mentioned that a set of 
expressions separated by semicolons would be evaluated and the result
of the last one displayed. Thus if a single expression is followed by a
semicolon no output will be produced (except for its type):
</p>




<div id="spadComm0-89" class="spadComm" >
<form id="formComm0-89" action="javascript:makeRequest('0-89');" >
<input id="comm0-89" type="text" class="command" style="width: 6em;" value="2 + 4*5;" />
</form>
<span id="commSav0-89" class="commSav" >2 + 4*5;</span>
<div id="mathAns0-89" ></div>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





</div>



<a name="subsec-0.5.2"/>
<div class="subsection"  id="subsec-0.5.2">
<h3 class="subsectitle">0.5.2  Accessing Earlier Results</h3>


<p>The ``%'' macro represents the result of the previous computation. The 
``%%'' macro is available which takes a single integer argument. If the
argument is positive then it refers to the step number of the calculation
where the numbering begins from one and can be seen at the end of each
prompt (the number in parentheses). If the argument is negative then it
refers to previous results counting backwards from the last result. That is,
``%%(-1)'' is the same as ``%''. The value of ``%%(0)'' is not defined and
will generate an error if requested.
</p>




</div>



<a name="subsec-0.5.3"/>
<div class="subsection"  id="subsec-0.5.3">
<h3 class="subsectitle">0.5.3  Splitting Expressions Over Several Lines</h3>


<p>Although FriCAS will quite happily accept expressions that are longer than
the width of the screen (just keep typing without pressing the <span style="font-weight: bold;"> Return</span>
key) it is often preferable to split the expression being entered at a point
where it would result in more readable input. To do this the underscore
<span class="italic">_</span> symbol is placed before the break point and then the <span style="font-weight: bold;"> Return</span>
key is pressed. The rest of the expression is typed on the next line,
can be preceeded by any number of whitespace chars, for example:
</p>



<div class="verbatim"><br />
2_<br />
+_<br />
3<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>5</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>The underscore symbol is an escape character and its presence alters the
meaning of the characters that follow it. As mentions above whitespace
following an underscore is ignored (the <span style="font-weight: bold;"> Return</span> key generates a
whitespace character). Any other character following an underscore loses
whatever special meaning it may have had. Thus one can create the
identifier ``a+b'' by typing ``a_+b'' although this might lead to confusions.
Also note the result of the following example:
</p>




<div id="spadComm0-90" class="spadComm" >
<form id="formComm0-90" action="javascript:makeRequest('0-90');" >
<input id="comm0-90" type="text" class="command" style="width: 20em;" value="ThisIsAVeryLong_
VariableName" />
</form>
<span id="commSav0-90" class="commSav" >ThisIsAVeryLong_
VariableName</span>
<div id="mathAns0-90" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>ThisIsAVeryLongVariableName</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Variable ThisIsAVeryLongVariableName
</div>





</div>



<a name="subsec-0.5.4"/>
<div class="subsection"  id="subsec-0.5.4">
<h3 class="subsectitle">0.5.4  Comments and Descriptions</h3>


<p>Comments and descriptions are really only of use in files of FriCAS code but
can be used when the output of an interactive session is being spooled to
a file (via the system command <span style="font-weight: bold;"> )spool</span>). A comment begins with two
dashes <span class="italic">- -</span> and continues until the end of the line. Multi-line
comments are only possible if each individual line begins with two dashes.
</p>


<p>Descriptions are the same as comments except that the FriCAS compiler will 
include them in the object files produced and make them availabe to the
end user for documentation purposes.
</p>


<p>A description is placed <span style="font-weight: bold;"> before</span> a calculation begins with three
``+++'' signs and a description placed after a calculation begins with
two plus symbols ``+''. The so-called <span class="italic">plus plus</span> comments are used
within the algebra files and are processed by the compiler to add
to the documentation. The so-called <span class="italic">minus minus</span> comments are ignored
everywhere.
</p>




</div>



<a name="subsec-0.5.5"/>
<div class="subsection"  id="subsec-0.5.5">
<h3 class="subsectitle">0.5.5  Control of Result Types</h3>


<p>In earlier sections the type of an expression was converted to another
via the ``::'' operator. However, this is not the only method for
converting between types and two other operators need to be introduced
and explained. 
</p>


<p>The first operator is ``$'' and is used to specify the package to be
used to calculate the result. Thus:
</p>




<div id="spadComm0-91" class="spadComm" >
<form id="formComm0-91" action="javascript:makeRequest('0-91');" >
<input id="comm0-91" type="text" class="command" style="width: 8em;" value="(2/3)$Float" />
</form>
<span id="commSav0-91" class="commSav" >(2/3)$Float</span>
<div id="mathAns0-91" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>0</mn><mo>.</mo><mn>6666666666</mn><mspace width="0.5 em" /><mn>6666666667</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>



<p>tells FriCAS to use the <span class="italic">/</span> operator from the <span class="teletype">Float</span> package to
evaluate the expression  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>2</mn><mo>/</mo><mn>3</mn></mrow></mstyle></math>. This does not necessarily mean that the
result will be of the same type as the domain from which the operator
was taken. In the following example the <span style="font-weight: bold;"> sign</span> operator is taken
from the <span class="teletype">Float</span> package but the result is of type <span class="teletype">Integer</span>.
</p>




<div id="spadComm0-92" class="spadComm" >
<form id="formComm0-92" action="javascript:makeRequest('0-92');" >
<input id="comm0-92" type="text" class="command" style="width: 10em;" value="sign(2.3)$Float" />
</form>
<span id="commSav0-92" class="commSav" >sign(2.3)$Float</span>
<div id="mathAns0-92" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Integer
</div>



<p>The other operator is ``@'' which is used to tell FriCAS what the desired
type of the result of the calculation is. In most situations all three
operators yield the same results but the example below should help 
distinguish them.
</p>




<div id="spadComm0-93" class="spadComm" >
<form id="formComm0-93" action="javascript:makeRequest('0-93');" >
<input id="comm0-93" type="text" class="command" style="width: 10em;" value="(2 + 3)::String" />
</form>
<span id="commSav0-93" class="commSav" >(2 + 3)::String</span>
<div id="mathAns0-93" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"5"</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: String
</div>





<div id="spadComm0-94" class="spadComm" >
<form id="formComm0-94" action="javascript:makeRequest('0-94');" >
<input id="comm0-94" type="text" class="command" style="width: 10em;" value="(2 + 3)@String" />
</form>
<span id="commSav0-94" class="commSav" >(2 + 3)@String</span>
<div id="mathAns0-94" ></div>
</div>




<div class="verbatim"><br />
An&nbsp;expression&nbsp;involving&nbsp;@&nbsp;String&nbsp;actually&nbsp;evaluated&nbsp;to&nbsp;one&nbsp;of&nbsp;<br />
&nbsp;&nbsp;&nbsp;type&nbsp;PositiveInteger&nbsp;.&nbsp;Perhaps&nbsp;you&nbsp;should&nbsp;use&nbsp;::&nbsp;String&nbsp;.<br />
</div>





<div id="spadComm0-95" class="spadComm" >
<form id="formComm0-95" action="javascript:makeRequest('0-95');" >
<input id="comm0-95" type="text" class="command" style="width: 10em;" value="(2 + 3)$String" />
</form>
<span id="commSav0-95" class="commSav" >(2 + 3)$String</span>
<div id="mathAns0-95" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;The&nbsp;function&nbsp;+&nbsp;is&nbsp;not&nbsp;implemented&nbsp;in&nbsp;String&nbsp;.<br />
</div>



<p>If an expression <span class="slant">X</span> is converted using one of the three operators to 
type <span class="slant">T</span> the interpretations are:
</p>


<p><span style="font-weight: bold;"> ::</span> means explicitly convert <span class="slant">X</span> to type <span class="slant">T</span> if possible.
</p>


<p><span style="font-weight: bold;"> $</span> means use the available operators for type <span class="slant">T</span> to compute <span class="slant">X</span>.
</p>


<p><span style="font-weight: bold;"> @</span> means choose operators to compute <span class="slant">X</span> so that the result is of
type <span class="slant">T</span>.
</p>




</div>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-0.4.xhtml" style="margin-right: 10px;">Previous Section 0.4 Using FriCAS as a Symbolic Calculator</a><a href="section-0.6.xhtml" style="margin-right: 10px;">Next Section 0.6 Data Structures in FriCAS</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>