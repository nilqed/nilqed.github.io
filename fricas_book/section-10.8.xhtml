<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section10.8</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-10.7.xhtml" style="margin-right: 10px;">Previous Section 10.7 Drawing Complex Vector Fields</a><a href="section-10.9.xhtml" style="margin-right: 10px;">Next Section 10.9 Functions Producing Functions</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-10.8">
<h2 class="sectiontitle">10.8  Drawing Complex Functions</h2>


<a name="ugIntProgCompFuns" class="label"/>


<p>Here is another way to graph a complex function of complex
arguments.
For each complex value  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>z</mi></mstyle></math>, compute  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>f</mi><mo>(</mo><mi>z</mi><mo>)</mo></mrow></mstyle></math>, again
expressing the value in polar coordinates  <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math>.
We draw the complex valued function, again considering the
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo>)</mo></mrow></mstyle></math>-plane as the complex plane, using  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>r</mi></mstyle></math> as the
height (or  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>z</mi></mstyle></math>-coordinate) and  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03B8;</mi></mstyle></math> as the color.
This is a standard plot---we learned how to do this in
Chapter <a href="section-7.0.xhtml#ugGraph" class="ref" >ugGraph</a> ---
but here we write a new program to illustrate
the creation of polygon meshes, or grids.
</p>


<p>Call this function <span style="font-weight: bold;"> drawComplex</span>.
It displays the points using the <span class="italic">mesh</span> of points.
The function definition is in three parts.
</p>




<div class="verbatim"><br />
drawComplex:&nbsp;(C&nbsp;-&gt;&nbsp;C,&nbsp;S,&nbsp;S)&nbsp;-&gt;&nbsp;VIEW3D<br />
drawComplex(f,&nbsp;realRange,&nbsp;imagRange)&nbsp;==&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;first&nbsp;part<br />
&nbsp;&nbsp;delReal&nbsp;:=&nbsp;(hi(realRange)-lo(realRange))/realSteps&nbsp;&nbsp;&nbsp;The&nbsp;real&nbsp;step&nbsp;size<br />
&nbsp;&nbsp;delImag&nbsp;:=&nbsp;(hi(imagRange)-lo(imagRange))/imagSteps&nbsp;&nbsp;&nbsp;The&nbsp;imaginary&nbsp;step&nbsp;size<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initial&nbsp;list&nbsp;of&nbsp;list&nbsp;of&nbsp;points&nbsp;$llp$<br />
&nbsp;&nbsp;llp:List&nbsp;List&nbsp;Point&nbsp;DFLOAT&nbsp;:=&nbsp;[]<br />
</div>



<p>Variables  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>delReal</mi></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>delImag</mi></mstyle></math> give the step
sizes along the real and imaginary directions as computed by the values
of the global variables  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>realSteps</mi></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>imagSteps</mi></mstyle></math>.
The mesh is represented by a list of lists of points  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>llp</mi></mstyle></math>,
initially empty.
Now  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>[</mo><mspace width="0.5 em" /><mo>]</mo></mrow></mstyle></math> alone is ambiguous, so
to set this initial value
you have to tell FriCAS what type of empty list it is.
Next comes the loop which builds  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>llp</mi></mstyle></math>.
</p>




<div class="verbatim"><br />
&nbsp;&nbsp;real&nbsp;:=&nbsp;lo(realRange)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;initial&nbsp;real&nbsp;value<br />
&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;1..realSteps+1&nbsp;repeat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Begin&nbsp;real&nbsp;iteration<br />
&nbsp;&nbsp;&nbsp;&nbsp;imag&nbsp;:=&nbsp;lo(imagRange)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initial&nbsp;imaginary&nbsp;value<br />
&nbsp;&nbsp;&nbsp;&nbsp;lp&nbsp;:=&nbsp;[]$(List&nbsp;Point&nbsp;DFLOAT)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initial&nbsp;list&nbsp;of&nbsp;points&nbsp;$lp$<br />
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;j&nbsp;in&nbsp;1..imagSteps+1&nbsp;repeat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Begin&nbsp;imaginary&nbsp;iteration<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;:=&nbsp;f&nbsp;complex(real,imag)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value&nbsp;of&nbsp;$f$&nbsp;at&nbsp;the&nbsp;point<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pt&nbsp;:=&nbsp;point&nbsp;[real,imag,&nbsp;clipFun&nbsp;sqrt&nbsp;norm&nbsp;z,&nbsp;Create&nbsp;a&nbsp;point<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;argument&nbsp;z]<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp&nbsp;:=&nbsp;cons(pt,lp)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add&nbsp;the&nbsp;point&nbsp;to&nbsp;$lp$<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imag&nbsp;:=&nbsp;imag&nbsp;+&nbsp;delImag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;next&nbsp;imaginary&nbsp;value<br />
&nbsp;&nbsp;&nbsp;&nbsp;real&nbsp;:=&nbsp;real&nbsp;+&nbsp;delReal&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;next&nbsp;real&nbsp;value<br />
&nbsp;&nbsp;&nbsp;&nbsp;llp&nbsp;:=&nbsp;cons(lp,&nbsp;llp)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add&nbsp;$lp$&nbsp;to&nbsp;$llp$<br />
</div>



<p>The code consists of both an inner and outer loop.
Each pass through the inner loop adds one list  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>lp</mi></mstyle></math> of points
to the list of lists of points  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>llp</mi></mstyle></math>.
The elements of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>lp</mi></mstyle></math> are collected in reverse order.
</p>




<div class="verbatim"><br />
&nbsp;&nbsp;makeViewport3D(mesh(llp),&nbsp;"Complex&nbsp;Function")&nbsp;&nbsp;&nbsp;&nbsp;Create&nbsp;a&nbsp;mesh&nbsp;and&nbsp;display<br />
</div>



<p>The operation <span style="font-weight: bold;"> mesh</span> then creates an object of type
<span class="teletype">ThreeSpace(DoubleFloat)</span> from the list of lists of points.
This is then passed to <span style="font-weight: bold;"> makeViewport3D</span> to display the
image.
</p>


<p>Now add this function directly to your <span style="font-weight: bold;"> vectors.input</span>
file and re-read the file using read vectors.
We try <span style="font-weight: bold;"> drawComplex</span> using
a user-defined function  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math>.
</p>


<p>Read the file.
</p>




<div id="spadComm10-18" class="spadComm" >
<form id="formComm10-18" action="javascript:makeRequest('10-18');" >
<input id="comm10-18" type="text" class="command" style="width: 10em;" value=")read vectors " />
</form>
<span id="commSav10-18" class="commSav" >)read vectors </span>
<div id="mathAns10-18" ></div>
</div>



<p>This one has a pole at  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>z</mi><mo>=</mo><mn>0</mn></mrow></mstyle></math>.
</p>




<div id="spadComm10-19" class="spadComm" >
<form id="formComm10-19" action="javascript:makeRequest('10-19');" >
<input id="comm10-19" type="text" class="command" style="width: 11em;" value="f(z) == exp(1/z)" />
</form>
<span id="commSav10-19" class="commSav" >f(z) == exp(1/z)</span>
<div id="mathAns10-19" ></div>
</div>



<p>Draw it with an odd number of steps to avoid the pole.
</p>




<div class="spadgraph" style="width: 13em">
drawComplex(f,-2..2,-2..2)
</div>



<div class="image">
<img src="ps/complexExp.png" alt="picture" />
</div>



</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-10.7.xhtml" style="margin-right: 10px;">Previous Section 10.7 Drawing Complex Vector Fields</a><a href="section-10.9.xhtml" style="margin-right: 10px;">Next Section 10.9 Functions Producing Functions</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>