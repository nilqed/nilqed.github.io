<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section6.15</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-6.14.xhtml" style="margin-right: 10px;">Previous Section 6.14 Making Functions from Objects</a><a href="section-6.16.xhtml" style="margin-right: 10px;">Next Section 6.16 Free and Local Variables</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-6.15">
<h2 class="sectiontitle">6.15  Functions Defined with Blocks</h2>


<a name="ugUserBlocks" class="label"/>


<p>You need not restrict yourself to functions that only fit on one line
or are written in a piece-wise manner.  The body of the function can
be a block, as discussed in <a href="section-5.2.xhtml#ugLangBlocks" class="ref" >ugLangBlocks</a> .
</p>


<p>Here is a short function that swaps two elements of a list, array or vector.
</p>



<div class="verbatim"><br />
swap(m,i,j)&nbsp;==<br />
&nbsp;&nbsp;temp&nbsp;:=&nbsp;m.i<br />
&nbsp;&nbsp;m.i&nbsp;:=&nbsp;m.j<br />
&nbsp;&nbsp;m.j&nbsp;:=&nbsp;temp<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>The significance of <span style="font-weight: bold;"> swap</span> is that it has a destructive
effect on its first argument.
</p>



<div id="spadComm6-124" class="spadComm" >
<form id="formComm6-124" action="javascript:makeRequest('6-124');" >
<input id="comm6-124" type="text" class="command" style="width: 11em;" value="k := [1,2,3,4,5]" />
</form>
<span id="commSav6-124" class="commSav" >k := [1,2,3,4,5]</span>
<div id="mathAns6-124" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>5</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>





<div id="spadComm6-125" class="spadComm" >
<form id="formComm6-125" action="javascript:makeRequest('6-125');" >
<input id="comm6-125" type="text" class="command" style="width: 8em;" value="swap(k,2,4)" />
</form>
<span id="commSav6-125" class="commSav" >swap(k,2,4)</span>
<div id="mathAns6-125" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;swap&nbsp;with&nbsp;type&nbsp;(List&nbsp;PositiveInteger,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PositiveInteger,PositiveInteger)&nbsp;-&gt;&nbsp;PositiveInteger&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>You see that the second and fourth elements are interchanged.
</p>



<div id="spadComm6-126" class="spadComm" >
<form id="formComm6-126" action="javascript:makeRequest('6-126');" >
<input id="comm6-126" type="text" class="command" style="width: 1em;" value="k" />
</form>
<span id="commSav6-126" class="commSav" >k</span>
<div id="mathAns6-126" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>5</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>Using this, we write a couple of different sort functions.  First, a
simple bubble sort.  <span class="index">sort:bubble</span><a name="chapter-6-42"/> The operation
<span class="spadopFrom" title="List">#</span> returns the number of elements in an aggregate.
</p>



<div class="verbatim"><br />
bubbleSort(m)&nbsp;==<br />
&nbsp;&nbsp;n&nbsp;:=&nbsp;#m<br />
&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;1..(n-1)&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;j&nbsp;in&nbsp;n..(i+1)&nbsp;by&nbsp;-1&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;m.j&nbsp;&lt;&nbsp;m.(j-1)&nbsp;then&nbsp;swap(m,j,j-1)<br />
&nbsp;&nbsp;m<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Let this be the list we want to sort.
</p>



<div id="spadComm6-127" class="spadComm" >
<form id="formComm6-127" action="javascript:makeRequest('6-127');" >
<input id="comm6-127" type="text" class="command" style="width: 10em;" value="m := [8,4,-3,9]" />
</form>
<span id="commSav6-127" class="commSav" >m := [8,4,-3,9]</span>
<div id="mathAns6-127" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>8</mn><mo>,</mo><mn>4</mn><mo>,</mo><mo>-</mo><mn>3</mn><mo>,</mo><mn>9</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>This is the result of sorting.
</p>



<div id="spadComm6-128" class="spadComm" >
<form id="formComm6-128" action="javascript:makeRequest('6-128');" >
<input id="comm6-128" type="text" class="command" style="width: 9em;" value="bubbleSort(m)" />
</form>
<span id="commSav6-128" class="commSav" >bubbleSort(m)</span>
<div id="mathAns6-128" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;swap&nbsp;with&nbsp;type&nbsp;(List&nbsp;Integer,Integer,Integer)&nbsp;-&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer&nbsp;<br />
<br />
+++&nbsp;|*3;swap;1;G82322|&nbsp;redefined<br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;bubbleSort&nbsp;with&nbsp;type&nbsp;List&nbsp;Integer&nbsp;-&gt;&nbsp;List&nbsp;Integer<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mo>-</mo><mn>3</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>9</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>Moreover, <math xmlns="&mathml;" mathsize="big"><mstyle><mi>m</mi></mstyle></math> is destructively changed to be the sorted version.
</p>



<div id="spadComm6-129" class="spadComm" >
<form id="formComm6-129" action="javascript:makeRequest('6-129');" >
<input id="comm6-129" type="text" class="command" style="width: 1em;" value="m" />
</form>
<span id="commSav6-129" class="commSav" >m</span>
<div id="mathAns6-129" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mo>-</mo><mn>3</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>9</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>This function implements an insertion sort.  <span class="index">sort:insertion</span><a name="chapter-6-43"/>
The basic idea is to traverse the list and insert the <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math>-th element
in its correct position among the <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>i</mi><mo>-</mo><mn>1</mn></mrow></mstyle></math> previous elements.  Since we
start at the beginning of the list, the list elements before the
<math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math>-th element have already been placed in ascending order.
</p>



<div class="verbatim"><br />
insertionSort(m)&nbsp;==<br />
&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;2..#m&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;j&nbsp;:=&nbsp;i<br />
&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;j&nbsp;&gt;&nbsp;1&nbsp;and&nbsp;m.j&nbsp;&lt;&nbsp;m.(j-1)&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap(m,j,j-1)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j&nbsp;:=&nbsp;j&nbsp;-&nbsp;1<br />
&nbsp;&nbsp;m<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>As with our bubble sort, this is a destructive function.
</p>



<div id="spadComm6-130" class="spadComm" >
<form id="formComm6-130" action="javascript:makeRequest('6-130');" >
<input id="comm6-130" type="text" class="command" style="width: 10em;" value="m := [8,4,-3,9]" />
</form>
<span id="commSav6-130" class="commSav" >m := [8,4,-3,9]</span>
<div id="mathAns6-130" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>8</mn><mo>,</mo><mn>4</mn><mo>,</mo><mo>-</mo><mn>3</mn><mo>,</mo><mn>9</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>





<div id="spadComm6-131" class="spadComm" >
<form id="formComm6-131" action="javascript:makeRequest('6-131');" >
<input id="comm6-131" type="text" class="command" style="width: 11em;" value="insertionSort(m)" />
</form>
<span id="commSav6-131" class="commSav" >insertionSort(m)</span>
<div id="mathAns6-131" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;insertionSort&nbsp;with&nbsp;type&nbsp;List&nbsp;Integer&nbsp;-&gt;&nbsp;List&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mo>-</mo><mn>3</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>9</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>





<div id="spadComm6-132" class="spadComm" >
<form id="formComm6-132" action="javascript:makeRequest('6-132');" >
<input id="comm6-132" type="text" class="command" style="width: 1em;" value="m" />
</form>
<span id="commSav6-132" class="commSav" >m</span>
<div id="mathAns6-132" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mo>-</mo><mn>3</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>9</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>Neither of the above functions is efficient for sorting large lists
since they reference elements by asking for the <math xmlns="&mathml;" mathsize="big"><mstyle><mi>j</mi></mstyle></math>-th element of the
structure <math xmlns="&mathml;" mathsize="big"><mstyle><mi>m</mi></mstyle></math>.
</p>


<p>Here is a more efficient bubble sort for lists.
</p>



<div class="verbatim"><br />
bubbleSort2(m:&nbsp;List&nbsp;Integer):&nbsp;List&nbsp;Integer&nbsp;==<br />
&nbsp;&nbsp;null&nbsp;m&nbsp;=&gt;&nbsp;m<br />
&nbsp;&nbsp;l&nbsp;:=&nbsp;m<br />
&nbsp;&nbsp;while&nbsp;not&nbsp;null&nbsp;(r&nbsp;:=&nbsp;l.rest)&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;:=&nbsp;bubbleSort2&nbsp;r<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;:=&nbsp;l.first<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;x&nbsp;&lt;&nbsp;r.first&nbsp;then<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l.first&nbsp;:=&nbsp;r.first<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r.first&nbsp;:=&nbsp;x<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l.rest&nbsp;:=&nbsp;r<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l&nbsp;:=&nbsp;l.rest<br />
&nbsp;&nbsp;m<br />
<br />
&nbsp;&nbsp;&nbsp;Function&nbsp;declaration&nbsp;bubbleSort2&nbsp;:&nbsp;List&nbsp;Integer&nbsp;-&gt;&nbsp;List&nbsp;Integer&nbsp;has&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;been&nbsp;added&nbsp;to&nbsp;workspace.<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Try it out.
</p>



<div id="spadComm6-133" class="spadComm" >
<form id="formComm6-133" action="javascript:makeRequest('6-133');" >
<input id="comm6-133" type="text" class="command" style="width: 13em;" value="bubbleSort2 [3,7,2]" />
</form>
<span id="commSav6-133" class="commSav" >bubbleSort2 [3,7,2]</span>
<div id="mathAns6-133" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>7</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>2</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>This definition is both recursive and iterative, and is tricky!
Unless you are <span class="italic">really</span> curious about this definition, we suggest
you skip immediately to the next section.
</p>


<p>Here are the key points in the definition.  First notice that if you
are sorting a list with less than two elements, there is nothing to
do: just return the list.  This definition returns immediately if
there are zero elements, and skips the entire <span class="teletype">while</span> loop if there is
just one element.
</p>


<p>The second point to realize is that on each outer iteration, the
bubble sort ensures that the minimum element is propagated leftmost.
Each iteration of the <span class="teletype">while</span> loop calls <span style="font-weight: bold;"> bubbleSort2</span> recursively
to sort all but the first element.  When finished, the minimum element
is either in the first or second position.  The conditional expression
ensures that it comes first.  If it is in the second, then a swap
occurs.  In any case, the <span style="font-weight: bold;"> rest</span> of the original list must be
updated to hold the result of the recursive call.
</p>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-6.14.xhtml" style="margin-right: 10px;">Previous Section 6.14 Making Functions from Objects</a><a href="section-6.16.xhtml" style="margin-right: 10px;">Next Section 6.16 Free and Local Variables</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>