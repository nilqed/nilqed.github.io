<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section9.34</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-9.33.xhtml" style="margin-right: 10px;">Previous Section 9.33 HexadecimalExpansion</a><a href="section-9.35.xhtml" style="margin-right: 10px;">Next Section 9.35 IntegerLinearDependence</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-9.34">
<h2 class="sectiontitle">9.34  Integer</h2>


<a name="IntegerXmpPage" class="label"/>


<p>FriCAS provides many operations for manipulating arbitrary precision
integers.  In this section we will show some of those that come from
<span class="teletype">Integer</span> itself plus some that are implemented in other packages.
More examples of using integers are in the following sections:
<a href="ugIntroNumbersPage" class="ref" >ugIntroNumbersPage</a>  in section 
<a href="ugIntroNumbersNumber" class="ref" >ugIntroNumbersNumber</a> 
<a href="section-9.36.xhtml#IntegerNumberTheoryFunctionsXmpPage" class="ref" >IntegerNumberTheoryFunctionsXmpPage</a> ,
<a href="section-9.15.xhtml#DecimalExpansionXmpPage" class="ref" >DecimalExpansionXmpPage</a> , 
<a href="section-9.4.xhtml#BinaryExpansionXmpPage" class="ref" >BinaryExpansionXmpPage</a> ,
<a href="section-9.33.xhtml#HexadecimalExpansionXmpPage" class="ref" >HexadecimalExpansionXmpPage</a> , and 
<a href="section-9.65.xhtml#RadixExpansionXmpPage" class="ref" >RadixExpansionXmpPage</a> .
</p>



<a name="subsec-9.34.1"/>
<div class="subsection"  id="subsec-9.34.1">
<h3 class="subsectitle">9.34.1  Basic Functions</h3>



<p>The size of an integer in FriCAS is only limited by the amount of
computer storage you have available.  The usual arithmetic operations
are available.
</p>




<div id="spadComm9-91" class="spadComm" >
<form id="formComm9-91" action="javascript:makeRequest('9-91');" >
<input id="comm9-91" type="text" class="command" style="width: 17em;" value="2^(5678 - 4856 + 2 * 17)" />
</form>
<span id="commSav9-91" class="commSav" >2^(5678 - 4856 + 2 * 17)</span>
<div id="mathAns9-91" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtable><mtr><mtd><mn>48048107704350081471815409251259243912395261398716822634738556100</mn></mtd></mtr><mtr><mtd><mn>88084200076308293086342527091412083743074572278211496076276922026</mn></mtd></mtr><mtr><mtd><mn>43343568752733498024953930242542523045817764949544214392905306388</mn></mtd></mtr><mtr><mtd><mn>478705146745768073877141698859815495632935288783334250628775936</mn></mtd></mtr></mtable></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>There are a number of ways of working with the sign of an integer.
Let's use this <span class="teletype">x</span> as an example.
</p>




<div id="spadComm9-92" class="spadComm" >
<form id="formComm9-92" action="javascript:makeRequest('9-92');" >
<input id="comm9-92" type="text" class="command" style="width: 7em;" value="x := -101 " />
</form>
<span id="commSav9-92" class="commSav" >x := -101 </span>
<div id="mathAns9-92" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mn>101</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Integer
</div>



<p>First of all, there is the absolute value function.
</p>




<div id="spadComm9-93" class="spadComm" >
<form id="formComm9-93" action="javascript:makeRequest('9-93');" >
<input id="comm9-93" type="text" class="command" style="width: 5em;" value="abs(x) " />
</form>
<span id="commSav9-93" class="commSav" >abs(x) </span>
<div id="mathAns9-93" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>101</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>The <span class="spadfunFrom" >sign</span><span class="index">sign</span><a name="chapter-9-56"/><span class="index">Integer</span><a name="chapter-9-57"/> operation returns <span class="teletype">-1</span> if its argument
is negative, <span class="teletype">0</span> if zero and <span class="teletype">1</span> if positive.
</p>




<div id="spadComm9-94" class="spadComm" >
<form id="formComm9-94" action="javascript:makeRequest('9-94');" >
<input id="comm9-94" type="text" class="command" style="width: 6em;" value="sign(x) " />
</form>
<span id="commSav9-94" class="commSav" >sign(x) </span>
<div id="mathAns9-94" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mn>1</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Integer
</div>



<p>You can determine if an integer is negative in several other ways.
</p>




<div id="spadComm9-95" class="spadComm" >
<form id="formComm9-95" action="javascript:makeRequest('9-95');" >
<input id="comm9-95" type="text" class="command" style="width: 4em;" value="x &lt; 0 " />
</form>
<span id="commSav9-95" class="commSav" >x &lt; 0 </span>
<div id="mathAns9-95" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>





<div id="spadComm9-96" class="spadComm" >
<form id="formComm9-96" action="javascript:makeRequest('9-96');" >
<input id="comm9-96" type="text" class="command" style="width: 6em;" value="x &lt;= -1 " />
</form>
<span id="commSav9-96" class="commSav" >x &lt;= -1 </span>
<div id="mathAns9-96" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>





<div id="spadComm9-97" class="spadComm" >
<form id="formComm9-97" action="javascript:makeRequest('9-97');" >
<input id="comm9-97" type="text" class="command" style="width: 9em;" value="negative?(x) " />
</form>
<span id="commSav9-97" class="commSav" >negative?(x) </span>
<div id="mathAns9-97" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>Similarly, you can find out if it is positive.
</p>




<div id="spadComm9-98" class="spadComm" >
<form id="formComm9-98" action="javascript:makeRequest('9-98');" >
<input id="comm9-98" type="text" class="command" style="width: 4em;" value="x > 0 " />
</form>
<span id="commSav9-98" class="commSav" >x > 0 </span>
<div id="mathAns9-98" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>





<div id="spadComm9-99" class="spadComm" >
<form id="formComm9-99" action="javascript:makeRequest('9-99');" >
<input id="comm9-99" type="text" class="command" style="width: 5em;" value="x >= 1 " />
</form>
<span id="commSav9-99" class="commSav" >x >= 1 </span>
<div id="mathAns9-99" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>





<div id="spadComm9-100" class="spadComm" >
<form id="formComm9-100" action="javascript:makeRequest('9-100');" >
<input id="comm9-100" type="text" class="command" style="width: 9em;" value="positive?(x) " />
</form>
<span id="commSav9-100" class="commSav" >positive?(x) </span>
<div id="mathAns9-100" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>This is the recommended way of determining whether an integer is zero.
</p>




<div id="spadComm9-101" class="spadComm" >
<form id="formComm9-101" action="javascript:makeRequest('9-101');" >
<input id="comm9-101" type="text" class="command" style="width: 6em;" value="zero?(x) " />
</form>
<span id="commSav9-101" class="commSav" >zero?(x) </span>
<div id="mathAns9-101" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>





<div class="boxed2">


<div class="boxed">



<p>Use the <span class="spadfunFrom" >zero?</span><span class="index">zero?</span><a name="chapter-9-58"/><span class="index">Integer</span><a name="chapter-9-59"/> operation whenever you are
testing any mathematical object for equality with zero.  This is
usually more efficient that using <span class="teletype">=</span> (think of matrices: it is
easier to tell if a matrix is zero by just checking term by term than
constructing another <span class="italic">zero</span> matrix and comparing the two matrices
term by term) and also avoids the problem that <span class="teletype">=</span> is usually used
for creating equations.<br/>
</p>



</div>
</div>



<p>This is the recommended way of determining whether an integer is equal
to one.
</p>




<div id="spadComm9-102" class="spadComm" >
<form id="formComm9-102" action="javascript:makeRequest('9-102');" >
<input id="comm9-102" type="text" class="command" style="width: 6em;" value="one?(x) " />
</form>
<span id="commSav9-102" class="commSav" >one?(x) </span>
<div id="mathAns9-102" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>This syntax is used to test equality using <span class="spadopFrom" title="Integer">=</span>.
It says that you want a <span class="teletype">Boolean</span> (<span class="teletype">true</span> or <span class="teletype">false</span>)
answer rather than an equation.
</p>




<div id="spadComm9-103" class="spadComm" >
<form id="formComm9-103" action="javascript:makeRequest('9-103');" >
<input id="comm9-103" type="text" class="command" style="width: 13em;" value="(x = -101)@Boolean " />
</form>
<span id="commSav9-103" class="commSav" >(x = -101)@Boolean </span>
<div id="mathAns9-103" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>The operations <span class="spadfunFrom" >odd?</span><span class="index">odd?</span><a name="chapter-9-60"/><span class="index">Integer</span><a name="chapter-9-61"/> and
<span class="spadfunFrom" >even?</span><span class="index">even?</span><a name="chapter-9-62"/><span class="index">Integer</span><a name="chapter-9-63"/> determine whether an integer is odd or
even, respectively.  They each return a <span class="teletype">Boolean</span> object.
</p>




<div id="spadComm9-104" class="spadComm" >
<form id="formComm9-104" action="javascript:makeRequest('9-104');" >
<input id="comm9-104" type="text" class="command" style="width: 6em;" value="odd?(x) " />
</form>
<span id="commSav9-104" class="commSav" >odd?(x) </span>
<div id="mathAns9-104" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>





<div id="spadComm9-105" class="spadComm" >
<form id="formComm9-105" action="javascript:makeRequest('9-105');" >
<input id="comm9-105" type="text" class="command" style="width: 6em;" value="even?(x) " />
</form>
<span id="commSav9-105" class="commSav" >even?(x) </span>
<div id="mathAns9-105" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>The operation <span class="spadfunFrom" >gcd</span><span class="index">gcd</span><a name="chapter-9-64"/><span class="index">Integer</span><a name="chapter-9-65"/> computes the greatest common
divisor of two integers.
</p>




<div id="spadComm9-106" class="spadComm" >
<form id="formComm9-106" action="javascript:makeRequest('9-106');" >
<input id="comm9-106" type="text" class="command" style="width: 11em;" value="gcd(56788,43688)" />
</form>
<span id="commSav9-106" class="commSav" >gcd(56788,43688)</span>
<div id="mathAns9-106" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>4</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>The operation <span class="spadfunFrom" >lcm</span><span class="index">lcm</span><a name="chapter-9-66"/><span class="index">Integer</span><a name="chapter-9-67"/> computes their least common multiple.
</p>




<div id="spadComm9-107" class="spadComm" >
<form id="formComm9-107" action="javascript:makeRequest('9-107');" >
<input id="comm9-107" type="text" class="command" style="width: 11em;" value="lcm(56788,43688)" />
</form>
<span id="commSav9-107" class="commSav" >lcm(56788,43688)</span>
<div id="mathAns9-107" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>620238536</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>To determine the maximum of two integers, use <span class="spadfunFrom" >max</span><span class="index">max</span><a name="chapter-9-68"/><span class="index">Integer</span><a name="chapter-9-69"/>.
</p>




<div id="spadComm9-108" class="spadComm" >
<form id="formComm9-108" action="javascript:makeRequest('9-108');" >
<input id="comm9-108" type="text" class="command" style="width: 8em;" value="max(678,567)" />
</form>
<span id="commSav9-108" class="commSav" >max(678,567)</span>
<div id="mathAns9-108" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>678</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>To determine the minimum, use <span class="spadfunFrom" >min</span><span class="index">min</span><a name="chapter-9-70"/><span class="index">Integer</span><a name="chapter-9-71"/>.
</p>




<div id="spadComm9-109" class="spadComm" >
<form id="formComm9-109" action="javascript:makeRequest('9-109');" >
<input id="comm9-109" type="text" class="command" style="width: 8em;" value="min(678,567)" />
</form>
<span id="commSav9-109" class="commSav" >min(678,567)</span>
<div id="mathAns9-109" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>567</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>The <span class="teletype">reduce</span> operation is used to extend binary operations to more
than two arguments.  For example, you can use <span class="teletype">reduce</span> to find the
maximum integer in a list or compute the least common multiple of all
integers in the list.
</p>




<div id="spadComm9-110" class="spadComm" >
<form id="formComm9-110" action="javascript:makeRequest('9-110');" >
<input id="comm9-110" type="text" class="command" style="width: 22em;" value="reduce(max,[2,45,-89,78,100,-45])" />
</form>
<span id="commSav9-110" class="commSav" >reduce(max,[2,45,-89,78,100,-45])</span>
<div id="mathAns9-110" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>100</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm9-111" class="spadComm" >
<form id="formComm9-111" action="javascript:makeRequest('9-111');" >
<input id="comm9-111" type="text" class="command" style="width: 22em;" value="reduce(min,[2,45,-89,78,100,-45])" />
</form>
<span id="commSav9-111" class="commSav" >reduce(min,[2,45,-89,78,100,-45])</span>
<div id="mathAns9-111" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mn>89</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Integer
</div>





<div id="spadComm9-112" class="spadComm" >
<form id="formComm9-112" action="javascript:makeRequest('9-112');" >
<input id="comm9-112" type="text" class="command" style="width: 22em;" value="reduce(gcd,[2,45,-89,78,100,-45])" />
</form>
<span id="commSav9-112" class="commSav" >reduce(gcd,[2,45,-89,78,100,-45])</span>
<div id="mathAns9-112" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm9-113" class="spadComm" >
<form id="formComm9-113" action="javascript:makeRequest('9-113');" >
<input id="comm9-113" type="text" class="command" style="width: 22em;" value="reduce(lcm,[2,45,-89,78,100,-45])" />
</form>
<span id="commSav9-113" class="commSav" >reduce(lcm,[2,45,-89,78,100,-45])</span>
<div id="mathAns9-113" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1041300</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>The infix operator <span class="italic">/</span> is <span class="italic">not</span> used to compute the quotient of
integers.  Rather, it is used to create rational numbers as described
in <a href="section-9.12.xhtml#ContinuedFractionXmpPage" class="ref" >FractionXmpPage</a> .
</p>




<div id="spadComm9-114" class="spadComm" >
<form id="formComm9-114" action="javascript:makeRequest('9-114');" >
<input id="comm9-114" type="text" class="command" style="width: 4em;" value="13 / 4" />
</form>
<span id="commSav9-114" class="commSav" >13 / 4</span>
<div id="mathAns9-114" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mfrac><mn>13</mn><mn>4</mn></mfrac></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Integer
</div>



<p>The infix operation <span class="spadfunFrom" >quo</span><span class="index">quo</span><a name="chapter-9-72"/><span class="index">Integer</span><a name="chapter-9-73"/> computes the integer
quotient.
</p>




<div id="spadComm9-115" class="spadComm" >
<form id="formComm9-115" action="javascript:makeRequest('9-115');" >
<input id="comm9-115" type="text" class="command" style="width: 6em;" value="13 quo 4" />
</form>
<span id="commSav9-115" class="commSav" >13 quo 4</span>
<div id="mathAns9-115" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>3</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>The infix operation <span class="spadfunFrom" >rem</span><span class="index">rem</span><a name="chapter-9-74"/><span class="index">Integer</span><a name="chapter-9-75"/> computes the integer
remainder.
</p>




<div id="spadComm9-116" class="spadComm" >
<form id="formComm9-116" action="javascript:makeRequest('9-116');" >
<input id="comm9-116" type="text" class="command" style="width: 6em;" value="13 rem 4" />
</form>
<span id="commSav9-116" class="commSav" >13 rem 4</span>
<div id="mathAns9-116" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>One integer is evenly divisible by another if the remainder is zero.
The operation <span class="spadfunFrom" >exquo</span><span class="index">exquo</span><a name="chapter-9-76"/><span class="index">Integer</span><a name="chapter-9-77"/> can also be used.  See
<a href="ugTypesUnionsPage" class="ref" >ugTypesUnionsPage</a>  in Section 
<a href="ugTypesUnionsNumber" class="ref" >ugTypesUnionsNumber</a>  for an
example.
</p>




<div id="spadComm9-117" class="spadComm" >
<form id="formComm9-117" action="javascript:makeRequest('9-117');" >
<input id="comm9-117" type="text" class="command" style="width: 23em;" value="zero?(167604736446952 rem 2003644)" />
</form>
<span id="commSav9-117" class="commSav" >zero?(167604736446952 rem 2003644)</span>
<div id="mathAns9-117" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>The operation <span class="spadfunFrom" >divide</span><span class="index">divide</span><a name="chapter-9-78"/><span class="index">Integer</span><a name="chapter-9-79"/> returns a record of the
quotient and remainder and thus is more efficient when both are needed.
</p>




<div id="spadComm9-118" class="spadComm" >
<form id="formComm9-118" action="javascript:makeRequest('9-118');" >
<input id="comm9-118" type="text" class="command" style="width: 12em;" value="d := divide(13,4) " />
</form>
<span id="commSav9-118" class="commSav" >d := divide(13,4) </span>
<div id="mathAns9-118" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mi>quotient</mi><mo>=</mo><mn>3</mn></mrow><mo>,</mo><mrow><mi>remainder</mi><mo>=</mo><mn>1</mn></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Record(quotient: Integer,remainder: Integer)
</div>





<div id="spadComm9-119" class="spadComm" >
<form id="formComm9-119" action="javascript:makeRequest('9-119');" >
<input id="comm9-119" type="text" class="command" style="width: 8em;" value="d.quotient " />
</form>
<span id="commSav9-119" class="commSav" >d.quotient </span>
<div id="mathAns9-119" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>3</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Records are discussed in detail in Section 
<a href="section-2.4.xhtml#ugTypesRecords" class="ref" >ugTypesRecords</a> .
</p>




<div id="spadComm9-120" class="spadComm" >
<form id="formComm9-120" action="javascript:makeRequest('9-120');" >
<input id="comm9-120" type="text" class="command" style="width: 8em;" value="d.remainder " />
</form>
<span id="commSav9-120" class="commSav" >d.remainder </span>
<div id="mathAns9-120" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





</div>



<a name="subsec-9.34.2"/>
<div class="subsection"  id="subsec-9.34.2">
<h3 class="subsectitle">9.34.2  Primes and Factorization</h3>



<p>Use the operation <span class="spadfunFrom" >factor</span><span class="index">factor</span><a name="chapter-9-80"/><span class="index">Integer</span><a name="chapter-9-81"/> to factor integers.
It returns an object of type <span class="teletype">Factored Integer</span>.
See <a href="section-9.22.xhtml#FactoredXmpPage" class="ref" >FactoredXmpPage</a>  
for a discussion of the manipulation of factored objects.
</p>




<div id="spadComm9-121" class="spadComm" >
<form id="formComm9-121" action="javascript:makeRequest('9-121');" >
<input id="comm9-121" type="text" class="command" style="width: 9em;" value="factor 102400" />
</form>
<span id="commSav9-121" class="commSav" >factor 102400</span>
<div id="mathAns9-121" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mn>2</mn><mn>12</mn></msup></mrow><mspace width="0.5 em" /><mrow><msup><mn>5</mn><mn>2</mn></msup></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Factored Integer
</div>



<p>The operation <span class="spadfunFrom" >prime?</span><span class="index">prime?</span><a name="chapter-9-82"/><span class="index">Integer</span><a name="chapter-9-83"/> returns <span class="teletype">true</span> or 
<span class="teletype">false</span> depending on whether its argument is a prime.
</p>




<div id="spadComm9-122" class="spadComm" >
<form id="formComm9-122" action="javascript:makeRequest('9-122');" >
<input id="comm9-122" type="text" class="command" style="width: 6em;" value="prime? 7" />
</form>
<span id="commSav9-122" class="commSav" >prime? 7</span>
<div id="mathAns9-122" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>





<div id="spadComm9-123" class="spadComm" >
<form id="formComm9-123" action="javascript:makeRequest('9-123');" >
<input id="comm9-123" type="text" class="command" style="width: 6em;" value="prime? 8" />
</form>
<span id="commSav9-123" class="commSav" >prime? 8</span>
<div id="mathAns9-123" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>The operation <span class="spadfunFrom" >nextPrime</span><span class="index">nextPrime</span><a name="chapter-9-84"/><span class="index">IntegerPrimesPackage</span><a name="chapter-9-85"/> returns the
least prime number greater than its argument.
</p>




<div id="spadComm9-124" class="spadComm" >
<form id="formComm9-124" action="javascript:makeRequest('9-124');" >
<input id="comm9-124" type="text" class="command" style="width: 9em;" value="nextPrime 100" />
</form>
<span id="commSav9-124" class="commSav" >nextPrime 100</span>
<div id="mathAns9-124" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>101</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>The operation <span class="spadfunFrom" >prevPrime</span><span class="index">prevPrime</span><a name="chapter-9-86"/><span class="index">IntegerPrimesPackage</span><a name="chapter-9-87"/> returns
the greatest prime number less than its argument.
</p>




<div id="spadComm9-125" class="spadComm" >
<form id="formComm9-125" action="javascript:makeRequest('9-125');" >
<input id="comm9-125" type="text" class="command" style="width: 9em;" value="prevPrime 100" />
</form>
<span id="commSav9-125" class="commSav" >prevPrime 100</span>
<div id="mathAns9-125" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>97</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>To compute all primes between two integers (inclusively), use the
operation <span class="spadfunFrom" >primes</span><span class="index">primes</span><a name="chapter-9-88"/><span class="index">IntegerPrimesPackage</span><a name="chapter-9-89"/>.
</p>




<div id="spadComm9-126" class="spadComm" >
<form id="formComm9-126" action="javascript:makeRequest('9-126');" >
<input id="comm9-126" type="text" class="command" style="width: 10em;" value="primes(100,175)" />
</form>
<span id="commSav9-126" class="commSav" >primes(100,175)</span>
<div id="mathAns9-126" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>173</mn><mo>,</mo><mn>167</mn><mo>,</mo><mn>163</mn><mo>,</mo><mn>157</mn><mo>,</mo><mn>151</mn><mo>,</mo><mn>149</mn><mo>,</mo><mn>139</mn><mo>,</mo><mn>137</mn><mo>,</mo><mn>131</mn><mo>,</mo><mn>127</mn><mo>,</mo><mn>113</mn><mo>,</mo><mn>109</mn><mo>,</mo><mn>107</mn><mo>,</mo><mn>103</mn><mo>,</mo><mn>101</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>You might sometimes want to see the factorization of an integer
when it is considered a <span class="italic">Gaussian integer</span>.
See <a href="section-9.11.xhtml#ComplexXmpPage" class="ref" >ComplexXmpPage</a>  for more details.
</p>




<div id="spadComm9-127" class="spadComm" >
<form id="formComm9-127" action="javascript:makeRequest('9-127');" >
<input id="comm9-127" type="text" class="command" style="width: 19em;" value="factor(2 :: Complex Integer)" />
</form>
<span id="commSav9-127" class="commSav" >factor(2 :: Complex Integer)</span>
<div id="mathAns9-127" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mrow><mi>i</mi><mspace width="0.5 em" /><mrow><msup><mrow><mo>(</mo><mn>1</mn><mo>+</mo><mi>i</mi><mo>)</mo></mrow><mn>2</mn></msup></mrow></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Factored Complex Integer
</div>





</div>



<a name="subsec-9.34.3"/>
<div class="subsection"  id="subsec-9.34.3">
<h3 class="subsectitle">9.34.3  Some Number Theoretic Functions</h3>



<p>FriCAS provides several number theoretic operations for integers.
More examples are in <a href="section-9.36.xhtml#IntegerNumberTheoryFunctionsXmpPage" class="ref" >IntegerNumberTheoryFunctionsXmpPage</a> .
</p>


<p>The operation <span class="spadfunFrom" >fibonacci</span><span class="index">fibonacci</span><a name="chapter-9-90"/><span class="index">IntegerNumberTheoryFunctions</span><a name="chapter-9-91"/>
computes the Fibonacci numbers.  The algorithm has running time
 <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math> for argument <span class="teletype">n</span>.
</p>




<div id="spadComm9-128" class="spadComm" >
<form id="formComm9-128" action="javascript:makeRequest('9-128');" >
<input id="comm9-128" type="text" class="command" style="width: 18em;" value="[fibonacci(k) for k in 0..]" />
</form>
<span id="commSav9-128" class="commSav" >[fibonacci(k) for k in 0..]</span>
<div id="mathAns9-128" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>0</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>13</mn><mo>,</mo><mn>21</mn><mo>,</mo><mn>34</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Integer
</div>



<p>The operation <span class="spadfunFrom" >legendre</span><span class="index">legendre</span><a name="chapter-9-92"/><span class="index">IntegerNumberTheoryFunctions</span><a name="chapter-9-93"/>
computes the Legendre symbol for its two integer arguments where the
second one is prime.  If you know the second argument to be prime, use
<span class="spadfunFrom" >jacobi</span><span class="index">jacobi</span><a name="chapter-9-94"/><span class="index">IntegerNumberTheoryFunctions</span><a name="chapter-9-95"/> instead where no
check is made.
</p>




<div id="spadComm9-129" class="spadComm" >
<form id="formComm9-129" action="javascript:makeRequest('9-129');" >
<input id="comm9-129" type="text" class="command" style="width: 21em;" value="[legendre(i,11) for i in 0..10]" />
</form>
<span id="commSav9-129" class="commSav" >[legendre(i,11) for i in 0..10]</span>
<div id="mathAns9-129" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>0</mn><mo>,</mo><mn>1</mn><mo>,</mo><mo>-</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mo>-</mo><mn>1</mn><mo>,</mo><mo>-</mo><mn>1</mn><mo>,</mo><mo>-</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mo>-</mo><mn>1</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>The operation <span class="spadfunFrom" >jacobi</span><span class="index">jacobi</span><a name="chapter-9-96"/><span class="index">IntegerNumberTheoryFunctions</span><a name="chapter-9-97"/>
computes the Jacobi symbol for its two integer arguments.  By
convention, <span class="teletype">0</span> is returned if the greatest common divisor of the
numerator and denominator is not <span class="teletype">1</span>.
</p>




<div id="spadComm9-130" class="spadComm" >
<form id="formComm9-130" action="javascript:makeRequest('9-130');" >
<input id="comm9-130" type="text" class="command" style="width: 19em;" value="[jacobi(i,15) for i in 0..9]" />
</form>
<span id="commSav9-130" class="commSav" >[jacobi(i,15) for i in 0..9]</span>
<div id="mathAns9-130" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>0</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>0</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>0</mn><mo>,</mo><mn>0</mn><mo>,</mo><mo>-</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>0</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>The operation <span class="spadfunFrom" >eulerPhi</span><span class="index">eulerPhi</span><a name="chapter-9-98"/><span class="index">IntegerNumberTheoryFunctions</span><a name="chapter-9-99"/>
computes the values of Euler's  <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math>-function where  <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math> equals
the number of positive integers less than or equal to <span class="teletype">n</span> that are
relatively prime to the positive integer <span class="teletype">n</span>.
</p>




<div id="spadComm9-131" class="spadComm" >
<form id="formComm9-131" action="javascript:makeRequest('9-131');" >
<input id="comm9-131" type="text" class="command" style="width: 17em;" value="[eulerPhi i for i in 1..]" />
</form>
<span id="commSav9-131" class="commSav" >[eulerPhi i for i in 1..]</span>
<div id="mathAns9-131" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>4</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Integer
</div>



<p>The operation <span class="spadfunFrom" >moebiusMu</span><span class="index">moebiusMu</span><a name="chapter-9-100"/><span class="index">IntegerNumberTheoryFunctions</span><a name="chapter-9-101"/>
computes the M&#x00f6;bius  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03bb;</mi></mstyle></math> function.
</p>




<div id="spadComm9-132" class="spadComm" >
<form id="formComm9-132" action="javascript:makeRequest('9-132');" >
<input id="comm9-132" type="text" class="command" style="width: 18em;" value="[moebiusMu i for i in 1..]" />
</form>
<span id="commSav9-132" class="commSav" >[moebiusMu i for i in 1..]</span>
<div id="mathAns9-132" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mo>-</mo><mn>1</mn><mo>,</mo><mo>-</mo><mn>1</mn><mo>,</mo><mn>0</mn><mo>,</mo><mo>-</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mo>-</mo><mn>1</mn><mo>,</mo><mn>0</mn><mo>,</mo><mn>0</mn><mo>,</mo><mn>1</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Integer
</div>



<p>Although they have somewhat limited utility, FriCAS provides Roman numerals.
</p>




<div id="spadComm9-133" class="spadComm" >
<form id="formComm9-133" action="javascript:makeRequest('9-133');" >
<input id="comm9-133" type="text" class="command" style="width: 10em;" value="a := roman(78) " />
</form>
<span id="commSav9-133" class="commSav" >a := roman(78) </span>
<div id="mathAns9-133" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext>LXXVIII</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: RomanNumeral
</div>





<div id="spadComm9-134" class="spadComm" >
<form id="formComm9-134" action="javascript:makeRequest('9-134');" >
<input id="comm9-134" type="text" class="command" style="width: 10em;" value="b := roman(87) " />
</form>
<span id="commSav9-134" class="commSav" >b := roman(87) </span>
<div id="mathAns9-134" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext>LXXXVII</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: RomanNumeral
</div>





<div id="spadComm9-135" class="spadComm" >
<form id="formComm9-135" action="javascript:makeRequest('9-135');" >
<input id="comm9-135" type="text" class="command" style="width: 4em;" value="a + b " />
</form>
<span id="commSav9-135" class="commSav" >a + b </span>
<div id="mathAns9-135" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext>CLXV</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: RomanNumeral
</div>





<div id="spadComm9-136" class="spadComm" >
<form id="formComm9-136" action="javascript:makeRequest('9-136');" >
<input id="comm9-136" type="text" class="command" style="width: 4em;" value="a * b " />
</form>
<span id="commSav9-136" class="commSav" >a * b </span>
<div id="mathAns9-136" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext>MMMMMMDCCLXXXVI</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: RomanNumeral
</div>





<div id="spadComm9-137" class="spadComm" >
<form id="formComm9-137" action="javascript:makeRequest('9-137');" >
<input id="comm9-137" type="text" class="command" style="width: 6em;" value="b rem a " />
</form>
<span id="commSav9-137" class="commSav" >b rem a </span>
<div id="mathAns9-137" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext>IX</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: RomanNumeral
</div>





</div>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-9.33.xhtml" style="margin-right: 10px;">Previous Section 9.33 HexadecimalExpansion</a><a href="section-9.35.xhtml" style="margin-right: 10px;">Next Section 9.35 IntegerLinearDependence</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>