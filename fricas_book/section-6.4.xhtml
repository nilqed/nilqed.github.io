<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section6.4</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-6.3.xhtml" style="margin-right: 10px;">Previous Section 6.3 Introduction to Functions</a><a href="section-6.5.xhtml" style="margin-right: 10px;">Next Section 6.5 One-Line Functions</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-6.4">
<h2 class="sectiontitle">6.4  Declaring the Type of Functions</h2>


<a name="ugUserDeclare" class="label"/>


<p>In <a href="section-2.3.xhtml#ugTypesDeclare" class="ref" >ugTypesDeclare</a>  we discussed
how to declare a variable to restrict the kind of values that can be
assigned to it.  In this section we show how to declare a variable
that refers to function objects.
</p>




<div class="boxed2">


<div class="boxed">



<p>A function is an object of type
</p>



<div class="center" style="text-align: center;">


<p>{\sf Source <math xmlns="&mathml;" mathsize="big"><mstyle><mo>&#x2192;</mo></mstyle></math> Type}
</p>



</div>



<p>where <span class="teletype">Source</span> and <span class="teletype">Target</span> can be any type.  A common type
for <span class="teletype">Source</span> is <span class="teletype">Tuple</span>(<math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math>, ..., 
<math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math>), usually written (<math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math>, ..., 
<math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math>), to indicate a function of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> arguments.<br/>
</p>



</div>
</div>



<p>If <math xmlns="&mathml;" mathsize="big"><mstyle><mi>g</mi></mstyle></math> takes an <span class="teletype">Integer</span>, a <span class="teletype">Float</span> and another <span class="teletype">Integer</span>, 
and returns a <span class="teletype">String</span>, the declaration is written:
</p>



<div id="spadComm6-21" class="spadComm" >
<form id="formComm6-21" action="javascript:makeRequest('6-21');" >
<input id="comm6-21" type="text" class="command" style="width: 24em;" value="g: (Integer,Float,Integer) -> String" />
</form>
<span id="commSav6-21" class="commSav" >g: (Integer,Float,Integer) -> String</span>
<div id="mathAns6-21" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>The types need not be written fully; using abbreviations, the above
declaration is:
</p>



<div id="spadComm6-22" class="spadComm" >
<form id="formComm6-22" action="javascript:makeRequest('6-22');" >
<input id="comm6-22" type="text" class="command" style="width: 19em;" value="g: (INT,FLOAT,INT) -> STRING" />
</form>
<span id="commSav6-22" class="commSav" >g: (INT,FLOAT,INT) -> STRING</span>
<div id="mathAns6-22" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>It is possible for a function to take no arguments.  If <math xmlns="&mathml;" mathsize="big"><mstyle><mi>h</mi></mstyle></math> takes no
arguments but returns a <span class="teletype">Polynomial</span> <span class="teletype">Integer</span>, any of the
following declarations is acceptable.
</p>



<div id="spadComm6-23" class="spadComm" >
<form id="formComm6-23" action="javascript:makeRequest('6-23');" >
<input id="comm6-23" type="text" class="command" style="width: 12em;" value="h: () -> POLY INT" />
</form>
<span id="commSav6-23" class="commSav" >h: () -> POLY INT</span>
<div id="mathAns6-23" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm6-24" class="spadComm" >
<form id="formComm6-24" action="javascript:makeRequest('6-24');" >
<input id="comm6-24" type="text" class="command" style="width: 16em;" value="h: () -> Polynomial INT" />
</form>
<span id="commSav6-24" class="commSav" >h: () -> Polynomial INT</span>
<div id="mathAns6-24" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm6-25" class="spadComm" >
<form id="formComm6-25" action="javascript:makeRequest('6-25');" >
<input id="comm6-25" type="text" class="command" style="width: 14em;" value="h: () -> POLY Integer" />
</form>
<span id="commSav6-25" class="commSav" >h: () -> POLY Integer</span>
<div id="mathAns6-25" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div class="boxed2">


<div class="boxed">



<p>Functions can also be declared when they are being defined.
The syntax for combined declaration/definition is:
</p>



<div class="center" style="text-align: center;">


<p><span class="italic">functionName</span>(<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>parm</mtext></mrow><mn>1</mn></msub></mrow></mstyle></math>: 
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>parmType</mtext></mrow><mn>1</mn></msub></mrow></mstyle></math>, ..., <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>parm</mtext></mrow><mi>N</mi></msub></mrow></mstyle></math>: 
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>parmType</mtext></mrow><mi>N</mi></msub></mrow></mstyle></math>): <span class="italic">functionReturnType</span>
</p>



</div>




</div>
</div>



<p>The following definition fragments show how this can be done for
the functions <math xmlns="&mathml;" mathsize="big"><mstyle><mi>g</mi></mstyle></math> and <math xmlns="&mathml;" mathsize="big"><mstyle><mi>h</mi></mstyle></math> above.
</p>



<div class="verbatim"><br />
g(arg1:&nbsp;INT,&nbsp;arg2:&nbsp;FLOAT,&nbsp;arg3:&nbsp;INT):&nbsp;STRING&nbsp;==&nbsp;...<br />
<br />
h():&nbsp;POLY&nbsp;INT&nbsp;==&nbsp;...<br />
</div>



<p>A current restriction on function declarations is that they must
involve fully specified types (that is, cannot include modes involving
explicit or implicit <span class="italic"><span class="teletype">?</span></span>).  For more information on declaring
things in general, see <a href="section-2.3.xhtml#ugTypesDeclare" class="ref" >ugTypesDeclare</a> .
</p>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-6.3.xhtml" style="margin-right: 10px;">Previous Section 6.3 Introduction to Functions</a><a href="section-6.5.xhtml" style="margin-right: 10px;">Next Section 6.5 One-Line Functions</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>