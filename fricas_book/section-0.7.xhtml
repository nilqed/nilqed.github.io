<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section0.7</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-0.6.xhtml" style="margin-right: 10px;">Previous Section 0.6 Data Structures in FriCAS</a><a href="section-1.0.xhtml" style="margin-right: 10px;">Next Section 1.0 An Overview of FriCAS</a><a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-0.7">
<h2 class="sectiontitle">0.7  Functions, Choices, and Loops</h2>


<p>By now the reader should be able to construct simple one-line expressions
involving variables and different data structures. This section builds on
this knowledge and shows how to use iteration, make choices, and build
functions in FriCAS. At the moment it is assumed that the reader has a rough
idea of how types are specified and constructed so that they can follow
the examples given.
</p>


<p>From this point on most examples will be taken from input files. 
</p>



<a name="subsec-0.7.1"/>
<div class="subsection"  id="subsec-0.7.1">
<h3 class="subsectitle">0.7.1  Reading Code from a File</h3>


<p>Input files contain code that will be fed to the command prompt. The 
primary different between the command line and an input file is that
indentation matters. In an input file you can specify <span class="italic">piles</span> of code
by using indentation. 
</p>


<p>The names of all input files in FriCAS should end in <span class="italic">.input</span> otherwise
FriCAS will refuse to read them. 
</p>


<p>If an input file is named <span style="font-weight: bold;"> foo.input</span> you can feed the contents of
the file to the command prompt (as though you typed them) by writing:
<span style="font-weight: bold;"> )read foo.input</span>.
</p>


<p>It is good practice to start each input file with the <span style="font-weight: bold;"> )clear all</span>
command so that all functions and variables in the current environment
are erased. 
</p>



</div>



<a name="subsec-0.7.2"/>
<div class="subsection"  id="subsec-0.7.2">
<h3 class="subsectitle">0.7.2  Blocks</h3>


<p>The FriCAS constructs that provide looping, choices, and user-defined
functions all rely on the notion of blocks. A block is a sequence of
expressions which are evaluated in the order that they appear except
when it is modified by control expressions such as loops. To leave a
block prematurely use an expression of the form:
<span class="slant">BoolExpr</span><span class="teletype">=></span><span class="slant">Expr</span> 
where <span class="slant">BoolExpr</span> is any FriCAS expression that has type <span class="teletype">Boolean</span>. 
The value and type of <span class="slant">Expr</span> determines the value and type returned 
by the block.
</p>


<p>If blocks are entered at the keyboard (as opposed to reading them from
a text file) then there is only one way of creating them. The syntax is:
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>(</mo><mi>expression1</mi><mo>;</mo><mi>expression2</mi><mo>;</mo><mo>&#x2026;</mo><mo>;</mo><mi>expressionN</mi><mo>)</mo></mrow></mstyle></math>
</p>


<p>In an input file a block can be constructed as above or by placing all the
statements at the same indentation level. When indentation is used to
indicate program structure the block is called a <span class="slant">pile</span>. As an example
of a simple block a list of three integers can be constructed using
parentheses:
</p>



<div id="spadComm0-181" class="spadComm" >
<form id="formComm0-181" action="javascript:makeRequest('0-181');" >
<input id="comm0-181" type="text" class="command" style="width: 21em;" value="( a:=4; b:=1; c:=9; L:=[a,b,c])" />
</form>
<span id="commSav0-181" class="commSav" >( a:=4; b:=1; c:=9; L:=[a,b,c])</span>
<div id="mathAns0-181" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>4</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>9</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>Doing the same thing using piles in an input file you could type:
</p>



<div class="verbatim"><br />
L&nbsp;:=<br />
&nbsp;&nbsp;a:=4<br />
&nbsp;&nbsp;b:=1<br />
&nbsp;&nbsp;c:=9<br />
&nbsp;&nbsp;[a,b,c]<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>4</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>9</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List PositiveInteger
</div>



<p>Since blocks have a type and a value they can be used as arguments to 
functions or as part of other expressions. It should be pointed out that
the following example is not recommended practice but helps to illustrate
the idea of blocks and their ability to return values:
</p>



<div class="verbatim"><br />
sqrt(4.0&nbsp;+<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a:=3.0<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b:=1.0<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c:=a&nbsp;+&nbsp;b<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c<br />
&nbsp;&nbsp;&nbsp;&nbsp;)<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>2</mn><mo>.</mo><mn>8284271247</mn><mspace width="0.5 em" /><mn>461900976</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>



<p>Note that indentation is <span style="font-weight: bold;"> extremely</span> important. If the example above
had the pile starting at ``a:='' moved left by two spaces so that the
<span class="italic">a</span> was under the <span class="italic">(</span> of the first line then the interpreter would
signal an error. Furthermore if the closing parenthesis <span class="italic">)</span> is moved 
up to give
</p>



<div class="verbatim"><br />
sqrt(4.0&nbsp;+<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a:=3.0<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b:=1.0<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c:=a&nbsp;+&nbsp;b<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c)<br />
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;Line&nbsp;&nbsp;&nbsp;1:&nbsp;sqrt(4.0&nbsp;+<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;....A<br />
&nbsp;&nbsp;Error&nbsp;&nbsp;A:&nbsp;Missing&nbsp;mate.<br />
&nbsp;&nbsp;Line&nbsp;&nbsp;&nbsp;2:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a:=3.0<br />
&nbsp;&nbsp;Line&nbsp;&nbsp;&nbsp;3:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b:=1.0<br />
&nbsp;&nbsp;Line&nbsp;&nbsp;&nbsp;4:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c:=a&nbsp;+&nbsp;b<br />
&nbsp;&nbsp;Line&nbsp;&nbsp;&nbsp;5:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.........AB<br />
&nbsp;&nbsp;Error&nbsp;&nbsp;A:&nbsp;(from&nbsp;A&nbsp;up&nbsp;to&nbsp;B)&nbsp;Ignored.<br />
&nbsp;&nbsp;Error&nbsp;&nbsp;B:&nbsp;Improper&nbsp;syntax.<br />
&nbsp;&nbsp;Error&nbsp;&nbsp;B:&nbsp;syntax&nbsp;error&nbsp;at&nbsp;top&nbsp;level<br />
&nbsp;&nbsp;Error&nbsp;&nbsp;B:&nbsp;Possibly&nbsp;missing&nbsp;a&nbsp;)&nbsp;<br />
&nbsp;&nbsp;&nbsp;5&nbsp;error(s)&nbsp;parsing&nbsp;<br />
</div>


<p>then the parser will generate errors. If the parenthesis is shifted right 
by several spaces so that it is in line with the <span class="italic">c</span> thus:
</p>



<div class="verbatim"><br />
sqrt(4.0&nbsp;+<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a:=3.0<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b:=1.0<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c:=a&nbsp;+&nbsp;b<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br />
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;Line&nbsp;&nbsp;&nbsp;1:&nbsp;sqrt(4.0&nbsp;+<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;....A<br />
&nbsp;&nbsp;Error&nbsp;&nbsp;A:&nbsp;Missing&nbsp;mate.<br />
&nbsp;&nbsp;Line&nbsp;&nbsp;&nbsp;2:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a:=3.0<br />
&nbsp;&nbsp;Line&nbsp;&nbsp;&nbsp;3:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b:=1.0<br />
&nbsp;&nbsp;Line&nbsp;&nbsp;&nbsp;4:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c:=a&nbsp;+&nbsp;b<br />
&nbsp;&nbsp;Line&nbsp;&nbsp;&nbsp;5:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c<br />
&nbsp;&nbsp;Line&nbsp;&nbsp;&nbsp;6:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.........A<br />
&nbsp;&nbsp;Error&nbsp;&nbsp;A:&nbsp;(from&nbsp;A&nbsp;up&nbsp;to&nbsp;A)&nbsp;Ignored.<br />
&nbsp;&nbsp;Error&nbsp;&nbsp;A:&nbsp;Improper&nbsp;syntax.<br />
&nbsp;&nbsp;Error&nbsp;&nbsp;A:&nbsp;syntax&nbsp;error&nbsp;at&nbsp;top&nbsp;level<br />
&nbsp;&nbsp;Error&nbsp;&nbsp;A:&nbsp;Possibly&nbsp;missing&nbsp;a&nbsp;)&nbsp;<br />
&nbsp;&nbsp;&nbsp;5&nbsp;error(s)&nbsp;parsing&nbsp;<br />
</div>


<p>a similar error will be raised. Finally, the <span class="italic">)</span> must be indented by 
at least one space relative to the sqrt thus:
</p>



<div class="verbatim"><br />
sqrt(4.0&nbsp;+<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a:=3.0<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b:=1.0<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c:=a&nbsp;+&nbsp;b<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c<br />
&nbsp;)<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>2</mn><mo>.</mo><mn>8284271247</mn><mspace width="0.5 em" /><mn>461900976</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>


<p>or an error will be generated.
</p>


<p>It can be seen that great care needs to be taken when constructing input
files consisting of piles of expressions. It would seem prudent to add
one pile at a time and check if it is acceptable before adding more,
particularly if piles are nested. However, it should be pointed out that
the use of piles as values for functions is not very readable and so
perhaps the delicate nature of their interpretation should deter programmers
from using them in these situations. Using piles should really be restricted
to constructing functions, etc. and a small amount of rewriting can remove
the need to use them as arguments. For example, the previous block could
easily be implemented as:
</p>



<div class="verbatim"><br />
a:=3.0<br />
b:=1.0<br />
c:=a&nbsp;+&nbsp;b<br />
sqrt(4.0&nbsp;+&nbsp;c)<br />
</div>




<div class="verbatim"><br />
a:=3.0<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>3</mn><mo>.</mo><mn>0</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>





<div class="verbatim"><br />
b:=1.0<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>





<div class="verbatim"><br />
c:=a&nbsp;+&nbsp;b<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>4</mn><mo>.</mo><mn>0</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>





<div class="verbatim"><br />
sqrt(4.0&nbsp;+&nbsp;c)<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>2</mn><mo>.</mo><mn>8284271247</mn><mspace width="0.5 em" /><mn>461900976</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>



<p>which achieves the same result and is easier to understand. Note that this
is still a pile but it is not as fragile as the previous version.
</p>



</div>



<a name="subsec-0.7.3"/>
<div class="subsection"  id="subsec-0.7.3">
<h3 class="subsectitle">0.7.3  Functions</h3>


<p>Definitions of functions in FriCAS are quite simple providing two things
are observed. First, the type of the function must either be completely
specified or completely unspecified. Second, the body of the function is
assigned to the function identifier using the delayed assignment operator
<span class="italic">==</span>.
</p>


<p>To specify the type of something the ``:'' operator is used. Thus to define
a variable <span class="slant">x</span> to be of type <span class="teletype">Fraction Integer</span> we enter:
</p>



<div id="spadComm0-182" class="spadComm" >
<form id="formComm0-182" action="javascript:makeRequest('0-182');" >
<input id="comm0-182" type="text" class="command" style="width: 14em;" value="x : Fraction Integer" />
</form>
<span id="commSav0-182" class="commSav" >x : Fraction Integer</span>
<div id="mathAns0-182" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>For functions the method is the same except that the arguments are
placed in parentheses and the return type is placed after the symbol
<span class="italic"><span class="teletype">-></span></span>.  Some examples of function definitions taking zero, one,
two, or three arguments and returning a list of integers are:
</p>




<div id="spadComm0-183" class="spadComm" >
<form id="formComm0-183" action="javascript:makeRequest('0-183');" >
<input id="comm0-183" type="text" class="command" style="width: 15em;" value="f : () -> List Integer" />
</form>
<span id="commSav0-183" class="commSav" >f : () -> List Integer</span>
<div id="mathAns0-183" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm0-184" class="spadComm" >
<form id="formComm0-184" action="javascript:makeRequest('0-184');" >
<input id="comm0-184" type="text" class="command" style="width: 20em;" value="g : (Integer) -> List Integer" />
</form>
<span id="commSav0-184" class="commSav" >g : (Integer) -> List Integer</span>
<div id="mathAns0-184" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm0-185" class="spadComm" >
<form id="formComm0-185" action="javascript:makeRequest('0-185');" >
<input id="comm0-185" type="text" class="command" style="width: 26em;" value="h : (Integer, Integer) -> List Integer" />
</form>
<span id="commSav0-185" class="commSav" >h : (Integer, Integer) -> List Integer</span>
<div id="mathAns0-185" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm0-186" class="spadComm" >
<form id="formComm0-186" action="javascript:makeRequest('0-186');" >
<input id="comm0-186" type="text" class="command" style="width: 32em;" value="k : (Integer, Integer, Integer) -> List Integer" />
</form>
<span id="commSav0-186" class="commSav" >k : (Integer, Integer, Integer) -> List Integer</span>
<div id="mathAns0-186" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Now the actual function definitions might be:
</p>



<div id="spadComm0-187" class="spadComm" >
<form id="formComm0-187" action="javascript:makeRequest('0-187');" >
<input id="comm0-187" type="text" class="command" style="width: 10em;" value="f() == [&nbsp;]" />
</form>
<span id="commSav0-187" class="commSav" >f() == [&nbsp;]</span>
<div id="mathAns0-187" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm0-188" class="spadComm" >
<form id="formComm0-188" action="javascript:makeRequest('0-188');" >
<input id="comm0-188" type="text" class="command" style="width: 8em;" value="g(a) == [a]" />
</form>
<span id="commSav0-188" class="commSav" >g(a) == [a]</span>
<div id="mathAns0-188" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm0-189" class="spadComm" >
<form id="formComm0-189" action="javascript:makeRequest('0-189');" >
<input id="comm0-189" type="text" class="command" style="width: 10em;" value="h(a,b) == [a,b]" />
</form>
<span id="commSav0-189" class="commSav" >h(a,b) == [a,b]</span>
<div id="mathAns0-189" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm0-190" class="spadComm" >
<form id="formComm0-190" action="javascript:makeRequest('0-190');" >
<input id="comm0-190" type="text" class="command" style="width: 13em;" value="k(a,b,c) == [a,b,c]" />
</form>
<span id="commSav0-190" class="commSav" >k(a,b,c) == [a,b,c]</span>
<div id="mathAns0-190" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>with some invocations of these functions:
</p>



<div id="spadComm0-191" class="spadComm" >
<form id="formComm0-191" action="javascript:makeRequest('0-191');" >
<input id="comm0-191" type="text" class="command" style="width: 2em;" value="f()" />
</form>
<span id="commSav0-191" class="commSav" >f()</span>
<div id="mathAns0-191" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;f&nbsp;with&nbsp;type&nbsp;()&nbsp;-&gt;&nbsp;List&nbsp;Integer&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mspace width="0.5 em" /><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>





<div id="spadComm0-192" class="spadComm" >
<form id="formComm0-192" action="javascript:makeRequest('0-192');" >
<input id="comm0-192" type="text" class="command" style="width: 3em;" value="g(4)" />
</form>
<span id="commSav0-192" class="commSav" >g(4)</span>
<div id="mathAns0-192" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;g&nbsp;with&nbsp;type&nbsp;Integer&nbsp;-&gt;&nbsp;List&nbsp;Integer&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>4</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>





<div id="spadComm0-193" class="spadComm" >
<form id="formComm0-193" action="javascript:makeRequest('0-193');" >
<input id="comm0-193" type="text" class="command" style="width: 4em;" value="h(2,9)" />
</form>
<span id="commSav0-193" class="commSav" >h(2,9)</span>
<div id="mathAns0-193" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;h&nbsp;with&nbsp;type&nbsp;(Integer,Integer)&nbsp;-&gt;&nbsp;List&nbsp;Integer&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>2</mn><mo>,</mo><mn>9</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>





<div id="spadComm0-194" class="spadComm" >
<form id="formComm0-194" action="javascript:makeRequest('0-194');" >
<input id="comm0-194" type="text" class="command" style="width: 8em;" value="k(-3,42,100)" />
</form>
<span id="commSav0-194" class="commSav" >k(-3,42,100)</span>
<div id="mathAns0-194" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;k&nbsp;with&nbsp;type&nbsp;(Integer,Integer,Integer)&nbsp;-&gt;&nbsp;List&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mo>-</mo><mn>3</mn><mo>,</mo><mn>42</mn><mo>,</mo><mn>100</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>The value returned by a function is either the value of the last expression
evaluated or the result of a <span style="font-weight: bold;"> return</span> statement. For example, the
following are effectively the same:
</p>



<div id="spadComm0-195" class="spadComm" >
<form id="formComm0-195" action="javascript:makeRequest('0-195');" >
<input id="comm0-195" type="text" class="command" style="width: 15em;" value="p : Integer -> Integer" />
</form>
<span id="commSav0-195" class="commSav" >p : Integer -> Integer</span>
<div id="mathAns0-195" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm0-196" class="spadComm" >
<form id="formComm0-196" action="javascript:makeRequest('0-196');" >
<input id="comm0-196" type="text" class="command" style="width: 18em;" value="p x == (a:=1; b:=2; a+b+x)" />
</form>
<span id="commSav0-196" class="commSav" >p x == (a:=1; b:=2; a+b+x)</span>
<div id="mathAns0-196" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm0-197" class="spadComm" >
<form id="formComm0-197" action="javascript:makeRequest('0-197');" >
<input id="comm0-197" type="text" class="command" style="width: 23em;" value="p x == (a:=1; b:=2; return(a+b+x))" />
</form>
<span id="commSav0-197" class="commSav" >p x == (a:=1; b:=2; return(a+b+x))</span>
<div id="mathAns0-197" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Note that a block (pile) is assigned to the function identifier <span style="font-weight: bold;"> p</span> and
thus all the rules about blocks apply to function definitions. Also there was
only one argument so the parenthese are not needed.
</p>


<p>This is basically all that one needs to know about defining functions in 
FriCAS -- first specify the complete type and then assign a block to the
function name. The rest of this section is concerned with defining more 
complex blocks than those in this section and as a result function definitions
will crop up continually particularly since they are a good way of testing
examples. Since the block structure is more complex we will use the <span style="font-weight: bold;"> pile</span>
notation and thus have to use input files to read the piles.
</p>




</div>



<a name="subsec-0.7.4"/>
<div class="subsection"  id="subsec-0.7.4">
<h3 class="subsectitle">0.7.4  Choices</h3>


<p>Apart from the <span class="italic"><span class="teletype">=></span></span> operator that allows a block to exit before the end
FriCAS provides the standard <span style="font-weight: bold;"> if-then-else</span> construct. The general
syntax is:
</p>



<div class="center" style="text-align: center;">


<p>if <span class="slant">BooleanExpr</span> then <span class="slant">Expr1</span> else <span class="slant">Expr2</span>
</p>



</div>


<p>where <span class="italic">else <span class="slant">Expr2</span></span> can be omitted. If the expression <span class="slant">BooleanExpr</span>
evaluates to <span class="teletype">true</span> then <span class="slant">Expr1</span> is executed otherwise <span class="slant">Expr2</span>
(if present) will be executed. An example of piles and <span style="font-weight: bold;"> if-then-else</span> is:
(read from an input file)
</p>



<div class="verbatim"><br />
h&nbsp;:=&nbsp;2.0<br />
if&nbsp;h&nbsp;&gt;&nbsp;3.1&nbsp;then<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0<br />
&nbsp;&nbsp;&nbsp;else<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z:=&nbsp;cos(h)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max(x,0.5)<br />
</div>




<div class="verbatim"><br />
h&nbsp;:=&nbsp;2.0<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>2</mn><mo>.</mo><mn>0</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>





<div class="verbatim"><br />
if&nbsp;h&nbsp;&gt;&nbsp;3.1&nbsp;then<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0<br />
&nbsp;&nbsp;&nbsp;else<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z:=&nbsp;cos(h)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max(x,0.5)<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mi>x</mi></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Float
</div>



<p>Note the indentation -- the <span class="italic">else</span> must be indented relative to the <span class="italic">if</span>
otherwise it will generate an error (FriCAS will think there are two piles,
the second one beginning with <span class="italic">else</span>).
</p>


<p>Any expression that has type <span class="teletype">Boolean</span> can be used as <span class="teletype">BooleanExpr</span>
and the most common will be those involving the relational operators <span class="italic"> <math xmlns="&mathml;" mathsize="big"><mstyle><mo>&gt;</mo></mstyle></math></span>,
<span class="italic"> <math xmlns="&mathml;" mathsize="big"><mstyle><mo>&lt;</mo></mstyle></math></span>, and <span class="italic">=</span>. Usually the type of an expression involving the equality
operator <span class="italic">=</span> will be <span style="font-weight: bold;"> Boolean</span> but in those situations when it isn't
you may need to use the ``@'' operator to ensure that it is.
</p>




</div>



<a name="subsec-0.7.5"/>
<div class="subsection"  id="subsec-0.7.5">
<h3 class="subsectitle">0.7.5  Loops</h3>


<p>Loops in FriCAS are regarded as expressions containing another expression 
called the <span class="slant">loop body</span>. The loop body is executed zero or more times
depending on the kind of loop. Loops can be nested to any depth.
</p>



<a name="subsubsec-0.7.5.1"/>
<div class="subsubsection"  id="subsubsec-0.7.5.1">
<h3 class="subsubsectitle">0.7.5.1  The <span class="teletype">repeat</span> loop</h3>


<p>The simplest kind of loop provided by FriCAS is the <span style="font-weight: bold;"> repeat</span> loop. The 
general syntax of this is:
</p>
<div style="text-align: center">repeat  <span class="slant">loopBody</span></div>


<p>This will cause FriCAS to execute <span class="slant">loopBody</span> repeatedly until either a
<span style="font-weight: bold;"> break</span> or <span style="font-weight: bold;"> return</span> statement is encountered. If <span class="slant">loopBody</span>
contains neither of these statements then it will loop forever. The 
following piece of code will display the numbers from  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math> to  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>4</mn></mstyle></math>:
</p>



<div class="verbatim"><br />
i:=1<br />
repeat<br />
&nbsp;&nbsp;if&nbsp;i&nbsp;&gt;&nbsp;4&nbsp;then&nbsp;break<br />
&nbsp;&nbsp;output(i)<br />
&nbsp;&nbsp;i:=i+1<br />
</div>




<div class="verbatim"><br />
i:=1<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div class="verbatim"><br />
repeat<br />
&nbsp;&nbsp;if&nbsp;i&nbsp;&gt;&nbsp;4&nbsp;then&nbsp;break<br />
&nbsp;&nbsp;output(i)<br />
&nbsp;&nbsp;i:=i+1<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;1<br />
&nbsp;&nbsp;&nbsp;2<br />
&nbsp;&nbsp;&nbsp;3<br />
&nbsp;&nbsp;&nbsp;4<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>It was mentioned that loops will only be left when either a <span style="font-weight: bold;"> break</span> or
<span style="font-weight: bold;"> return</span> statement is encountered so why can't one use the <span class="italic"><span class="teletype">=></span></span> 
operator? The reason is that the <span class="italic"><span class="teletype">=></span></span> operator tells FriCAS to leave the
current block whereas <span style="font-weight: bold;"> break</span> leaves the current loop. The <span style="font-weight: bold;"> return</span>
statement leave the current function.
</p>


<p>To skip the rest of a loop body and continue the next iteration of the loop
use the <span style="font-weight: bold;"> iterate</span> statement (the -- starts a comment in FriCAS)
</p>



<div class="verbatim"><br />
i&nbsp;:=&nbsp;0<br />
repeat<br />
&nbsp;&nbsp;i&nbsp;:=&nbsp;i&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;if&nbsp;i&nbsp;&gt;&nbsp;6&nbsp;then&nbsp;break<br />
&nbsp;&nbsp;--&nbsp;Return&nbsp;to&nbsp;start&nbsp;if&nbsp;i&nbsp;is&nbsp;odd<br />
&nbsp;&nbsp;if&nbsp;odd?(i)&nbsp;then&nbsp;iterate<br />
&nbsp;&nbsp;output(i)<br />
</div>




<div class="verbatim"><br />
i&nbsp;:=&nbsp;0<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>0</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: NonNegativeInteger
</div>





<div class="verbatim"><br />
repeat<br />
&nbsp;&nbsp;i&nbsp;:=&nbsp;i&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;if&nbsp;i&nbsp;&gt;&nbsp;6&nbsp;then&nbsp;break<br />
&nbsp;&nbsp;--&nbsp;Return&nbsp;to&nbsp;start&nbsp;if&nbsp;i&nbsp;is&nbsp;odd<br />
&nbsp;&nbsp;if&nbsp;odd?(i)&nbsp;then&nbsp;iterate<br />
&nbsp;&nbsp;output(i)<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;2<br />
&nbsp;&nbsp;&nbsp;4<br />
&nbsp;&nbsp;&nbsp;6<br />
</div>




<div class="returnType">
Type: Void
</div>





</div>



<a name="subsubsec-0.7.5.2"/>
<div class="subsubsection"  id="subsubsec-0.7.5.2">
<h3 class="subsubsectitle">0.7.5.2  The <span class="teletype">while</span> loop</h3>


<p>The while statement extends the basic <span style="font-weight: bold;"> repeat</span> loop to place the control
of leaving the loop at the start rather than have it buried in the middle.
Since the body of the loop is still part of a <span style="font-weight: bold;"> repeat</span> loop, <span style="font-weight: bold;"> break</span>
and <span class="italic"><span class="teletype">=></span></span> work in the same way as in the previous section. The general
syntax of a <span style="font-weight: bold;"> while</span> loop is:
</p>



<div class="center" style="text-align: center;">


<p>while <span class="slant">BoolExpr</span> repeat <span class="slant">loopBody</span>
</p>



</div>


<p>As before, <span class="slant">BoolExpr</span> must be an expression of type <span style="font-weight: bold;"> Boolean</span>. Before
the body of the loop is executed <span class="slant">BoolExpr</span> is tested. If it evaluates to
<span class="teletype">true</span> then the loop body is entered otherwise the loop is terminated.
Multiple conditions can be applied using the logical operators such as 
<span style="font-weight: bold;"> and</span> or by using several <span style="font-weight: bold;"> while</span> statements before the <span style="font-weight: bold;"> repeat</span>.
</p>



<div class="verbatim"><br />
x:=1<br />
y:=1<br />
while&nbsp;x&nbsp;&lt;&nbsp;4&nbsp;and&nbsp;y&nbsp;&lt;&nbsp;10&nbsp;repeat<br />
&nbsp;&nbsp;output&nbsp;[x,y]<br />
&nbsp;&nbsp;x&nbsp;:=&nbsp;x&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;y&nbsp;:=&nbsp;y&nbsp;+&nbsp;2<br />
</div>




<div class="verbatim"><br />
x:=1<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div class="verbatim"><br />
y:=1<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div class="verbatim"><br />
while&nbsp;x&nbsp;&lt;&nbsp;4&nbsp;and&nbsp;y&nbsp;&lt;&nbsp;10&nbsp;repeat<br />
&nbsp;&nbsp;output&nbsp;[x,y]<br />
&nbsp;&nbsp;x&nbsp;:=&nbsp;x&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;y&nbsp;:=&nbsp;y&nbsp;+&nbsp;2<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;[1,1]<br />
&nbsp;&nbsp;&nbsp;[2,3]<br />
&nbsp;&nbsp;&nbsp;[3,5]<br />
</div>




<div class="returnType">
Type: Void
</div>





<div class="verbatim"><br />
x:=1<br />
y:=1<br />
while&nbsp;x&nbsp;&lt;&nbsp;4&nbsp;while&nbsp;y&nbsp;&lt;&nbsp;10&nbsp;repeat<br />
&nbsp;&nbsp;output&nbsp;[x,y]<br />
&nbsp;&nbsp;x&nbsp;:=&nbsp;x&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;y&nbsp;:=&nbsp;y&nbsp;+&nbsp;2<br />
</div>




<div class="verbatim"><br />
x:=1<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div class="verbatim"><br />
y:=1<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div class="verbatim"><br />
while&nbsp;x&nbsp;&lt;&nbsp;4&nbsp;while&nbsp;y&nbsp;&lt;&nbsp;10&nbsp;repeat<br />
&nbsp;&nbsp;output&nbsp;[x,y]<br />
&nbsp;&nbsp;x&nbsp;:=&nbsp;x&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;y&nbsp;:=&nbsp;y&nbsp;+&nbsp;2<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;[1,1]<br />
&nbsp;&nbsp;&nbsp;[2,3]<br />
&nbsp;&nbsp;&nbsp;[3,5]<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Note that the last example using two <span style="font-weight: bold;"> while</span> statements is <span class="slant">not</span> a
nested loop but the following one is:
</p>



<div class="verbatim"><br />
x:=1<br />
y:=1<br />
while&nbsp;x&nbsp;&lt;&nbsp;4&nbsp;repeat<br />
&nbsp;&nbsp;while&nbsp;y&nbsp;&lt;&nbsp;10&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;output&nbsp;[x,y]<br />
&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;:=&nbsp;x&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;:=&nbsp;y&nbsp;+&nbsp;2<br />
</div>




<div class="verbatim"><br />
x:=1<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div class="verbatim"><br />
y:=1<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div class="verbatim"><br />
while&nbsp;x&nbsp;&lt;&nbsp;4&nbsp;repeat<br />
&nbsp;&nbsp;while&nbsp;y&nbsp;&lt;&nbsp;10&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;output&nbsp;[x,y]<br />
&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;:=&nbsp;x&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;:=&nbsp;y&nbsp;+&nbsp;2<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;[1,1]<br />
&nbsp;&nbsp;&nbsp;[2,3]<br />
&nbsp;&nbsp;&nbsp;[3,5]<br />
&nbsp;&nbsp;&nbsp;[4,7]<br />
&nbsp;&nbsp;&nbsp;[5,9]<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Suppose we that, given a matrix of arbitrary size, find the position and
value of the first negative element by examining the matrix in row-major 
order:
</p>



<div class="verbatim"><br />
m&nbsp;:=&nbsp;matrix&nbsp;[&nbsp;[&nbsp;21,&nbsp;37,&nbsp;53,&nbsp;14&nbsp;],_<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;8,&nbsp;22,-24,&nbsp;16&nbsp;],_<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;2,&nbsp;10,&nbsp;15,&nbsp;14&nbsp;],_<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;26,&nbsp;33,&nbsp;55,-13&nbsp;]&nbsp;]<br />
<br />
lastrow&nbsp;:=&nbsp;nrows(m)<br />
lastcol&nbsp;:=&nbsp;ncols(m)<br />
r&nbsp;:=&nbsp;1<br />
while&nbsp;r&nbsp;&lt;=&nbsp;lastrow&nbsp;repeat<br />
&nbsp;&nbsp;c&nbsp;:=&nbsp;1&nbsp;--&nbsp;Index&nbsp;of&nbsp;first&nbsp;column<br />
&nbsp;&nbsp;while&nbsp;c&nbsp;&lt;=&nbsp;lastcol&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;elt(m,r,c)&nbsp;&lt;&nbsp;0&nbsp;then<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output&nbsp;[r,c,elt(m,r,c)]<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;:=&nbsp;lastrow<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break&nbsp;--&nbsp;Don't&nbsp;look&nbsp;any&nbsp;further<br />
&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;:=&nbsp;c&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;r&nbsp;:=&nbsp;r&nbsp;+&nbsp;1<br />
</div>




<div class="verbatim"><br />
m&nbsp;:=&nbsp;matrix&nbsp;[&nbsp;[&nbsp;21,&nbsp;37,&nbsp;53,&nbsp;14&nbsp;],_<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;8,&nbsp;22,-24,&nbsp;16&nbsp;],_<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;2,&nbsp;10,&nbsp;15,&nbsp;14&nbsp;],_<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;26,&nbsp;33,&nbsp;55,-13&nbsp;]&nbsp;]<br />
</div>

<p> 
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mtable><mtr><mtd><mn>21</mn></mtd><mtd><mn>37</mn></mtd><mtd><mn>53</mn></mtd><mtd><mn>14</mn></mtd></mtr><mtr><mtd><mn>8</mn></mtd><mtd><mn>22</mn></mtd><mtd><mo>-</mo><mn>24</mn></mtd><mtd><mn>16</mn></mtd></mtr><mtr><mtd><mn>2</mn></mtd><mtd><mn>10</mn></mtd><mtd><mn>15</mn></mtd><mtd><mn>14</mn></mtd></mtr><mtr><mtd><mn>26</mn></mtd><mtd><mn>33</mn></mtd><mtd><mn>55</mn></mtd><mtd><mo>-</mo><mn>13</mn></mtd></mtr></mtable><mo>]</mo></mrow></mstyle></math>
</p>



<div class="returnType">
Type: Matrix Integer
</div>





<div class="verbatim"><br />
lastrow&nbsp;:=&nbsp;nrows(m)<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>4</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div class="verbatim"><br />
lastcol&nbsp;:=&nbsp;ncols(m)<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>4</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div class="verbatim"><br />
r&nbsp;:=&nbsp;1<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div class="verbatim"><br />
while&nbsp;r&nbsp;&lt;=&nbsp;lastrow&nbsp;repeat<br />
&nbsp;&nbsp;c&nbsp;:=&nbsp;1&nbsp;--&nbsp;Index&nbsp;of&nbsp;first&nbsp;column<br />
&nbsp;&nbsp;while&nbsp;c&nbsp;&lt;=&nbsp;lastcol&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;elt(m,r,c)&nbsp;&lt;&nbsp;0&nbsp;then<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output&nbsp;[r,c,elt(m,r,c)]<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;:=&nbsp;lastrow<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break&nbsp;--&nbsp;Don't&nbsp;look&nbsp;any&nbsp;further<br />
&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;:=&nbsp;c&nbsp;+&nbsp;1<br />
&nbsp;&nbsp;r&nbsp;:=&nbsp;r&nbsp;+&nbsp;1<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;[2,3,-&nbsp;24]<br />
</div>




<div class="returnType">
Type: Void
</div>





</div>



<a name="subsubsec-0.7.5.3"/>
<div class="subsubsection"  id="subsubsec-0.7.5.3">
<h3 class="subsubsectitle">0.7.5.3  The <span class="teletype">for</span> loop</h3>


<p>The last loop statement of interest is the <span style="font-weight: bold;"> for</span> loop. There are two
ways of creating a <span style="font-weight: bold;"> for</span> loop. The first way uses either a list or
a segment:
</p>



<div class="center" style="text-align: center;">


<p>for <span class="slant">var</span> in <span class="slant">seg</span> repeat <span class="slant">loopBody</span><br/>
for <span class="slant">var</span> in <span class="slant">list</span> repeat <span class="slant">loopBody</span><br/>
</p>



</div>


<p>where <span class="slant">var</span> is an index variable which is iterated over the values in
<span class="slant">seg</span> or <span class="slant">list</span>. The value <span class="slant">seg</span> is a segment such as  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>1</mn><mo>&#x2026;</mo><mn>10</mn></mrow></mstyle></math>
or  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>1</mn><mo>&#x2026;</mo></mrow></mstyle></math> and <span class="slant">list</span> is a list of some type. For example:
</p>




<div class="verbatim"><br />
for&nbsp;i&nbsp;in&nbsp;1..10&nbsp;repeat<br />
&nbsp;&nbsp;~prime?(i)&nbsp;=&gt;&nbsp;iterate<br />
&nbsp;&nbsp;output(i)<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;2<br />
&nbsp;&nbsp;&nbsp;3<br />
&nbsp;&nbsp;&nbsp;5<br />
&nbsp;&nbsp;&nbsp;7<br />
</div>




<div class="returnType">
Type: Void
</div>





<div class="verbatim"><br />
for&nbsp;w&nbsp;in&nbsp;["This",&nbsp;"is",&nbsp;"your",&nbsp;"life!"]&nbsp;repeat<br />
&nbsp;&nbsp;output(w)<br />
</div>




<div class="verbatim"><br />
for&nbsp;w&nbsp;in&nbsp;["This",&nbsp;"is",&nbsp;"your",&nbsp;"life!"]&nbsp;repeat<br />
&nbsp;&nbsp;output(w)<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;This<br />
&nbsp;&nbsp;&nbsp;is<br />
&nbsp;&nbsp;&nbsp;your<br />
&nbsp;&nbsp;&nbsp;life!<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>The second form of the <span style="font-weight: bold;"> for</span> loop syntax includes a ``<span style="font-weight: bold;"> such that</span>''
clause which must be of type <span style="font-weight: bold;"> Boolean</span>:
</p>



<div class="center" style="text-align: center;">


<p>for <span class="slant">var</span>  in <span class="slant">seg</span> | <span class="slant">BoolExpr</span> repeat <span class="slant">loopBody</span><br />
for <span class="slant">var</span>  in <span class="slant">list</span> | <span class="slant">BoolExpr</span> repeat <span class="slant">loopBody</span>
</p>



</div>


<p>Some examples are:
</p>



<div class="verbatim"><br />
for&nbsp;i&nbsp;in&nbsp;1..10&nbsp;|&nbsp;prime?(i)&nbsp;repeat<br />
&nbsp;&nbsp;output(i)<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;2<br />
&nbsp;&nbsp;&nbsp;3<br />
&nbsp;&nbsp;&nbsp;5<br />
&nbsp;&nbsp;&nbsp;7<br />
</div>




<div class="returnType">
Type: Void
</div>




<div class="verbatim"><br />
for&nbsp;i&nbsp;in&nbsp;[1,2,3,4,5,6,7,8,9,10]&nbsp;|&nbsp;prime?(i)&nbsp;repeat<br />
&nbsp;&nbsp;output(i)<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;2<br />
&nbsp;&nbsp;&nbsp;3<br />
&nbsp;&nbsp;&nbsp;5<br />
&nbsp;&nbsp;&nbsp;7<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>You can also use a <span style="font-weight: bold;"> while</span> clause:
</p>



<div class="verbatim"><br />
for&nbsp;i&nbsp;in&nbsp;1..&nbsp;while&nbsp;i&nbsp;&lt;&nbsp;7&nbsp;repeat<br />
&nbsp;&nbsp;if&nbsp;even?(i)&nbsp;then&nbsp;output(i)<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;2<br />
&nbsp;&nbsp;&nbsp;4<br />
&nbsp;&nbsp;&nbsp;6<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Using the ``<span style="font-weight: bold;"> such that</span>'' clause makes this appear simpler:
</p>




<div class="verbatim"><br />
for&nbsp;i&nbsp;in&nbsp;1..&nbsp;|&nbsp;even?(i)&nbsp;while&nbsp;i&nbsp;&lt;&nbsp;7&nbsp;repeat<br />
&nbsp;&nbsp;output(i)<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;2<br />
&nbsp;&nbsp;&nbsp;4<br />
&nbsp;&nbsp;&nbsp;6<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>You can use multiple <span style="font-weight: bold;"> for</span> clauses to iterate over several sequences
in parallel:
</p>



<div class="verbatim"><br />
for&nbsp;a&nbsp;in&nbsp;1..4&nbsp;for&nbsp;b&nbsp;in&nbsp;5..8&nbsp;repeat<br />
&nbsp;&nbsp;output&nbsp;[a,b]<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;[1,5]<br />
&nbsp;&nbsp;&nbsp;[2,6]<br />
&nbsp;&nbsp;&nbsp;[3,7]<br />
&nbsp;&nbsp;&nbsp;[4,8]<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>As a general point it should be noted that any symbols referred to in the
``<span style="font-weight: bold;"> such that</span>'' and <span style="font-weight: bold;"> while</span> clauses must be pre-defined. This 
either means that the symbols must have been defined in an outer level
(e.g. in an enclosing loop) or in a <span style="font-weight: bold;"> for</span> clause appearing before the
``<span style="font-weight: bold;"> such that</span>'' or <span style="font-weight: bold;"> while</span>. For example:
</p>



<div class="verbatim"><br />
for&nbsp;a&nbsp;in&nbsp;1..4&nbsp;repeat<br />
&nbsp;&nbsp;for&nbsp;b&nbsp;in&nbsp;7..9&nbsp;|&nbsp;prime?(a+b)&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;output&nbsp;[a,b,a+b]<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;[2,9,11]<br />
&nbsp;&nbsp;&nbsp;[3,8,11]<br />
&nbsp;&nbsp;&nbsp;[4,7,11]<br />
&nbsp;&nbsp;&nbsp;[4,9,13]<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Finally, the <span style="font-weight: bold;"> for</span> statement has a <span style="font-weight: bold;"> by</span> clause to specify the
step size. This makes it possible to iterate over the segment in
reverse order:
</p>




<div class="verbatim"><br />
for&nbsp;a&nbsp;in&nbsp;1..4&nbsp;for&nbsp;b&nbsp;in&nbsp;8..5&nbsp;by&nbsp;-1&nbsp;repeat<br />
&nbsp;&nbsp;output&nbsp;[a,b]<br />
&nbsp;<br />
&nbsp;&nbsp;&nbsp;[1,8]<br />
&nbsp;&nbsp;&nbsp;[2,7]<br />
&nbsp;&nbsp;&nbsp;[3,6]<br />
&nbsp;&nbsp;&nbsp;[4,5]<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Note that without the <span class="italic">by -1</span> the segment 8..5 is empty so there is
nothing to iterate over and the loop exits immediately.
</p>




</div>




</div>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-0.6.xhtml" style="margin-right: 10px;">Previous Section 0.6 Data Structures in FriCAS</a><a href="section-1.0.xhtml" style="margin-right: 10px;">Next Section 1.0 An Overview of FriCAS</a><a href="book-index.xhtml">Book Index</a></body>
</html>