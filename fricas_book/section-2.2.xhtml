<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section2.2</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-2.1.xhtml" style="margin-right: 10px;">Previous Section 2.1 The Basic Idea</a><a href="section-2.3.xhtml" style="margin-right: 10px;">Next Section 2.3 Declarations</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-2.2">
<h2 class="sectiontitle">2.2  Writing Types and Modes</h2>


<a name="ugTypesWriting" class="label"/>


<p>We have already seen in the last section <a href="section-2.1.xhtml#ugTypesBasic" class="ref" >ugTypesBasic</a> several examples of types.  Most of these
examples had either no arguments (for example, <span class="teletype">Integer</span>) or one
argument (for example, <span class="teletype">Polynomial (Integer)</span>).  In this section
we give details about writing arbitrary types.  We then define modes
and discuss how to write them.  We conclude the section with a
discussion on constructor abbreviations.
</p>


<p>When might you need to write a type or mode?  You need to do so when
you declare variables.
</p>



<div id="spadComm2-18" class="spadComm" >
<form id="formComm2-18" action="javascript:makeRequest('2-18');" >
<input id="comm2-18" type="text" class="command" style="width: 13em;" value="a : PositiveInteger" />
</form>
<span id="commSav2-18" class="commSav" >a : PositiveInteger</span>
<div id="mathAns2-18" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>You need to do so when you declare functions 
(See Section <a href="section-2.3.xhtml#ugTypesDeclare" class="ref" >ugTypesDeclare</a> ),
</p>



<div id="spadComm2-19" class="spadComm" >
<form id="formComm2-19" action="javascript:makeRequest('2-19');" >
<input id="comm2-19" type="text" class="command" style="width: 14em;" value="f : Integer -> String" />
</form>
<span id="commSav2-19" class="commSav" >f : Integer -> String</span>
<div id="mathAns2-19" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>You need to do so when you convert an object from one type to another
(See Section <a href="section-2.7.xhtml#ugTypesConvert" class="ref" >ugTypesConvert</a> ).
</p>



<div id="spadComm2-20" class="spadComm" >
<form id="formComm2-20" action="javascript:makeRequest('2-20');" >
<input id="comm2-20" type="text" class="command" style="width: 20em;" value="factor(2 :: Complex(Integer))" />
</form>
<span id="commSav2-20" class="commSav" >factor(2 :: Complex(Integer))</span>
<div id="mathAns2-20" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mrow><mi>i</mi><mo></mo><mrow><msup><mrow><mo>(</mo><mn>1</mn><mo>+</mo><mi>i</mi><mo>)</mo></mrow><mn>2</mn></msup></mrow></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Factored Complex Integer
</div>





<div id="spadComm2-21" class="spadComm" >
<form id="formComm2-21" action="javascript:makeRequest('2-21');" >
<input id="comm2-21" type="text" class="command" style="width: 11em;" value="(2 = 3) $Integer" />
</form>
<span id="commSav2-21" class="commSav" >(2 = 3) $Integer</span>
<div id="mathAns2-21" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>You need to do so when you give computation target type information
(See Section <a href="section-2.9.xhtml#ugTypesPkgCall" class="ref" >ugTypesPkgCall</a> ).
</p>



<div id="spadComm2-22" class="spadComm" >
<form id="formComm2-22" action="javascript:makeRequest('2-22');" >
<input id="comm2-22" type="text" class="command" style="width: 10em;" value="(2 = 3)@Boolean" />
</form>
<span id="commSav2-22" class="commSav" >(2 = 3)@Boolean</span>
<div id="mathAns2-22" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>




<a name="subsec-2.2.1"/>
<div class="subsection"  id="subsec-2.2.1">
<h3 class="subsectitle">2.2.1  Types with No Arguments</h3>


<a name="ugTypesWritingZero" class="label"/>


<p>A constructor with no arguments can be written either
<span class="index">type:using parentheses</span><a name="chapter-2-15"/> with or without
<span class="index">parentheses:using with types</span><a name="chapter-2-16"/> trailing opening and closing
parentheses <span class="italic"><span class="teletype">()</span></span>.
</p>




<div class="center" style="text-align: center;">


<p><span class="teletype">Boolean()</span> is the same as <span class="teletype">Boolean</span> <br/>
<span class="teletype">Integer()</span> is the same as <span class="teletype">Integer</span> <br/>
<span class="teletype">String()</span> is the same as <span class="teletype">String</span> <br/>
<span class="teletype">Void()</span> is the same as <span class="teletype">Void</span> 
</p>



</div>



<p>It is customary to omit the parentheses.
</p>




</div>



<a name="subsec-2.2.2"/>
<div class="subsection"  id="subsec-2.2.2">
<h3 class="subsectitle">2.2.2  Types with One Argument</h3>


<a name="ugTypesWritingOne" class="label"/>


<p>A constructor with one argument can frequently be 
<span class="index">type:using parentheses</span><a name="chapter-2-17"/> written with no 
<span class="index">parentheses:using with types</span><a name="chapter-2-18"/> parentheses.  Types nest from 
right to left so that <span class="teletype">Complex Fraction Polynomial Integer</span> 
is the same as <span class="teletype">Complex (Fraction (Polynomial (Integer)))</span>.  
You need to use parentheses to force the application of a constructor 
to the correct argument, but you need not use any more than is necessary 
to remove ambiguities.
</p>


<p>Here are some guidelines for using parentheses (they are possibly slightly
more restrictive than they need to be).
</p>


<p>If the argument is an expression like <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>2</mn><mo>+</mo><mn>3</mn></mrow></mstyle></math>
then you must enclose the argument in parentheses.
</p>



<div id="spadComm2-23" class="spadComm" >
<form id="formComm2-23" action="javascript:makeRequest('2-23');" >
<input id="comm2-23" type="text" class="command" style="width: 14em;" value="e : PrimeField(2 + 3)" />
</form>
<span id="commSav2-23" class="commSav" >e : PrimeField(2 + 3)</span>
<div id="mathAns2-23" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>If the type is to be used with package calling
then you must enclose the argument in parentheses.
</p>



<div id="spadComm2-24" class="spadComm" >
<form id="formComm2-24" action="javascript:makeRequest('2-24');" >
<input id="comm2-24" type="text" class="command" style="width: 21em;" value="content(2) $Polynomial(Integer)" />
</form>
<span id="commSav2-24" class="commSav" >content(2) $Polynomial(Integer)</span>
<div id="mathAns2-24" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Integer
</div>



<p>Alternatively, you can write the type without parentheses
then enclose the whole type expression with parentheses.
</p>



<div id="spadComm2-25" class="spadComm" >
<form id="formComm2-25" action="javascript:makeRequest('2-25');" >
<input id="comm2-25" type="text" class="command" style="width: 33em;" value="content(2) $(Polynomial Complex Fraction Integer)" />
</form>
<span id="commSav2-25" class="commSav" >content(2) $(Polynomial Complex Fraction Integer)</span>
<div id="mathAns2-25" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Complex Fraction Integer
</div>



<p>If you supply computation target type information 
(See Section <a href="section-2.9.xhtml#ugTypesPkgCall" class="ref" >ugTypesPkgCall</a> ) 
then you should enclose the argument in parentheses.
</p>



<div id="spadComm2-26" class="spadComm" >
<form id="formComm2-26" action="javascript:makeRequest('2-26');" >
<input id="comm2-26" type="text" class="command" style="width: 24em;" value="(2/3)@Fraction(Polynomial(Integer))" />
</form>
<span id="commSav2-26" class="commSav" >(2/3)@Fraction(Polynomial(Integer))</span>
<div id="mathAns2-26" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mfrac><mn>2</mn><mn>3</mn></mfrac></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Polynomial Integer
</div>



<p>If the type itself has parentheses around it and we are not in the
case of the first example above, then the parentheses can usually be
omitted.
</p>



<div id="spadComm2-27" class="spadComm" >
<form id="formComm2-27" action="javascript:makeRequest('2-27');" >
<input id="comm2-27" type="text" class="command" style="width: 23em;" value="(2/3)@Fraction(Polynomial Integer)" />
</form>
<span id="commSav2-27" class="commSav" >(2/3)@Fraction(Polynomial Integer)</span>
<div id="mathAns2-27" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mfrac><mn>2</mn><mn>3</mn></mfrac></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Polynomial Integer
</div>



<p>If the type is used in a declaration and the argument is a single-word
type, integer or symbol, then the parentheses can usually be omitted.
</p>



<div id="spadComm2-28" class="spadComm" >
<form id="formComm2-28" action="javascript:makeRequest('2-28');" >
<input id="comm2-28" type="text" class="command" style="width: 24em;" value="(d,f,g) : Complex Polynomial Integer" />
</form>
<span id="commSav2-28" class="commSav" >(d,f,g) : Complex Polynomial Integer</span>
<div id="mathAns2-28" ></div>
</div>




<div class="returnType">
Type: Void
</div>





</div>



<a name="subsec-2.2.3"/>
<div class="subsection"  id="subsec-2.2.3">
<h3 class="subsectitle">2.2.3  Types with More Than One Argument</h3>


<a name="ugTypesWritingMore" class="label"/>


<p>If a constructor <span class="index">type:using parentheses</span><a name="chapter-2-19"/> has more than
<span class="index">parentheses:using with types</span><a name="chapter-2-20"/> one argument, you must use
parentheses.  Some examples are 
</p>



<p>
<span class="teletype">UnivariatePolynomial(x, Float)</span>
<br/>
<span class="teletype">MultivariatePolynomial([z,w,r], Complex Float)</span> 
<br/>
<span class="teletype">SquareMatrix(3, Integer)</span> 
<br/>
<span class="teletype">FactoredFunctions2(Integer,Fraction Integer)</span> 
</p>




</div>



<a name="subsec-2.2.4"/>
<div class="subsection"  id="subsec-2.2.4">
<h3 class="subsectitle">2.2.4  Modes</h3>


<a name="ugTypesWritingModes" class="label"/>


<p>A <span class="italic">mode</span> is a type that possibly is a question mark (<span class="teletype">?</span>) or
contains one in an argument position.  For example, the following are
all modes.<br/>
</p>


<p><span class="teletype">?</span> 
</p>


<p><span class="teletype">Polynomial ?</span> 
</p>


<p><span class="teletype">Matrix Polynomial ?</span> 
</p>


<p><span class="teletype">SquareMatrix(3,?)</span> 
</p>


<p><span class="teletype">Integer</span> 
</p>


<p><span class="teletype">OneDimensionalArray(Float)</span>
</p>


<p>As is evident from these examples, a mode is a type with a part that
is not specified (indicated by a question mark).  Only one <span class="italic"><span class="teletype">?</span></span> is
allowed per mode and it must appear in the most deeply nested argument
that is a type. Thus <span class="teletype">?(Integer)</span>, <span class="teletype">Matrix(? (Polynomial))</span>,
<span class="teletype">SquareMatrix(?, Integer)</span> (it requires a numeric argument)
and <span class="teletype">SquareMatrix(?, ?)</span> are all
invalid.  The question mark must take the place of a domain, not data.
This rules out, for example, the two <span class="teletype">SquareMatrix</span> expressions.
</p>


<p>Modes can be used for declarations (See Section <a href="section-2.3.xhtml#ugTypesDeclare" class="ref" >ugTypesDeclare</a>
) and conversions (Section
<a href="section-2.7.xhtml#ugTypesConvert" class="ref" >ugTypesConvert</a> ).  However, you
cannot use a mode for package calling or giving target type information.
</p>




</div>



<a name="subsec-2.2.5"/>
<div class="subsection"  id="subsec-2.2.5">
<h3 class="subsectitle">2.2.5  Abbreviations</h3>


<a name="ugTypesWritingAbbr" class="label"/>


<p>Every constructor has an abbreviation that
<span class="index">abbreviation:constructor</span><a name="chapter-2-21"/> you can freely
<span class="index">constructor:abbreviation</span><a name="chapter-2-22"/> substitute for the constructor name.
In some cases, the abbreviation is nothing more than the capitalized
version of the constructor name.
</p>




<div class="boxed2">


<div class="boxed">




<p>Aside from allowing types to be written more concisely, abbreviations
are used by FriCAS to name various system files for constructors (such
as library filenames, test input files and example files).  Here are
some common abbreviations.
</p>




<div class="center" style="text-align: center;">


<p><table class="begintabular">
<tr><td><span class="teletype">COMPLEX</span>   abbreviates <span class="teletype">Complex</span>             </td><td>
<span class="teletype">DFLOAT</span>    abbreviates <span class="teletype">DoubleFloat</span>         </td></tr>
<tr><td><span class="teletype">EXPR</span>      abbreviates <span class="teletype">Expression</span>          </td><td>
<span class="teletype">FLOAT</span>     abbreviates <span class="teletype">Float</span>               </td></tr>
<tr><td><span class="teletype">FRAC</span>      abbreviates <span class="teletype">Fraction</span>            </td><td>
<span class="teletype">INT</span>       abbreviates <span class="teletype">Integer</span>             </td></tr>
<tr><td><span class="teletype">MATRIX</span>    abbreviates <span class="teletype">Matrix</span>              </td><td>
<span class="teletype">NNI</span>       abbreviates <span class="teletype">NonNegativeInteger</span>  </td></tr>
<tr><td><span class="teletype">PI</span>        abbreviates <span class="teletype">PositiveInteger</span>     </td><td>
<span class="teletype">POLY</span>      abbreviates <span class="teletype">Polynomial</span>          </td></tr>
<tr><td><span class="teletype">STRING</span>    abbreviates <span class="teletype">String</span>              </td><td>
<span class="teletype">UP</span>        abbreviates <span class="teletype">UnivariatePolynomial</span></td></tr>
</table>
</p>



</div>





</div>
</div>



<p>You can combine both full constructor names and abbreviations in a
type expression.  Here are some types using abbreviations.
</p>




<div class="center" style="text-align: center;">


<p><table class="begintabular">
<tr><td><span class="teletype">POLY INT</span> </td><td> is the same as </td><td> <span class="teletype">Polynomial(INT)</span> </td></tr>
<tr><td><span class="teletype">POLY(Integer)</span> </td><td> is the same as </td><td> <span class="teletype">Polynomial(Integer)</span> </td></tr>
<tr><td><span class="teletype">POLY(Integer)</span> </td><td> is the same as </td><td> <span class="teletype">Polynomial(INT)</span> </td></tr>
<tr><td><span class="teletype">FRAC(COMPLEX(INT))</span> </td><td> is the same as </td><td> <span class="teletype">Fraction Complex Integer</span> </td></tr>
<tr><td><span class="teletype">FRAC(COMPLEX(INT))</span> </td><td> is the same as </td><td> <span class="teletype">FRAC(Complex Integer)</span> </td></tr>
</table>
</p>



</div>



<p>There are several ways of finding the names of constructors and their
abbreviations.  For a specific constructor, use <span class="teletype">)abbreviation
query</span>.  <span class="index">abbreviation</span><a name="chapter-2-23"/> You can also use the <span class="teletype">)what</span> system
command to see the names and abbreviations of constructors.
<span class="index">what</span><a name="chapter-2-24"/> For more information about <span class="teletype">)what</span>, see
<a href="ugSysCmdwhat" class="ref" >ugSysCmdwhat</a> .
</p>


<p><span class="teletype">)abbreviation query</span> can be abbreviated (no pun intended) to 
<span class="teletype">)abb q</span>.
</p>



<div id="spadComm2-29" class="spadComm" >
<form id="formComm2-29" action="javascript:makeRequest('2-29');" >
<input id="comm2-29" type="text" class="command" style="width: 10em;" value=")abb q Integer" />
</form>
<span id="commSav2-29" class="commSav" >)abb q Integer</span>
<div id="mathAns2-29" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;INT&nbsp;abbreviates&nbsp;domain&nbsp;Integer&nbsp;<br />
</div>



<p>The <span class="teletype">)abbreviation query</span> command lists the constructor name if
you give the abbreviation.  Issue <span class="teletype">)abb q</span> if you want to see the
names and abbreviations of all FriCAS constructors.  
</p>



<div id="spadComm2-30" class="spadComm" >
<form id="formComm2-30" action="javascript:makeRequest('2-30');" >
<input id="comm2-30" type="text" class="command" style="width: 7em;" value=")abb q DMP" />
</form>
<span id="commSav2-30" class="commSav" >)abb q DMP</span>
<div id="mathAns2-30" ></div>
</div>

<p> 
</p>



<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;DMP&nbsp;abbreviates&nbsp;domain&nbsp;DistributedMultivariatePolynomial&nbsp;<br />
</div>



<p>Issue this to see all packages whose
names contain the string <span class="italic">ode</span>.  <span class="index">what packages</span><a name="chapter-2-25"/>
</p>



<div id="spadComm2-31" class="spadComm" >
<form id="formComm2-31" action="javascript:makeRequest('2-31');" >
<input id="comm2-31" type="text" class="command" style="width: 12em;" value=")what packages ode" />
</form>
<span id="commSav2-31" class="commSav" >)what packages ode</span>
<div id="mathAns2-31" ></div>
</div>




<div class="verbatim"><br />
----------------------&nbsp;Packages&nbsp;-----------------------<br />
<br />
Packages&nbsp;with&nbsp;names&nbsp;matching&nbsp;patterns:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ode&nbsp;<br />
<br />
&nbsp;EXPRODE&nbsp;&nbsp;ExpressionSpaceODESolver&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;FCPAK1&nbsp;&nbsp;&nbsp;FortranCodePackage1<br />
&nbsp;GRAY&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GrayCode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;LODEEF&nbsp;&nbsp;&nbsp;ElementaryFunctionLODESolver<br />
&nbsp;NODE1&nbsp;&nbsp;&nbsp;&nbsp;NonLinearFirstOrderODESolver&nbsp;<br />
&nbsp;ODECONST&nbsp;ConstantLODE<br />
&nbsp;ODEEF&nbsp;&nbsp;&nbsp;&nbsp;ElementaryFunctionODESolver&nbsp;&nbsp;<br />
&nbsp;ODEINT&nbsp;&nbsp;&nbsp;ODEIntegration<br />
&nbsp;ODEPAL&nbsp;&nbsp;&nbsp;PureAlgebraicLODE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;ODERAT&nbsp;&nbsp;&nbsp;RationalLODE<br />
&nbsp;ODERED&nbsp;&nbsp;&nbsp;ReduceLODE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;ODESYS&nbsp;&nbsp;&nbsp;SystemODESolver<br />
&nbsp;ODETOOLS&nbsp;ODETools<br />
&nbsp;UTSODE&nbsp;&nbsp;&nbsp;UnivariateTaylorSeriesODESolver<br />
&nbsp;UTSODETL&nbsp;UTSodetools<br />
</div>





</div>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-2.1.xhtml" style="margin-right: 10px;">Previous Section 2.1 The Basic Idea</a><a href="section-2.3.xhtml" style="margin-right: 10px;">Next Section 2.3 Declarations</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>