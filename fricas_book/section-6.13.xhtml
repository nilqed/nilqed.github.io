<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section6.13</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-6.12.xhtml" style="margin-right: 10px;">Previous Section 6.12 Caching Previously Computed Results</a><a href="section-6.14.xhtml" style="margin-right: 10px;">Next Section 6.14 Making Functions from Objects</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-6.13">
<h2 class="sectiontitle">6.13  Recurrence Relations</h2>


<a name="ugUserRecur" class="label"/>


<p>One of the most useful classes of function are those defined via a
<span class="italic">recurrence relation.</span>  A <span class="italic">recurrence relation</span> makes each
successive <span class="index">recurrence relation</span><a name="chapter-6-33"/> value depend on some or all of
the previous values.  A simple example is the ordinary <span class="italic">factorial</span> function:
</p>



<div class="verbatim"><br />
fact(0)&nbsp;==&nbsp;1<br />
fact(n&nbsp;|&nbsp;n&nbsp;&gt;&nbsp;0)&nbsp;==&nbsp;n&nbsp;*&nbsp;fact(n-1)<br />
</div>



<p>The value of <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>fact</mi><mo>(</mo><mn>10</mn><mo>)</mo></mrow></mstyle></math> depends on the value of <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>fact</mi><mo>(</mo><mn>9</mn><mo>)</mo></mrow></mstyle></math>, <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>fact</mi><mo>(</mo><mn>9</mn><mo>)</mo></mrow></mstyle></math>
on <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>fact</mi><mo>(</mo><mn>8</mn><mo>)</mo></mrow></mstyle></math>, and so on.  Because it depends on only one previous
value, it is usually called a <span class="italic">first order recurrence relation.</span>
You can easily imagine a function based on two, three or more previous
values.  The Fibonacci numbers are probably the most famous function
defined by a <span class="index">Fibonacci numbers</span><a name="chapter-6-34"/> second order recurrence relation.
</p>


<p>The library function <span style="font-weight: bold;"> fibonacci</span> computes Fibonacci numbers.
It is obviously optimized for speed.
</p>



<div id="spadComm6-98" class="spadComm" >
<form id="formComm6-98" action="javascript:makeRequest('6-98');" >
<input id="comm6-98" type="text" class="command" style="width: 18em;" value="[fibonacci(i) for i in 0..]" />
</form>
<span id="commSav6-98" class="commSav" >[fibonacci(i) for i in 0..]</span>
<div id="mathAns6-98" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>0</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>13</mn><mo>,</mo><mn>21</mn><mo>,</mo><mn>34</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Integer
</div>



<p>Define the Fibonacci numbers ourselves using a piece-wise definition.
</p>



<div id="spadComm6-99" class="spadComm" >
<form id="formComm6-99" action="javascript:makeRequest('6-99');" >
<input id="comm6-99" type="text" class="command" style="width: 8em;" value="fib(1) == 1" />
</form>
<span id="commSav6-99" class="commSav" >fib(1) == 1</span>
<div id="mathAns6-99" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm6-100" class="spadComm" >
<form id="formComm6-100" action="javascript:makeRequest('6-100');" >
<input id="comm6-100" type="text" class="command" style="width: 8em;" value="fib(2) == 1" />
</form>
<span id="commSav6-100" class="commSav" >fib(2) == 1</span>
<div id="mathAns6-100" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm6-101" class="spadComm" >
<form id="formComm6-101" action="javascript:makeRequest('6-101');" >
<input id="comm6-101" type="text" class="command" style="width: 20em;" value="fib(n) == fib(n-1) + fib(n-2)" />
</form>
<span id="commSav6-101" class="commSav" >fib(n) == fib(n-1) + fib(n-2)</span>
<div id="mathAns6-101" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>As defined, this recurrence relation is obviously doubly-recursive.
To compute <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>fib</mi><mo>(</mo><mn>10</mn><mo>)</mo></mrow></mstyle></math>, we need to compute <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>fib</mi><mo>(</mo><mn>9</mn><mo>)</mo></mrow></mstyle></math> and <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>fib</mi><mo>(</mo><mn>8</mn><mo>)</mo></mrow></mstyle></math>.  And
to <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>fib</mi><mo>(</mo><mn>9</mn><mo>)</mo></mrow></mstyle></math>, we need to compute <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>fib</mi><mo>(</mo><mn>8</mn><mo>)</mo></mrow></mstyle></math> and <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>fib</mi><mo>(</mo><mn>7</mn><mo>)</mo></mrow></mstyle></math>.  And so on.  It
seems that to compute <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>fib</mi><mo>(</mo><mn>10</mn><mo>)</mo></mrow></mstyle></math> we need to compute <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>fib</mi><mo>(</mo><mn>9</mn><mo>)</mo></mrow></mstyle></math> once,
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>fib</mi><mo>(</mo><mn>8</mn><mo>)</mo></mrow></mstyle></math> twice, <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>fib</mi><mo>(</mo><mn>7</mn><mo>)</mo></mrow></mstyle></math> three times.  Look familiar?  The number of
function calls needed to compute <span class="italic">any</span> second order recurrence
relation in the obvious way is exactly <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>fib</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow></mstyle></math>.  These numbers grow!
For example, if FriCAS actually did this, then <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>fib</mi><mo>(</mo><mn>500</mn><mo>)</mo></mrow></mstyle></math> requires more
than <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mn>10</mn><mn>104</mn></msup></mrow></mstyle></math> function calls.  And, given all
this, our definition of <span style="font-weight: bold;"> fib</span> obviously could not be used to
calculate the five-hundredth Fibonacci number.
</p>


<p>Let's try it anyway.
</p>



<div id="spadComm6-102" class="spadComm" >
<form id="formComm6-102" action="javascript:makeRequest('6-102');" >
<input id="comm6-102" type="text" class="command" style="width: 6em;" value="fib(500)" />
</form>
<span id="commSav6-102" class="commSav" >fib(500)</span>
<div id="mathAns6-102" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;fib&nbsp;with&nbsp;type&nbsp;Integer&nbsp;-&gt;&nbsp;PositiveInteger&nbsp;<br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;fib&nbsp;as&nbsp;a&nbsp;recurrence&nbsp;relation.<br />
<br />
13942322456169788013972438287040728395007025658769730726410_<br />
8962948325571622863290691557658876222521294125<br />
</div>





<div class="returnType">
Type: PositiveInteger
</div>



<p>Since this takes a short time to compute, it obviously didn't do as
many as <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mn>10</mn><mn>104</mn></msup></mrow></mstyle></math> operations!  By default, FriCAS transforms any
recurrence relation it recognizes into an iteration.  Iterations are
efficient.  To compute the value of the <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>-th term of a recurrence
relation using an iteration requires only <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> function calls. Note
that if you compare the speed of our <span style="font-weight: bold;"> fib</span> function to the library
function, our version is still slower.  This is because the library
<span class="spadfunFrom" >fibonacci</span><span class="index">fibonacci</span><a name="chapter-6-35"/><span class="index">IntegerNumberTheoryFunctions</span><a name="chapter-6-36"/> uses a
<span class="italic">powering algorithm</span> with a computing time proportional to
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mo>log</mo><mn>3</mn></msup><mo>(</mo><mi>n</mi><mo>)</mo></mrow></mstyle></math> to compute <span class="teletype">fibonacci(n)</span>.
</p>


<p>To turn off this special recurrence relation compilation, issue
<span class="index">set function recurrence</span><a name="chapter-6-37"/>
</p>



<div class="verbatim"><br />
)set&nbsp;functions&nbsp;recurrence&nbsp;off<br />
</div>


<p>To turn it back on, substitute <span class="italic"><span class="teletype">on</span></span> for <span class="italic"><span class="teletype">off</span></span>.
</p>


<p>The transformations that FriCAS uses for <span style="font-weight: bold;"> fib</span> caches the last two
values. For a more general <math xmlns="&mathml;" mathsize="big"><mstyle><mi>k</mi></mstyle></math>-th order recurrence relation, FriCAS
caches the last <math xmlns="&mathml;" mathsize="big"><mstyle><mi>k</mi></mstyle></math> values.  If, after computing a value for <span style="font-weight: bold;">
fib</span>, you ask for some larger value, FriCAS picks up the cached values
and continues computing from there.  See <a href="section-6.16.xhtml#ugUserFreeLocal" class="ref" >ugUserFreeLocal</a>  for an example of a function definition
that has this same behavior.  Also see <a href="section-6.12.xhtml#ugUserCache" class="ref" >ugUserCache</a>  for a more general discussion of how you
can cache function values.
</p>


<p>Recurrence relations can be used for defining recurrence relations
involving polynomials, rational functions, or anything you like.
Here we compute the infinite stream of Legendre polynomials.
</p>


<p>The Legendre polynomial of degree <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>0</mn><mo>.</mo></mrow></mstyle></math>
</p>



<div id="spadComm6-103" class="spadComm" >
<form id="formComm6-103" action="javascript:makeRequest('6-103');" >
<input id="comm6-103" type="text" class="command" style="width: 6em;" value="p(0) == 1" />
</form>
<span id="commSav6-103" class="commSav" >p(0) == 1</span>
<div id="mathAns6-103" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>The Legendre polynomial of degree <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>1</mn><mo>.</mo></mrow></mstyle></math>
</p>



<div id="spadComm6-104" class="spadComm" >
<form id="formComm6-104" action="javascript:makeRequest('6-104');" >
<input id="comm6-104" type="text" class="command" style="width: 6em;" value="p(1) == x" />
</form>
<span id="commSav6-104" class="commSav" >p(1) == x</span>
<div id="mathAns6-104" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>The Legendre polynomial of degree <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>.
</p>



<div id="spadComm6-105" class="spadComm" >
<form id="formComm6-105" action="javascript:makeRequest('6-105');" >
<input id="comm6-105" type="text" class="command" style="width: 29em;" value="p(n) == ((2*n-1)*x*p(n-1) - (n-1)*p(n-2))/n" />
</form>
<span id="commSav6-105" class="commSav" >p(n) == ((2*n-1)*x*p(n-1) - (n-1)*p(n-2))/n</span>
<div id="mathAns6-105" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Compute the Legendre polynomial of degree <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>6</mn><mo>.</mo></mrow></mstyle></math>
</p>



<div id="spadComm6-106" class="spadComm" >
<form id="formComm6-106" action="javascript:makeRequest('6-106');" >
<input id="comm6-106" type="text" class="command" style="width: 3em;" value="p(6)" />
</form>
<span id="commSav6-106" class="commSav" >p(6)</span>
<div id="mathAns6-106" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;p&nbsp;with&nbsp;type&nbsp;Integer&nbsp;-&gt;&nbsp;Polynomial&nbsp;Fraction&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer&nbsp;<br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;p&nbsp;as&nbsp;a&nbsp;recurrence&nbsp;relation.<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mfrac><mn>231</mn><mn>16</mn></mfrac><mo></mo><mrow><msup><mi>x</mi><mn>6</mn></msup></mrow></mrow><mo>-</mo><mrow><mfrac><mn>315</mn><mn>16</mn></mfrac><mo></mo><mrow><msup><mi>x</mi><mn>4</mn></msup></mrow></mrow><mo>+</mo><mrow><mfrac><mn>105</mn><mn>16</mn></mfrac><mo></mo><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow></mrow><mo>-</mo><mfrac><mn>5</mn><mn>16</mn></mfrac></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Fraction Integer
</div>





</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-6.12.xhtml" style="margin-right: 10px;">Previous Section 6.12 Caching Previously Computed Results</a><a href="section-6.14.xhtml" style="margin-right: 10px;">Next Section 6.14 Making Functions from Objects</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>