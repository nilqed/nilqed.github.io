<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section6.18</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-6.17.xhtml" style="margin-right: 10px;">Previous Section 6.17 Anonymous Functions</a><a href="section-6.19.xhtml" style="margin-right: 10px;">Next Section 6.19 Example: A Famous Triangle</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-6.18">
<h2 class="sectiontitle">6.18  Example: A Database</h2>


<a name="ugUserDatabase" class="label"/>


<p>This example shows how you can use FriCAS to organize a database of
lineage data and then query the database for relationships.
</p>


<p>The database is entered as <span class="italic">assertions</span> that are really pieces of a
function definition.
</p>



<div id="spadComm6-173" class="spadComm" >
<form id="formComm6-173" action="javascript:makeRequest('6-173');" >
<input id="comm6-173" type="text" class="command" style="width: 35em;" value='children("albert") == ["albertJr","richard","diane"]' />
</form>
<span id="commSav6-173" class="commSav" >children("albert") == ["albertJr","richard","diane"]</span>
<div id="mathAns6-173" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Each piece <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>children</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mo>=</mo><mi>y</mi></mrow></mstyle></math> means <span class="italic">the children of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> are <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math></span>.
</p>



<div id="spadComm6-174" class="spadComm" >
<form id="formComm6-174" action="javascript:makeRequest('6-174');" >
<input id="comm6-174" type="text" class="command" style="width: 34em;" value='children("richard") == ["douglas","daniel","susan"]' />
</form>
<span id="commSav6-174" class="commSav" >children("richard") == ["douglas","daniel","susan"]</span>
<div id="mathAns6-174" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>This family tree thus spans four generations.
</p>



<div id="spadComm6-175" class="spadComm" >
<form id="formComm6-175" action="javascript:makeRequest('6-175');" >
<input id="comm6-175" type="text" class="command" style="width: 29em;" value='children("douglas") == ["dougie","valerie"]' />
</form>
<span id="commSav6-175" class="commSav" >children("douglas") == ["dougie","valerie"]</span>
<div id="mathAns6-175" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Say <span class="italic">no one else has children.</span>
</p>



<div id="spadComm6-176" class="spadComm" >
<form id="formComm6-176" action="javascript:makeRequest('6-176');" >
<input id="comm6-176" type="text" class="command" style="width: 12em;" value="children(x) == []" />
</form>
<span id="commSav6-176" class="commSav" >children(x) == []</span>
<div id="mathAns6-176" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>We need some functions for computing lineage.  Start with <span class="teletype">childOf</span>.
</p>



<div id="spadComm6-177" class="spadComm" >
<form id="formComm6-177" action="javascript:makeRequest('6-177');" >
<input id="comm6-177" type="text" class="command" style="width: 26em;" value="childOf(x,y) == member?(x,children(y))" />
</form>
<span id="commSav6-177" class="commSav" >childOf(x,y) == member?(x,children(y))</span>
<div id="mathAns6-177" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>To find the <span class="teletype">parentOf</span> someone, you have to scan the database of
people applying <span class="teletype">children</span>.
</p>



<div class="verbatim"><br />
parentOf(x)&nbsp;==<br />
&nbsp;&nbsp;for&nbsp;y&nbsp;in&nbsp;people&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;(if&nbsp;childOf(x,y)&nbsp;then&nbsp;return&nbsp;y)<br />
&nbsp;&nbsp;"unknown"<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>And a grandparent of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> is just a parent of a parent of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math>.
</p>



<div id="spadComm6-178" class="spadComm" >
<form id="formComm6-178" action="javascript:makeRequest('6-178');" >
<input id="comm6-178" type="text" class="command" style="width: 26em;" value="grandParentOf(x) == parentOf parentOf x" />
</form>
<span id="commSav6-178" class="commSav" >grandParentOf(x) == parentOf parentOf x</span>
<div id="mathAns6-178" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>The grandchildren of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> are the people <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math> such that <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> is a
grandparent of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math>.
</p>



<div id="spadComm6-179" class="spadComm" >
<form id="formComm6-179" action="javascript:makeRequest('6-179');" >
<input id="comm6-179" type="text" class="command" style="width: 42em;" value="grandchildren(x) == [y for y in people | grandParentOf(y) = x]" />
</form>
<span id="commSav6-179" class="commSav" >grandchildren(x) == [y for y in people | grandParentOf(y) = x]</span>
<div id="mathAns6-179" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Suppose you want to make a list of all great-grandparents.  Well, a
great-grandparent is a grandparent of a person who has children.
</p>




<div class="verbatim"><br />
greatGrandParents&nbsp;==&nbsp;[x&nbsp;for&nbsp;x&nbsp;in&nbsp;people&nbsp;|<br />
&nbsp;&nbsp;reduce(_or,<br />
&nbsp;&nbsp;&nbsp;&nbsp;[not&nbsp;empty?&nbsp;children(y)&nbsp;for&nbsp;y&nbsp;in&nbsp;grandchildren(x)],false)]<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Define <span class="teletype">descendants</span> to include the parent as well.
</p>



<div class="verbatim"><br />
descendants(x)&nbsp;==<br />
&nbsp;&nbsp;kids&nbsp;:=&nbsp;children(x)<br />
&nbsp;&nbsp;null&nbsp;kids&nbsp;=&gt;&nbsp;[x]<br />
&nbsp;&nbsp;concat(x,reduce(concat,[descendants(y)<br />
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;y&nbsp;in&nbsp;kids],[]))<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Finally, we need a list of people.  Since all people are descendants
of <span class="italic">albert</span>, let's say so.
</p>



<div id="spadComm6-180" class="spadComm" >
<form id="formComm6-180" action="javascript:makeRequest('6-180');" >
<input id="comm6-180" type="text" class="command" style="width: 20em;" value='people == descendants "albert"' />
</form>
<span id="commSav6-180" class="commSav" >people == descendants "albert"</span>
<div id="mathAns6-180" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>We have used <span class="italic"><span class="teletype">==</span></span> to define the database and some functions to
query the database.  But no computation is done until we ask for some
information.  Then, once and for all, the functions are analyzed and
compiled to machine code for run-time efficiency.  Notice that no
types are given anywhere in this example.  They are not needed.
</p>


<p>Who are the grandchildren of <span class="italic">richard</span>?
</p>



<div id="spadComm6-181" class="spadComm" >
<form id="formComm6-181" action="javascript:makeRequest('6-181');" >
<input id="comm6-181" type="text" class="command" style="width: 16em;" value='grandchildren "richard"' />
</form>
<span id="commSav6-181" class="commSav" >grandchildren "richard"</span>
<div id="mathAns6-181" ></div>
</div>




<div class="verbatim"><br />
Compiling&nbsp;function&nbsp;children&nbsp;with&nbsp;type&nbsp;String&nbsp;-&gt;&nbsp;List&nbsp;String&nbsp;<br />
Compiling&nbsp;function&nbsp;descendants&nbsp;with&nbsp;type&nbsp;String&nbsp;-&gt;&nbsp;List&nbsp;String&nbsp;<br />
Compiling&nbsp;body&nbsp;of&nbsp;rule&nbsp;people&nbsp;to&nbsp;compute&nbsp;value&nbsp;of&nbsp;type&nbsp;List&nbsp;String&nbsp;<br />
Compiling&nbsp;function&nbsp;childOf&nbsp;with&nbsp;type&nbsp;(String,String)&nbsp;-&gt;&nbsp;Boolean&nbsp;<br />
Compiling&nbsp;function&nbsp;parentOf&nbsp;with&nbsp;type&nbsp;String&nbsp;-&gt;&nbsp;String&nbsp;<br />
Compiling&nbsp;function&nbsp;grandParentOf&nbsp;with&nbsp;type&nbsp;String&nbsp;-&gt;&nbsp;String&nbsp;<br />
Compiling&nbsp;function&nbsp;grandchildren&nbsp;with&nbsp;type&nbsp;String&nbsp;-&gt;&nbsp;List&nbsp;String&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mtext><mrow><mtext mathvariant='monospace'>"dougie"</mtext></mrow></mtext><mo>,</mo><mtext><mrow><mtext mathvariant='monospace'>"valerie"</mtext></mrow></mtext><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List String
</div>



<p>Who are the great-grandparents?
</p>



<div id="spadComm6-182" class="spadComm" >
<form id="formComm6-182" action="javascript:makeRequest('6-182');" >
<input id="comm6-182" type="text" class="command" style="width: 12em;" value="greatGrandParents" />
</form>
<span id="commSav6-182" class="commSav" >greatGrandParents</span>
<div id="mathAns6-182" ></div>
</div>




<div class="verbatim"><br />
Compiling&nbsp;body&nbsp;of&nbsp;rule&nbsp;greatGrandParents&nbsp;to&nbsp;compute&nbsp;value&nbsp;of&nbsp;<br />
&nbsp;&nbsp;&nbsp;type&nbsp;List&nbsp;String&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mtext><mrow><mtext mathvariant='monospace'>"albert"</mtext></mrow></mtext><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List String
</div>





</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-6.17.xhtml" style="margin-right: 10px;">Previous Section 6.17 Anonymous Functions</a><a href="section-6.19.xhtml" style="margin-right: 10px;">Next Section 6.19 Example: A Famous Triangle</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>