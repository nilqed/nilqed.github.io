<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section9.51</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-9.50.xhtml" style="margin-right: 10px;">Previous Section 9.50 MakeFunction</a><a href="section-9.52.xhtml" style="margin-right: 10px;">Next Section 9.52 Matrix</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-9.51">
<h2 class="sectiontitle">9.51  MappingPackage1</h2>


<a name="MappingPackage1XmpPage" class="label"/>


<p>Function are objects of type <span class="teletype">Mapping</span>.  In this section we
demonstrate some library operations from the packages 
<span class="teletype">MappingPackage1</span>, <span class="teletype">MappingPackage2</span>, and <span class="teletype">MappingPackage3</span>
that manipulate and create functions.  Some terminology: a 
<span class="italic">nullary</span> function takes no arguments, a <span class="italic">unary</span> function takes 
one argument, and a <span class="italic">binary</span> function takes two arguments.
</p>


<p>We begin by creating an example function that raises a
rational number to an integer exponent.
</p>




<div id="spadComm9-133" class="spadComm" >
<form id="formComm9-133" action="javascript:makeRequest('9-133');" >
<input id="comm9-133" type="text" class="command" style="width: 30em;" value="power(q: FRAC INT, n: INT): FRAC INT == q^n " />
</form>
<span id="commSav9-133" class="commSav" >power(q: FRAC INT, n: INT): FRAC INT == q^n </span>
<div id="mathAns9-133" ></div>
</div>




<div class="verbatim"><br />
Function&nbsp;declaration&nbsp;power&nbsp;:&nbsp;(Fraction&nbsp;Integer,Integer)&nbsp;-&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;Fraction&nbsp;Integer&nbsp;has&nbsp;been&nbsp;added&nbsp;to&nbsp;workspace.<br />
</div>




<div class="returnType">
Void
</div>





<div id="spadComm9-134" class="spadComm" >
<form id="formComm9-134" action="javascript:makeRequest('9-134');" >
<input id="comm9-134" type="text" class="command" style="width: 8em;" value="power(2,3) " />
</form>
<span id="commSav9-134" class="commSav" >power(2,3) </span>
<div id="mathAns9-134" ></div>
</div>




<div class="verbatim"><br />
Compiling&nbsp;function&nbsp;power&nbsp;with&nbsp;type&nbsp;(Fraction&nbsp;Integer,Integer)&nbsp;-&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;Fraction&nbsp;Integer&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>8</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Integer
</div>



<p>The <span class="spadfunFrom" >twist</span><span class="index">twist</span><a name="chapter-9-64"/><span class="index">MappingPackage3</span><a name="chapter-9-65"/> operation transposes the
arguments of a binary function.  Here <span class="teletype">rewop(a, b)</span> is 
<span class="teletype">power(b, a)</span>.
</p>




<div id="spadComm9-135" class="spadComm" >
<form id="formComm9-135" action="javascript:makeRequest('9-135');" >
<input id="comm9-135" type="text" class="command" style="width: 14em;" value="rewop := twist power " />
</form>
<span id="commSav9-135" class="commSav" >rewop := twist power </span>
<div id="mathAns9-135" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ((Integer,Fraction Integer) -> Fraction Integer)
</div>



<p>This is  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>.</mo></mrow></mstyle></math>
</p>




<div id="spadComm9-136" class="spadComm" >
<form id="formComm9-136" action="javascript:makeRequest('9-136');" >
<input id="comm9-136" type="text" class="command" style="width: 8em;" value="rewop(3, 2) " />
</form>
<span id="commSav9-136" class="commSav" >rewop(3, 2) </span>
<div id="mathAns9-136" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>8</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Integer
</div>



<p>Now we define <span class="teletype">square</span> in terms of <span class="teletype">power</span>.
</p>




<div id="spadComm9-137" class="spadComm" >
<form id="formComm9-137" action="javascript:makeRequest('9-137');" >
<input id="comm9-137" type="text" class="command" style="width: 20em;" value="square: FRAC INT -> FRAC INT " />
</form>
<span id="commSav9-137" class="commSav" >square: FRAC INT -> FRAC INT </span>
<div id="mathAns9-137" ></div>
</div>




<div class="returnType">
Void
</div>



<p>The <span class="spadfunFrom" >curryRight</span><span class="index">curryRight</span><a name="chapter-9-66"/><span class="index">MappingPackage3</span><a name="chapter-9-67"/> operation creates a
unary function from a binary one by providing a constant argument on
the right.
</p>




<div id="spadComm9-138" class="spadComm" >
<form id="formComm9-138" action="javascript:makeRequest('9-138');" >
<input id="comm9-138" type="text" class="command" style="width: 20em;" value="square:= curryRight(power, 2) " />
</form>
<span id="commSav9-138" class="commSav" >square:= curryRight(power, 2) </span>
<div id="mathAns9-138" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: (Fraction Integer -> Fraction Integer)
</div>



<p>Likewise, the <span class="spadfunFrom" >curryLeft</span><span class="index">curryLeft</span><a name="chapter-9-68"/><span class="index">MappingPackage3</span><a name="chapter-9-69"/> operation
provides a constant argument on the left.
</p>




<div id="spadComm9-139" class="spadComm" >
<form id="formComm9-139" action="javascript:makeRequest('9-139');" >
<input id="comm9-139" type="text" class="command" style="width: 6em;" value="square 4 " />
</form>
<span id="commSav9-139" class="commSav" >square 4 </span>
<div id="mathAns9-139" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>16</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Integer
</div>



<p>The <span class="spadfunFrom" >constantRight</span><span class="index">constantRight</span><a name="chapter-9-70"/><span class="index">MappingPackage3</span><a name="chapter-9-71"/> operation creates
(in a trivial way) a binary function from a unary one:
<span class="teletype">constantRight(f)</span> is the function <span class="teletype">g</span> such that
<span class="teletype">g(a,b)= f(a).</span>
</p>




<div id="spadComm9-140" class="spadComm" >
<form id="formComm9-140" action="javascript:makeRequest('9-140');" >
<input id="comm9-140" type="text" class="command" style="width: 46em;" value="squirrel:= constantRight(square)$MAPPKG3(FRAC INT,FRAC INT,FRAC INT) " />
</form>
<span id="commSav9-140" class="commSav" >squirrel:= constantRight(square)$MAPPKG3(FRAC INT,FRAC INT,FRAC INT) </span>
<div id="mathAns9-140" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ((Fraction Integer,Fraction Integer) -> Fraction Integer)
</div>



<p>Likewise, <span class="teletype">constantLeft(f)</span> is the function <span class="teletype">g</span> such that 
<span class="teletype">g(a,b)= f(b).</span>
</p>




<div id="spadComm9-141" class="spadComm" >
<form id="formComm9-141" action="javascript:makeRequest('9-141');" >
<input id="comm9-141" type="text" class="command" style="width: 13em;" value="squirrel(1/2, 1/3) " />
</form>
<span id="commSav9-141" class="commSav" >squirrel(1/2, 1/3) </span>
<div id="mathAns9-141" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mfrac><mn>1</mn><mn>4</mn></mfrac></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Integer
</div>



<p>The <span class="spadfunFrom" >curry</span><span class="index">curry</span><a name="chapter-9-72"/><span class="index">MappingPackage2</span><a name="chapter-9-73"/> operation makes a unary
function nullary.
</p>




<div id="spadComm9-142" class="spadComm" >
<form id="formComm9-142" action="javascript:makeRequest('9-142');" >
<input id="comm9-142" type="text" class="command" style="width: 20em;" value="sixteen := curry(square, 4/1) " />
</form>
<span id="commSav9-142" class="commSav" >sixteen := curry(square, 4/1) </span>
<div id="mathAns9-142" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: (() -> Fraction Integer)
</div>





<div id="spadComm9-143" class="spadComm" >
<form id="formComm9-143" action="javascript:makeRequest('9-143');" >
<input id="comm9-143" type="text" class="command" style="width: 7em;" value="sixteen() " />
</form>
<span id="commSav9-143" class="commSav" >sixteen() </span>
<div id="mathAns9-143" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>16</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Integer
</div>



<p>The <span class="spadopFrom" title="MappingPackage3">*</span> operation constructs composed
functions.
</p>




<div id="spadComm9-144" class="spadComm" >
<form id="formComm9-144" action="javascript:makeRequest('9-144');" >
<input id="comm9-144" type="text" class="command" style="width: 16em;" value="square2:=square*square " />
</form>
<span id="commSav9-144" class="commSav" >square2:=square*square </span>
<div id="mathAns9-144" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: (Fraction Integer -> Fraction Integer)
</div>





<div id="spadComm9-145" class="spadComm" >
<form id="formComm9-145" action="javascript:makeRequest('9-145');" >
<input id="comm9-145" type="text" class="command" style="width: 8em;" value="square2  3 " />
</form>
<span id="commSav9-145" class="commSav" >square2  3 </span>
<div id="mathAns9-145" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>81</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Integer
</div>



<p>Use the <span class="spadopFrom" title="MappingPackage1">^</span> operation to create functions
that are <span class="teletype">n</span>-fold iterations of other functions.
</p>




<div id="spadComm9-146" class="spadComm" >
<form id="formComm9-146" action="javascript:makeRequest('9-146');" >
<input id="comm9-146" type="text" class="command" style="width: 24em;" value="sc(x: FRAC INT): FRAC INT == x + 1 " />
</form>
<span id="commSav9-146" class="commSav" >sc(x: FRAC INT): FRAC INT == x + 1 </span>
<div id="mathAns9-146" ></div>
</div>




<div class="verbatim"><br />
Function&nbsp;declaration&nbsp;sc&nbsp;:&nbsp;Fraction&nbsp;Integer&nbsp;-&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;Fraction&nbsp;Integer&nbsp;has&nbsp;been&nbsp;added&nbsp;to&nbsp;workspace.<br />
</div>




<div class="returnType">
Void
</div>



<p>This is a list of <span class="teletype">Mapping</span> objects.
</p>




<div id="spadComm9-147" class="spadComm" >
<form id="formComm9-147" action="javascript:makeRequest('9-147');" >
<input id="comm9-147" type="text" class="command" style="width: 22em;" value="incfns := [sc^i for i in 0..10] " />
</form>
<span id="commSav9-147" class="commSav" >incfns := [sc^i for i in 0..10] </span>
<div id="mathAns9-147" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtable><mtr><mtd><mo>[</mo><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext><mo>,</mo><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext><mo>,</mo><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext><mo>,</mo><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext><mo>,</mo><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext><mo>,</mo><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext><mo>,</mo></mtd></mtr><mtr><mtd><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext><mo>,</mo><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext><mo>,</mo><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext><mo>,</mo><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext><mo>,</mo><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext><mo>]</mo></mtd></mtr></mtable></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List (Fraction Integer -> Fraction Integer)
</div>



<p>This is a list of applications of those functions.
</p>




<div id="spadComm9-148" class="spadComm" >
<form id="formComm9-148" action="javascript:makeRequest('9-148');" >
<input id="comm9-148" type="text" class="command" style="width: 15em;" value="[f 4 for f in incfns] " />
</form>
<span id="commSav9-148" class="commSav" >[f 4 for f in incfns] </span>
<div id="mathAns9-148" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>4</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>10</mn><mo>,</mo><mn>11</mn><mo>,</mo><mn>12</mn><mo>,</mo><mn>13</mn><mo>,</mo><mn>14</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Fraction Integer
</div>



<p>Use the <span class="spadfunFrom" >recur</span><span class="index">recur</span><a name="chapter-9-74"/><span class="index">MappingPackage1</span><a name="chapter-9-75"/>
operation for recursion:
</p>


<p><span class="teletype">g := recur f</span> means <span class="teletype">g(n,x) == f(n,f(n-1,...f(1,x))).</span>
</p>




<div id="spadComm9-149" class="spadComm" >
<form id="formComm9-149" action="javascript:makeRequest('9-149');" >
<input id="comm9-149" type="text" class="command" style="width: 21em;" value="times(n:NNI, i:INT):INT == n*i " />
</form>
<span id="commSav9-149" class="commSav" >times(n:NNI, i:INT):INT == n*i </span>
<div id="mathAns9-149" ></div>
</div>




<div class="verbatim"><br />
Function&nbsp;declaration&nbsp;times&nbsp;:&nbsp;(NonNegativeInteger,Integer)&nbsp;-&gt;&nbsp;<br />
&nbsp;&nbsp;&nbsp;Integer&nbsp;has&nbsp;been&nbsp;added&nbsp;to&nbsp;workspace.<br />
</div>




<div class="returnType">
Void
</div>





<div id="spadComm9-150" class="spadComm" >
<form id="formComm9-150" action="javascript:makeRequest('9-150');" >
<input id="comm9-150" type="text" class="command" style="width: 12em;" value="r := recur(times) " />
</form>
<span id="commSav9-150" class="commSav" >r := recur(times) </span>
<div id="mathAns9-150" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ((NonNegativeInteger,Integer) -> Integer)
</div>



<p>This is a factorial function.
</p>




<div id="spadComm9-151" class="spadComm" >
<form id="formComm9-151" action="javascript:makeRequest('9-151');" >
<input id="comm9-151" type="text" class="command" style="width: 17em;" value="fact := curryRight(r, 1) " />
</form>
<span id="commSav9-151" class="commSav" >fact := curryRight(r, 1) </span>
<div id="mathAns9-151" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: (NonNegativeInteger -> Integer)
</div>





<div id="spadComm9-152" class="spadComm" >
<form id="formComm9-152" action="javascript:makeRequest('9-152');" >
<input id="comm9-152" type="text" class="command" style="width: 5em;" value="fact 4 " />
</form>
<span id="commSav9-152" class="commSav" >fact 4 </span>
<div id="mathAns9-152" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>24</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Constructed functions can be used within other functions.
</p>




<div class="verbatim"><br />
mto2ton(m,&nbsp;n)&nbsp;==<br />
&nbsp;&nbsp;raiser&nbsp;:=&nbsp;square^n<br />
&nbsp;&nbsp;raiser&nbsp;m<br />
</div>




<div class="returnType">
Void
</div>



<p>This is  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mn>3</mn><mrow><msup><mn>2</mn><mn>3</mn></msup></mrow></msup><mo>.</mo></mrow></mstyle></math>
</p>




<div id="spadComm9-153" class="spadComm" >
<form id="formComm9-153" action="javascript:makeRequest('9-153');" >
<input id="comm9-153" type="text" class="command" style="width: 10em;" value="mto2ton(3, 3) " />
</form>
<span id="commSav9-153" class="commSav" >mto2ton(3, 3) </span>
<div id="mathAns9-153" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;mto2ton&nbsp;with&nbsp;type&nbsp;(PositiveInteger,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PositiveInteger)&nbsp;-&gt;&nbsp;Fraction&nbsp;Integer&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>6561</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Integer
</div>



<p>Here <span class="teletype">shiftfib</span> is a unary function that modifies its argument.
</p>




<div class="verbatim"><br />
shiftfib(r:&nbsp;List&nbsp;INT)&nbsp;:&nbsp;INT&nbsp;==<br />
&nbsp;&nbsp;t&nbsp;:=&nbsp;r.1<br />
&nbsp;&nbsp;r.1&nbsp;:=&nbsp;r.2<br />
&nbsp;&nbsp;r.2&nbsp;:=&nbsp;r.2&nbsp;+&nbsp;t<br />
&nbsp;&nbsp;t<br />
<br />
Function&nbsp;declaration&nbsp;shiftfib&nbsp;:&nbsp;List&nbsp;Integer&nbsp;-&gt;&nbsp;Integer&nbsp;<br />
&nbsp;&nbsp;&nbsp;has&nbsp;been&nbsp;added&nbsp;to&nbsp;workspace.<br />
</div>




<div class="returnType">
Void
</div>



<p>By currying over the argument we get a function with private state.
</p>




<div id="spadComm9-154" class="spadComm" >
<form id="formComm9-154" action="javascript:makeRequest('9-154');" >
<input id="comm9-154" type="text" class="command" style="width: 19em;" value="fibinit: List INT := [0, 1] " />
</form>
<span id="commSav9-154" class="commSav" >fibinit: List INT := [0, 1] </span>
<div id="mathAns9-154" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>0</mn><mo>,</mo><mn>1</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>





<div id="spadComm9-155" class="spadComm" >
<form id="formComm9-155" action="javascript:makeRequest('9-155');" >
<input id="comm9-155" type="text" class="command" style="width: 22em;" value="fibs := curry(shiftfib, fibinit) " />
</form>
<span id="commSav9-155" class="commSav" >fibs := curry(shiftfib, fibinit) </span>
<div id="mathAns9-155" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mi>theMap</mi><mo>(</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>)</mo></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: (() -> Integer)
</div>





<div id="spadComm9-156" class="spadComm" >
<form id="formComm9-156" action="javascript:makeRequest('9-156');" >
<input id="comm9-156" type="text" class="command" style="width: 16em;" value="[fibs() for i in 0..30] " />
</form>
<span id="commSav9-156" class="commSav" >[fibs() for i in 0..30] </span>
<div id="mathAns9-156" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtable><mtr><mtd><mo>[</mo><mn>0</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>13</mn><mo>,</mo><mn>21</mn><mo>,</mo><mn>34</mn><mo>,</mo><mn>55</mn><mo>,</mo><mn>89</mn><mo>,</mo><mn>144</mn><mo>,</mo><mn>233</mn><mo>,</mo><mn>377</mn><mo>,</mo><mn>610</mn><mo>,</mo><mn>987</mn><mo>,</mo><mn>1597</mn><mo>,</mo></mtd></mtr><mtr><mtd><mn>2584</mn><mo>,</mo><mn>4181</mn><mo>,</mo><mn>6765</mn><mo>,</mo><mn>10946</mn><mo>,</mo><mn>17711</mn><mo>,</mo><mn>28657</mn><mo>,</mo><mn>46368</mn><mo>,</mo><mn>75025</mn><mo>,</mo><mn>121393</mn><mo>,</mo><mn>196418</mn><mo>,</mo></mtd></mtr><mtr><mtd><mn>317811</mn><mo>,</mo><mn>514229</mn><mo>,</mo><mn>832040</mn><mo>]</mo></mtd></mtr></mtable></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>





</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-9.50.xhtml" style="margin-right: 10px;">Previous Section 9.50 MakeFunction</a><a href="section-9.52.xhtml" style="margin-right: 10px;">Next Section 9.52 Matrix</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>