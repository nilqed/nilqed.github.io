<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section11.2</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-11.1.xhtml" style="margin-right: 10px;">Previous Section 11.1 Names, Abbreviations, and File Structure</a><a href="section-11.3.xhtml" style="margin-right: 10px;">Next Section 11.3 Abstract Datatypes</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-11.2">
<h2 class="sectiontitle">11.2  Syntax</h2>


<a name="ugPackagesSyntax" class="label"/>


<p>The definition of a package has the syntax:
</p>



<div class="center" style="text-align: center;">


<p><span class="italic">PackageForm</span> <span class="teletype">:</span> Exports&nbsp;<span class="teletype">==</span>&nbsp; Implementation
</p>



</div>


<p>The syntax for defining a package constructor is the same as that
<span class="index">syntax</span><a name="chapter-11-7"/>
for defining any function in FriCAS.
In practice, the definition extends over many lines so that this syntax is
not practical.
Also, the type of a package is expressed by the operator <math xmlns="&mathml;" mathsize="big"><mstyle><mi>with</mi></mstyle></math>
<span class="index">with</span><a name="chapter-11-8"/>
followed by an explicit list of operations.
A preferable way to write the definition of a package is with a <math xmlns="&mathml;" mathsize="big"><mstyle><mi>where</mi></mstyle></math>
<span class="index">where</span><a name="chapter-11-9"/>
expression:
</p>


<p>The definition of a package usually has the form: <br />
<span class="teletype"><span class="italic">PackageForm</span> : Exports  ==  Implementation where <br />
<span class="hspace75pc"> <span class="italic">optional type declarations</span></span><br />
<span class="hspace75pc"> Exports  ==   with </span><br />
<span class="hspace200pc">   <span class="italic">list of exported operations</span></span><br />
<span class="hspace75pc"> Implementation == add </span><br />
<span class="hspace200pc">   <span class="italic">list of function definitions for exported operations</span> </span><br />
</span>
</p>


<p>The <span class="teletype">DrawComplex</span> package takes no parameters and exports five
operations, each a separate item of a <span class="italic">pile</span>.
Each operation is described as a <span class="italic">declaration</span>: a name, followed
by a colon (<span class="teletype">:</span>), followed by the type of the operation.
All operations have types expressed as mappings with
the syntax
</p>



<div class="center" style="text-align: center;">


<p><span class="italic">source&nbsp;<span class="teletype">-></span>&nbsp; target
</span>
</p>



</div>





</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-11.1.xhtml" style="margin-right: 10px;">Previous Section 11.1 Names, Abbreviations, and File Structure</a><a href="section-11.3.xhtml" style="margin-right: 10px;">Next Section 11.3 Abstract Datatypes</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>