<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section6.11</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-6.10.xhtml" style="margin-right: 10px;">Previous Section 6.10 Compiling vs. Interpreting</a><a href="section-6.12.xhtml" style="margin-right: 10px;">Next Section 6.12 Caching Previously Computed Results</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-6.11">
<h2 class="sectiontitle">6.11  Piece-Wise Function Definitions</h2>


<a name="ugUserPiece" class="label"/>


<p>To move beyond functions defined in one line, we introduce in this
section functions that are defined piece-by-piece.  That is, we say
<span class="italic">use this definition when the argument is such-and-such and use this
other definition when the argument is that-and-that.</span>
</p>



<a name="subsec-6.11.1"/>
<div class="subsection"  id="subsec-6.11.1">
<h3 class="subsectitle">6.11.1  A Basic Example</h3>


<a name="ugUserPieceBasic" class="label"/>


<p>There are many other ways to define a factorial function for
nonnegative integers.  You might 
<span class="index">function:piece-wise definition</span><a name="chapter-6-23"/> 
say <span class="index">piece-wise function definition</span><a name="chapter-6-24"/> factorial of
<math xmlns="&mathml;" mathsize="big"><mstyle><mn>0</mn></mstyle></math> is <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math>, otherwise factorial of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> is <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> times factorial of
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>-</mo><mn>1</mn></mrow></mstyle></math>.  Here is one way to do this in FriCAS.
</p>


<p>Here is the value for <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></math>.
</p>



<div id="spadComm6-58" class="spadComm" >
<form id="formComm6-58" action="javascript:makeRequest('6-58');" >
<input id="comm6-58" type="text" class="command" style="width: 8em;" value="fact(0) == 1" />
</form>
<span id="commSav6-58" class="commSav" >fact(0) == 1</span>
<div id="mathAns6-58" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Here is the value for <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>&gt;</mo><mn>0</mn></mrow></mstyle></math>.  The vertical bar ``<span class="teletype">|</span>'' means <span class="italic">such
that</span>. <span class="index">such that</span><a name="chapter-6-25"/>
</p>



<div id="spadComm6-59" class="spadComm" >
<form id="formComm6-59" action="javascript:makeRequest('6-59');" >
<input id="comm6-59" type="text" class="command" style="width: 23em;" value="fact(n | n > 0) == n * fact(n - 1)" />
</form>
<span id="commSav6-59" class="commSav" >fact(n | n > 0) == n * fact(n - 1)</span>
<div id="mathAns6-59" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>What is the value for <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>=</mo><mn>3</mn></mrow></mstyle></math>?
</p>



<div id="spadComm6-60" class="spadComm" >
<form id="formComm6-60" action="javascript:makeRequest('6-60');" >
<input id="comm6-60" type="text" class="command" style="width: 5em;" value="fact(3)" />
</form>
<span id="commSav6-60" class="commSav" >fact(3)</span>
<div id="mathAns6-60" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;fact&nbsp;with&nbsp;type&nbsp;Integer&nbsp;-&gt;&nbsp;Integer&nbsp;<br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;fact&nbsp;as&nbsp;a&nbsp;recurrence&nbsp;relation.<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>6</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>What is the value for <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>=</mo><mo>-</mo><mn>3</mn></mrow></mstyle></math>?
</p>



<div id="spadComm6-61" class="spadComm" >
<form id="formComm6-61" action="javascript:makeRequest('6-61');" >
<input id="comm6-61" type="text" class="command" style="width: 6em;" value="fact(-3)" />
</form>
<span id="commSav6-61" class="commSav" >fact(-3)</span>
<div id="mathAns6-61" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;You&nbsp;did&nbsp;not&nbsp;define&nbsp;fact&nbsp;for&nbsp;argument&nbsp;-3&nbsp;.<br />
</div>



<p>Now for a second definition.  Here is the value for <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></math>.
</p>



<div id="spadComm6-62" class="spadComm" >
<form id="formComm6-62" action="javascript:makeRequest('6-62');" >
<input id="comm6-62" type="text" class="command" style="width: 9em;" value="facto(0) == 1" />
</form>
<span id="commSav6-62" class="commSav" >facto(0) == 1</span>
<div id="mathAns6-62" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Give an error message if <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>&lt;</mo><mn>0</mn></mrow></mstyle></math>.
</p>



<div id="spadComm6-63" class="spadComm" >
<form id="formComm6-63" action="javascript:makeRequest('6-63');" >
<input id="comm6-63" type="text" class="command" style="width: 45em;" value='facto(n | n &lt; 0) == error "arguments to facto must be non-negative"' />
</form>
<span id="commSav6-63" class="commSav" >facto(n | n &lt; 0) == error "arguments to facto must be non-negative"</span>
<div id="mathAns6-63" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Here is the value otherwise.
</p>



<div id="spadComm6-64" class="spadComm" >
<form id="formComm6-64" action="javascript:makeRequest('6-64');" >
<input id="comm6-64" type="text" class="command" style="width: 19em;" value="facto(n) == n * facto(n - 1)" />
</form>
<span id="commSav6-64" class="commSav" >facto(n) == n * facto(n - 1)</span>
<div id="mathAns6-64" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>What is the value for <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>=</mo><mn>7</mn></mrow></mstyle></math>?
</p>



<div id="spadComm6-65" class="spadComm" >
<form id="formComm6-65" action="javascript:makeRequest('6-65');" >
<input id="comm6-65" type="text" class="command" style="width: 6em;" value="facto(3)" />
</form>
<span id="commSav6-65" class="commSav" >facto(3)</span>
<div id="mathAns6-65" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;facto&nbsp;with&nbsp;type&nbsp;Integer&nbsp;-&gt;&nbsp;Integer&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>6</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>What is the value for <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>=</mo><mo>-</mo><mn>7</mn></mrow></mstyle></math>?
</p>



<div id="spadComm6-66" class="spadComm" >
<form id="formComm6-66" action="javascript:makeRequest('6-66');" >
<input id="comm6-66" type="text" class="command" style="width: 6em;" value="facto(-7)" />
</form>
<span id="commSav6-66" class="commSav" >facto(-7)</span>
<div id="mathAns6-66" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Error&nbsp;signalled&nbsp;from&nbsp;user&nbsp;code&nbsp;in&nbsp;function&nbsp;facto:&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arguments&nbsp;to&nbsp;facto&nbsp;must&nbsp;be&nbsp;non-negative<br />
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>To see the current piece-wise definition of a function, use 
<span class="teletype">)display value</span>.
</p>



<div id="spadComm6-67" class="spadComm" >
<form id="formComm6-67" action="javascript:makeRequest('6-67');" >
<input id="comm6-67" type="text" class="command" style="width: 14em;" value=")display value facto" />
</form>
<span id="commSav6-67" class="commSav" >)display value facto</span>
<div id="mathAns6-67" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Definition:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facto&nbsp;0&nbsp;==&nbsp;1<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facto&nbsp;(n&nbsp;|&nbsp;n&nbsp;&lt;&nbsp;0)&nbsp;==&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error(arguments&nbsp;to&nbsp;facto&nbsp;must&nbsp;be&nbsp;non-negative)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facto&nbsp;n&nbsp;==&nbsp;n&nbsp;facto(n&nbsp;-&nbsp;1)<br />
</div>



<p>In general a <span class="italic">piece-wise definition</span> of a function consists of two
or more parts.  Each part gives a <span class="italic">piece</span> of the entire definition.
FriCAS collects the pieces of a function as you enter them.  When you
ask for a value of the function, it then <span class="italic">glues</span> the pieces together
to form a function.
</p>


<p>The two piece-wise definitions for the factorial function are examples
of recursive functions, that is, functions that are defined in terms
of themselves.  Here is an interesting doubly-recursive function.
This function returns the value <math xmlns="&mathml;" mathsize="big"><mstyle><mn>11</mn></mstyle></math> for all positive integer
arguments.
</p>


<p>Here is the first of two pieces.
</p>



<div id="spadComm6-68" class="spadComm" >
<form id="formComm6-68" action="javascript:makeRequest('6-68');" >
<input id="comm6-68" type="text" class="command" style="width: 18em;" value="eleven(n | n &lt; 1) == n + 11" />
</form>
<span id="commSav6-68" class="commSav" >eleven(n | n &lt; 1) == n + 11</span>
<div id="mathAns6-68" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>And the general case.
</p>



<div id="spadComm6-69" class="spadComm" >
<form id="formComm6-69" action="javascript:makeRequest('6-69');" >
<input id="comm6-69" type="text" class="command" style="width: 24em;" value="eleven(m) == eleven(eleven(m - 12))" />
</form>
<span id="commSav6-69" class="commSav" >eleven(m) == eleven(eleven(m - 12))</span>
<div id="mathAns6-69" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Compute <math xmlns="&mathml;" mathsize="big"><mstyle><mi>elevens</mi></mstyle></math>, the infinite stream of values of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>eleven</mi></mstyle></math>.
</p>



<div id="spadComm6-70" class="spadComm" >
<form id="formComm6-70" action="javascript:makeRequest('6-70');" >
<input id="comm6-70" type="text" class="command" style="width: 24em;" value="elevens := [eleven(i) for i in 0..]" />
</form>
<span id="commSav6-70" class="commSav" >elevens := [eleven(i) for i in 0..]</span>
<div id="mathAns6-70" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>11</mn><mo>,</mo><mn>11</mn><mo>,</mo><mn>11</mn><mo>,</mo><mn>11</mn><mo>,</mo><mn>11</mn><mo>,</mo><mn>11</mn><mo>,</mo><mn>11</mn><mo>,</mo><mn>11</mn><mo>,</mo><mn>11</mn><mo>,</mo><mn>11</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Integer
</div>



<p>What is the value at <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>=</mo><mn>200</mn></mrow></mstyle></math>?
</p>



<div id="spadComm6-71" class="spadComm" >
<form id="formComm6-71" action="javascript:makeRequest('6-71');" >
<input id="comm6-71" type="text" class="command" style="width: 8em;" value="elevens 200" />
</form>
<span id="commSav6-71" class="commSav" >elevens 200</span>
<div id="mathAns6-71" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>11</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>What is the FriCAS's definition of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>eleven</mi></mstyle></math>?
</p>



<div id="spadComm6-72" class="spadComm" >
<form id="formComm6-72" action="javascript:makeRequest('6-72');" >
<input id="comm6-72" type="text" class="command" style="width: 14em;" value=")display value eleven" />
</form>
<span id="commSav6-72" class="commSav" >)display value eleven</span>
<div id="mathAns6-72" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Definition:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eleven&nbsp;(m&nbsp;|&nbsp;m&nbsp;&lt;&nbsp;1)&nbsp;==&nbsp;m&nbsp;+&nbsp;11<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eleven&nbsp;m&nbsp;==&nbsp;eleven(eleven(m&nbsp;-&nbsp;12))<br />
</div>





</div>



<a name="subsec-6.11.2"/>
<div class="subsection"  id="subsec-6.11.2">
<h3 class="subsectitle">6.11.2  Picking Up the Pieces</h3>


<a name="ugUserPiecePicking" class="label"/>


<p>Here are the details about how FriCAS creates a function from its
pieces.  FriCAS converts the <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math>-th piece of a function definition
into a conditional expression of the form: 
<span class="teletype">if</span> <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>pred</mtext></mrow><mi>i</mi></msub></mrow></mstyle></math> <span class="teletype">then</span> <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>expression</mtext></mrow><mi>i</mi></msub></mrow></mstyle></math>.  
If any new piece has a <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>pred</mtext></mrow><mi>i</mi></msub></mrow></mstyle></math> that is 
identical (after all variables are uniformly named) to 
an earlier <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>pred</mtext></mrow><mi>j</mi></msub></mrow></mstyle></math>, the earlier piece is removed.  
Otherwise, the new piece is always added at the end.
</p>




<div class="boxed2">


<div class="boxed">



<p>If there are <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> pieces to a function definition for <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math>, the function
defined <math xmlns="&mathml;" mathsize="big"><mstyle><mi>f</mi></mstyle></math> is: <br />
<span class="hspace300pc">
<span class="teletype">if</span> <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>pred</mtext></mrow><mn>1</mn></msub></mrow></mstyle></math> <span class="teletype">then</span> <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>expression</mtext></mrow><mn>1</mn></msub></mrow></mstyle></math> <span class="teletype">else</span></span><br />
<span class="hspace600pc">. . . </span><br />
<span class="hspace300pc">
<span class="teletype">if</span> <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>pred</mtext></mrow><mi>n</mi></msub></mrow></mstyle></math> <span class="teletype">then</span> <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>expression</mtext></mrow><mi>n</mi></msub></mrow></mstyle></math> <span class="teletype">else</span></span><br />
<span class="hspace300pc">
<span class="teletype"> error "You did not define f for argument &lt;arg&gt;."</span></span><br />
</p>



</div>
</div>



<p>You can give definitions of any number of mutually recursive function
definitions, piece-wise or otherwise.  No computation is done until
you ask for a value.  When you do ask for a value, all the relevant
definitions are gathered, analyzed, and translated into separate
functions and compiled.
</p>


<p>Let's recall the definition of <span style="font-weight: bold;"> eleven</span> from
the previous section. 
</p>



<div id="spadComm6-73" class="spadComm" >
<form id="formComm6-73" action="javascript:makeRequest('6-73');" >
<input id="comm6-73" type="text" class="command" style="width: 18em;" value="eleven(n | n &lt; 1) == n + 11" />
</form>
<span id="commSav6-73" class="commSav" >eleven(n | n &lt; 1) == n + 11</span>
<div id="mathAns6-73" ></div>
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm6-74" class="spadComm" >
<form id="formComm6-74" action="javascript:makeRequest('6-74');" >
<input id="comm6-74" type="text" class="command" style="width: 24em;" value="eleven(m) == eleven(eleven(m - 12))" />
</form>
<span id="commSav6-74" class="commSav" >eleven(m) == eleven(eleven(m - 12))</span>
<div id="mathAns6-74" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>A similar doubly-recursive function below produces <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>-</mo><mn>11</mn></mrow></mstyle></math> for all
negative positive integers.  If you haven't worked out why or how 
<span style="font-weight: bold;"> eleven</span> works, the structure of this definition gives a clue.
</p>


<p>This definition we write as a block.
</p>



<div class="verbatim"><br />
minusEleven(n)&nbsp;==<br />
&nbsp;&nbsp;n&nbsp;&gt;=&nbsp;0&nbsp;=&gt;&nbsp;n&nbsp;-&nbsp;11<br />
&nbsp;&nbsp;minusEleven&nbsp;(5&nbsp;+&nbsp;minusEleven(n&nbsp;+&nbsp;7))<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Define <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>s</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow></mstyle></math> to be the sum of plus and minus <span class="italic">eleven</span> functions
divided by <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>.  Since <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>11</mn><mo>-</mo><mn>11</mn><mo>=</mo><mn>0</mn></mrow></mstyle></math>, we define <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>s</mi><mo>(</mo><mn>0</mn><mo>)</mo></mrow></mstyle></math> to be <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math>.
</p>



<div id="spadComm6-75" class="spadComm" >
<form id="formComm6-75" action="javascript:makeRequest('6-75');" >
<input id="comm6-75" type="text" class="command" style="width: 6em;" value="s(0) == 1" />
</form>
<span id="commSav6-75" class="commSav" >s(0) == 1</span>
<div id="mathAns6-75" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>And the general term.
</p>



<div id="spadComm6-76" class="spadComm" >
<form id="formComm6-76" action="javascript:makeRequest('6-76');" >
<input id="comm6-76" type="text" class="command" style="width: 26em;" value="s(n) == (eleven(n) + minusEleven(n))/n" />
</form>
<span id="commSav6-76" class="commSav" >s(n) == (eleven(n) + minusEleven(n))/n</span>
<div id="mathAns6-76" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>What are the first ten values of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>s</mi></mstyle></math>?
</p>



<div id="spadComm6-77" class="spadComm" >
<form id="formComm6-77" action="javascript:makeRequest('6-77');" >
<input id="comm6-77" type="text" class="command" style="width: 13em;" value="[s(n) for n in 0..]" />
</form>
<span id="commSav6-77" class="commSav" >[s(n) for n in 0..]</span>
<div id="mathAns6-77" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Fraction Integer
</div>




<p>FriCAS can create infinite streams in the positive direction (for
example, for index values <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>0</mn><mo>,</mo><mn>1</mn><mo>,</mo><mo>&#x2026;</mo></mrow></mstyle></math>) or negative direction (for
example, for <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>0</mn><mo>,</mo><mo>-</mo><mn>1</mn><mo>,</mo><mo>-</mo><mn>2</mn><mo>,</mo><mo>&#x2026;</mo></mrow></mstyle></math>).  Here we would like a
stream of values of <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>s</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow></mstyle></math> that is infinite in both directions.  The
function <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>t</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow></mstyle></math> below returns the <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>-th term of the infinite stream 
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mi>s</mi><mo>(</mo><mn>0</mn><mo>)</mo><mo>,</mo><mi>s</mi><mo>(</mo><mn>1</mn><mo>)</mo><mo>,</mo><mi>s</mi><mo>(</mo><mo>-</mo><mn>1</mn><mo>)</mo><mo>,</mo><mi>s</mi><mo>(</mo><mn>2</mn><mo>)</mo><mo>,</mo><mi>s</mi><mo>(</mo><mo>-</mo><mn>2</mn><mo>)</mo><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math> 
Its definition has three pieces.
</p>


<p>Define the initial term.
</p>



<div id="spadComm6-78" class="spadComm" >
<form id="formComm6-78" action="javascript:makeRequest('6-78');" >
<input id="comm6-78" type="text" class="command" style="width: 8em;" value="t(1) == s(0)" />
</form>
<span id="commSav6-78" class="commSav" >t(1) == s(0)</span>
<div id="mathAns6-78" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>The even numbered terms are the <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>s</mi><mo>(</mo><mi>i</mi><mo>)</mo></mrow></mstyle></math> for positive <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math>.  We use
<span class="italic"><span class="teletype">quo</span></span> rather than <span class="italic"><span class="teletype">/</span></span> since we want the result to be
an integer.
</p>




<div id="spadComm6-79" class="spadComm" >
<form id="formComm6-79" action="javascript:makeRequest('6-79');" >
<input id="comm6-79" type="text" class="command" style="width: 20em;" value="t(n | even?(n)) == s(n quo 2)" />
</form>
<span id="commSav6-79" class="commSav" >t(n | even?(n)) == s(n quo 2)</span>
<div id="mathAns6-79" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Finally, the odd numbered terms are the <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>s</mi><mo>(</mo><mi>i</mi><mo>)</mo></mrow></mstyle></math> for negative <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math>.  In
piece-wise definitions, you can use different variables to define
different pieces. FriCAS will not get confused.
</p>



<div id="spadComm6-80" class="spadComm" >
<form id="formComm6-80" action="javascript:makeRequest('6-80');" >
<input id="comm6-80" type="text" class="command" style="width: 14em;" value="t(p) == s(- p quo 2)" />
</form>
<span id="commSav6-80" class="commSav" >t(p) == s(- p quo 2)</span>
<div id="mathAns6-80" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Look at the definition of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>t</mi></mstyle></math>.  In the first piece, the variable <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>
was used; in the second piece, <math xmlns="&mathml;" mathsize="big"><mstyle><mi>p</mi></mstyle></math>.  FriCAS always uses your last
variable to display your definitions back to you.
</p>



<div id="spadComm6-81" class="spadComm" >
<form id="formComm6-81" action="javascript:makeRequest('6-81');" >
<input id="comm6-81" type="text" class="command" style="width: 11em;" value=")display value t" />
</form>
<span id="commSav6-81" class="commSav" >)display value t</span>
<div id="mathAns6-81" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Definition:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;1&nbsp;==&nbsp;s(0)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;(p&nbsp;|&nbsp;even?(p))&nbsp;==&nbsp;s(p&nbsp;quo&nbsp;2)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;p&nbsp;==&nbsp;s(-&nbsp;p&nbsp;quo&nbsp;2)<br />
</div>



<p>Create a series of values of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>s</mi></mstyle></math> applied to
alternating positive and negative arguments.
</p>



<div id="spadComm6-82" class="spadComm" >
<form id="formComm6-82" action="javascript:makeRequest('6-82');" >
<input id="comm6-82" type="text" class="command" style="width: 13em;" value="[t(i) for i in 1..]" />
</form>
<span id="commSav6-82" class="commSav" >[t(i) for i in 1..]</span>
<div id="mathAns6-82" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;s&nbsp;with&nbsp;type&nbsp;Integer&nbsp;-&gt;&nbsp;Fraction&nbsp;Integer&nbsp;<br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;t&nbsp;with&nbsp;type&nbsp;PositiveInteger&nbsp;-&gt;&nbsp;Fraction&nbsp;Integer&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Fraction Integer
</div>



<p>Evidently <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>t</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mn>1</mn></mrow></mstyle></math> for all <math xmlns="&mathml;" mathsize="big"><mstyle><mi>i</mi></mstyle></math>. Check it at <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>=</mo><mn>100</mn></mrow></mstyle></math>. 
</p>




<div id="spadComm6-83" class="spadComm" >
<form id="formComm6-83" action="javascript:makeRequest('6-83');" >
<input id="comm6-83" type="text" class="command" style="width: 4em;" value="t(100)" />
</form>
<span id="commSav6-83" class="commSav" >t(100)</span>
<div id="mathAns6-83" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Integer
</div>





</div>



<a name="subsec-6.11.3"/>
<div class="subsection"  id="subsec-6.11.3">
<h3 class="subsectitle">6.11.3  Predicates</h3>


<a name="ugUserPiecePred" class="label"/>


<p>We have already seen some examples of <span class="index">function:predicate</span><a name="chapter-6-26"/>
predicates <span class="index">predicate:in function definition</span><a name="chapter-6-27"/>
(<a href="section-6.11.xhtml#ugUserPieceBasic" class="ref" >ugUserPieceBasic</a> ).
Predicates are <span class="teletype">Boolean</span>-valued expressions and FriCAS uses them
for filtering collections (see <a href="section-5.5.xhtml#ugLangIts" class="ref" >ugLangIts</a> ) and for placing constraints on function
arguments.  In this section we discuss their latter usage.
</p>


<p>The simplest use of a predicate is one you don't see at all.
</p>



<div id="spadComm6-84" class="spadComm" >
<form id="formComm6-84" action="javascript:makeRequest('6-84');" >
<input id="comm6-84" type="text" class="command" style="width: 16em;" value="opposite 'right == 'left" />
</form>
<span id="commSav6-84" class="commSav" >opposite 'right == 'left</span>
<div id="mathAns6-84" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Here is a longer way to give the <span class="italic">opposite definition.</span>
</p>



<div id="spadComm6-85" class="spadComm" >
<form id="formComm6-85" action="javascript:makeRequest('6-85');" >
<input id="comm6-85" type="text" class="command" style="width: 23em;" value="opposite (x | x = 'left) == 'right" />
</form>
<span id="commSav6-85" class="commSav" >opposite (x | x = 'left) == 'right</span>
<div id="mathAns6-85" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Try it out.
</p>



<div id="spadComm6-86" class="spadComm" >
<form id="formComm6-86" action="javascript:makeRequest('6-86');" >
<input id="comm6-86" type="text" class="command" style="width: 40em;" value="for x in ['right,'left,'inbetween] repeat output opposite x" />
</form>
<span id="commSav6-86" class="commSav" >for x in ['right,'left,'inbetween] repeat output opposite x</span>
<div id="mathAns6-86" ></div>
</div>




<div class="verbatim"><br />
Compiling&nbsp;function&nbsp;opposite&nbsp;with&nbsp;type&nbsp;<br />
&nbsp;&nbsp;&nbsp;OrderedVariableList&nbsp;[right,&nbsp;left,inbetween]&nbsp;-&gt;&nbsp;Symbol&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;left<br />
&nbsp;right<br />
&nbsp;<br />
The&nbsp;function&nbsp;opposite&nbsp;is&nbsp;not&nbsp;defined&nbsp;for&nbsp;the&nbsp;given&nbsp;argument(s).<br />
</div>



<p>Explicit predicates tell FriCAS that the given function definition
piece is to be applied if the predicate evaluates to <span class="teletype">true</span> for
the arguments to the function.  You can use such <span class="italic">constant</span>
arguments for integers, <span class="index">function:constant argument</span><a name="chapter-6-28"/> strings,
and quoted symbols.  <span class="index">constant function argument</span><a name="chapter-6-29"/> The <span class="teletype">Boolean</span> values <span class="teletype">true</span> and <span class="teletype">false</span> can also be used if qualified with
``<math xmlns="&mathml;" mathsize="big"><mstyle><mo>@</mo></mstyle></math>'' or ``<math xmlns="&mathml;" mathsize="big"><mstyle><mi> $</mi></mstyle></math>'' and <span class="teletype">Boolean</span>.  The following are all valid
function definition fragments using constant arguments.
</p>



<div class="verbatim"><br />
a(1)&nbsp;==&nbsp;...<br />
b("unramified")&nbsp;==&nbsp;...<br />
c('untested)&nbsp;==&nbsp;...<br />
d(true@Boolean)&nbsp;==&nbsp;...<br />
</div>



<p>If a function has more than one argument, each argument can have its
own predicate.  However, if a predicate involves two or more
arguments, it must be given <span class="italic">after</span> all the arguments mentioned in
the predicate have been given.  You are always safe to give a single
predicate at the end of the argument list.
</p>


<p>A function involving predicates on two arguments.
</p>



<div id="spadComm6-87" class="spadComm" >
<form id="formComm6-87" action="javascript:makeRequest('6-87');" >
<input id="comm6-87" type="text" class="command" style="width: 32em;" value="inFirstHalfQuadrant(x | x > 0,y | y &lt; x) == true" />
</form>
<span id="commSav6-87" class="commSav" >inFirstHalfQuadrant(x | x > 0,y | y &lt; x) == true</span>
<div id="mathAns6-87" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>This is incorrect as it gives a predicate on <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math> before the argument
<math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math> is given.
</p>



<div id="spadComm6-88" class="spadComm" >
<form id="formComm6-88" action="javascript:makeRequest('6-88');" >
<input id="comm6-88" type="text" class="command" style="width: 34em;" value="inFirstHalfQuadrant(x | x > 0 and y &lt; x,y) == true" />
</form>
<span id="commSav6-88" class="commSav" >inFirstHalfQuadrant(x | x > 0 and y &lt; x,y) == true</span>
<div id="mathAns6-88" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;1&nbsp;old&nbsp;definition(s)&nbsp;deleted&nbsp;for&nbsp;function&nbsp;or&nbsp;rule&nbsp;inFirstHalfQuadrant<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>It is always correct to write the predicate at the end.
</p>



<div id="spadComm6-89" class="spadComm" >
<form id="formComm6-89" action="javascript:makeRequest('6-89');" >
<input id="comm6-89" type="text" class="command" style="width: 34em;" value="inFirstHalfQuadrant(x,y | x > 0 and y &lt; x) == true" />
</form>
<span id="commSav6-89" class="commSav" >inFirstHalfQuadrant(x,y | x > 0 and y &lt; x) == true</span>
<div id="mathAns6-89" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;1&nbsp;old&nbsp;definition(s)&nbsp;deleted&nbsp;for&nbsp;function&nbsp;or&nbsp;rule&nbsp;inFirstHalfQuadrant<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Here is the rest of the definition.
</p>



<div id="spadComm6-90" class="spadComm" >
<form id="formComm6-90" action="javascript:makeRequest('6-90');" >
<input id="comm6-90" type="text" class="command" style="width: 22em;" value="inFirstHalfQuadrant(x,y) == false" />
</form>
<span id="commSav6-90" class="commSav" >inFirstHalfQuadrant(x,y) == false</span>
<div id="mathAns6-90" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Try it out.
</p>



<div id="spadComm6-91" class="spadComm" >
<form id="formComm6-91" action="javascript:makeRequest('6-91');" >
<input id="comm6-91" type="text" class="command" style="width: 27em;" value="[inFirstHalfQuadrant(i,3) for i in 1..5]" />
</form>
<span id="commSav6-91" class="commSav" >[inFirstHalfQuadrant(i,3) for i in 1..5]</span>
<div id="mathAns6-91" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;inFirstHalfQuadrant&nbsp;with&nbsp;type&nbsp;(PositiveInteger,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PositiveInteger)&nbsp;-&gt;&nbsp;Boolean&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mrow><mtext mathvariant='monospace'>false</mtext></mrow><mo>,</mo><mrow><mtext mathvariant='monospace'>false</mtext></mrow><mo>,</mo><mrow><mtext mathvariant='monospace'>false</mtext></mrow><mo>,</mo><mrow><mtext mathvariant='monospace'>true</mtext></mrow><mo>,</mo><mrow><mtext mathvariant='monospace'>true</mtext></mrow><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Boolean
</div>





</div>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-6.10.xhtml" style="margin-right: 10px;">Previous Section 6.10 Compiling vs. Interpreting</a><a href="section-6.12.xhtml" style="margin-right: 10px;">Next Section 6.12 Caching Previously Computed Results</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>