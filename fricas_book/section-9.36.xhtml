<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section9.36</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-9.35.xhtml" style="margin-right: 10px;">Previous Section 9.35 IntegerLinearDependence</a><a href="section-9.37.xhtml" style="margin-right: 10px;">Next Section 9.37 Kernel</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-9.36">
<h2 class="sectiontitle">9.36  IntegerNumberTheoryFunctions</h2>


<a name="IntegerNumberTheoryFunctionsXmpPage" class="label"/>


<p>The <span class="teletype">IntegerNumberTheoryFunctions</span> package contains a variety of
operations of interest to number theorists.  Many of these operations
deal with divisibility properties of integers.  (Recall that an
integer <span class="teletype">a</span> divides an integer <span class="teletype">b</span> if there is an integer 
<span class="teletype">c</span> such that <span class="teletype">b = a * c</span>.)
</p>


<p>The operation <span class="spadfunFrom" >divisors</span><span class="index">divisors</span><a name="chapter-9-104"/><span class="index">IntegerNumberTheoryFunctions</span><a name="chapter-9-105"/>
returns a list of the divisors of an integer.
</p>




<div id="spadComm9-146" class="spadComm" >
<form id="formComm9-146" action="javascript:makeRequest('9-146');" >
<input id="comm9-146" type="text" class="command" style="width: 16em;" value="div144 := divisors(144) " />
</form>
<span id="commSav9-146" class="commSav" >div144 := divisors(144) </span>
<div id="mathAns9-146" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>12</mn><mo>,</mo><mn>16</mn><mo>,</mo><mn>18</mn><mo>,</mo><mn>24</mn><mo>,</mo><mn>36</mn><mo>,</mo><mn>48</mn><mo>,</mo><mn>72</mn><mo>,</mo><mn>144</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>You can now compute the number of divisors of <span class="teletype">144</span> and the sum of
the divisors of <span class="teletype">144</span> by counting and summing the elements of the
list we just created.
</p>




<div id="spadComm9-147" class="spadComm" >
<form id="formComm9-147" action="javascript:makeRequest('9-147');" >
<input id="comm9-147" type="text" class="command" style="width: 8em;" value=" #(div144) " />
</form>
<span id="commSav9-147" class="commSav" > #(div144) </span>
<div id="mathAns9-147" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>15</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm9-148" class="spadComm" >
<form id="formComm9-148" action="javascript:makeRequest('9-148');" >
<input id="comm9-148" type="text" class="command" style="width: 12em;" value="reduce(+,div144) " />
</form>
<span id="commSav9-148" class="commSav" >reduce(+,div144) </span>
<div id="mathAns9-148" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>403</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Of course, you can compute the number of divisors of an integer 
<span class="teletype">n</span>, usually denoted <span class="teletype">d(n)</span>, and the sum of the divisors of an
integer <span class="teletype">n</span>, usually denoted <span class="teletype"> <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math>(n)</span>, without ever
listing the divisors of <span class="teletype">n</span>.
</p>


<p>In FriCAS, you can simply call the operations
<span class="spadfunFrom" >numberOfDivisors</span><span class="index">numberOfDivisors</span><a name="chapter-9-106"/><span class="index">IntegerNumberTheoryFunctions</span><a name="chapter-9-107"/> and
<span class="spadfunFrom" >sumOfDivisors</span><span class="index">sumOfDivisors</span><a name="chapter-9-108"/><span class="index">IntegerNumberTheoryFunctions</span><a name="chapter-9-109"/>.
</p>




<div id="spadComm9-149" class="spadComm" >
<form id="formComm9-149" action="javascript:makeRequest('9-149');" >
<input id="comm9-149" type="text" class="command" style="width: 14em;" value="numberOfDivisors(144)" />
</form>
<span id="commSav9-149" class="commSav" >numberOfDivisors(144)</span>
<div id="mathAns9-149" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>15</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm9-150" class="spadComm" >
<form id="formComm9-150" action="javascript:makeRequest('9-150');" >
<input id="comm9-150" type="text" class="command" style="width: 12em;" value="sumOfDivisors(144)" />
</form>
<span id="commSav9-150" class="commSav" >sumOfDivisors(144)</span>
<div id="mathAns9-150" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>403</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>The key is that <span class="teletype">d(n)</span> and <span class="teletype"> <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math>(n)</span> are <span class="italic">multiplicative
functions.</span>  This means that when <span class="teletype">n</span> and <span class="teletype">m</span> are relatively
prime, that is, when <span class="teletype">n</span> and <span class="teletype">m</span> have no prime factor in
common, then <span class="teletype">d(nm) = d(n) d(m)</span> and <span class="teletype"> <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math>(nm) =
 <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math>(n)  <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math>(m)</span>.  Note that these functions are trivial to
compute when <span class="teletype">n</span> is a prime power and are computed for general
<span class="teletype">n</span> from the prime factorization of <span class="teletype">n</span>.  Other examples of
multiplicative functions are <span class="teletype"> <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math>(n)</span>, the sum of the
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>k</mi></mstyle></math>-th powers of the divisors of <span class="teletype">n</span> and  <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math>, the
number of integers between 1 and <span class="teletype">n</span> which are prime to <span class="teletype">n</span>.
The corresponding FriCAS operations are called
<span class="spadfunFrom" >sumOfKthPowerDivisors</span><span class="index">sumOfKthPowerDivisors</span><a name="chapter-9-110"/><span class="index">IntegerNumberTheoryFunctions</span><a name="chapter-9-111"/> and
<span class="spadfunFrom" >eulerPhi</span><span class="index">eulerPhi</span><a name="chapter-9-112"/><span class="index">IntegerNumberTheoryFunctions</span><a name="chapter-9-113"/>.
</p>


<p>An interesting function is <span class="teletype"> <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03bb;</mi></mstyle></math>(n)</span>, the M&#x00f6;bius  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03bb;</mi></mstyle></math>
function, defined as follows: <span class="teletype"> <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03bb;</mi></mstyle></math>(1) = 1</span>, <span class="teletype"> <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03bb;</mi></mstyle></math>(n) = 0</span>,
when <span class="teletype">n</span> is divisible by a square, and <span class="teletype"> <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>&#x03bb;</mi><mo>=</mo><msup><mrow><mo>(</mo><mo>-</mo><mn>1</mn><mo>)</mo></mrow><mi>k</mi></msup></mrow></mstyle></math></span>, when
<span class="teletype">n</span> is the product of <span class="teletype">k</span> distinct primes.  The corresponding
FriCAS operation is <span class="spadfunFrom" >moebiusMu</span><span class="index">moebiusMu</span><a name="chapter-9-114"/><span class="index">IntegerNumberTheoryFunctions</span><a name="chapter-9-115"/>.  
This function occurs in the following theorem:
</p>




<p><span style="font-weight: bold;"> Theorem</span> (M&#x00f6;bius Inversion Formula): <br /> Let <span class="teletype">f(n)</span>
be a function on the positive integers and let <span class="teletype">F(n)</span> be defined
by <math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mi>F</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><msub><mo>&#x2211;</mo><mrow><mi>d</mi><mo>&#x007c;</mo><mi>n</mi></mrow></msub><mi>f</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow></mstyle></math> sum of <span class="teletype">f(n)</span> over
<span class="teletype">d | n</span> where the sum is taken over the positive divisors of 
<span class="teletype">n</span>.  Then the values of <span class="teletype">f(n)</span> can be recovered from the values of
<span class="teletype">F(n)</span>: 
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mi>f</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><msub><mo>&#x2211;</mo><mrow><mi>d</mi><mo>&#x007c;</mo><mi>n</mi></mrow></msub><mi>&#x03bb;</mi><mo>(</mo><mi>n</mi><mo>)</mo><mi>F</mi><mo>(</mo><mfrac><mi>n</mi><mi>d</mi></mfrac><mo>)</mo></mrow></mstyle></math>
where again the sum is taken over the positive divisors of <span class="teletype">n</span>.
</p>


<p>When <span class="teletype">f(n) = 1</span>, then <span class="teletype">F(n) = d(n)</span>.  Thus, if you sum  <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math> over the positive divisors <span class="teletype">d</span> of <span class="teletype">n</span>, you
should always get <span class="teletype">1</span>.
</p>




<div id="spadComm9-151" class="spadComm" >
<form id="formComm9-151" action="javascript:makeRequest('9-151');" >
<input id="comm9-151" type="text" class="command" style="width: 56em;" value="f1(n) == reduce(+,[moebiusMu(d) * numberOfDivisors(quo(n,d)) for d in divisors(n)]) " />
</form>
<span id="commSav9-151" class="commSav" >f1(n) == reduce(+,[moebiusMu(d) * numberOfDivisors(quo(n,d)) for d in divisors(n)]) </span>
<div id="mathAns9-151" ></div>
</div>




<div class="returnType">
Void
</div>





<div id="spadComm9-152" class="spadComm" >
<form id="formComm9-152" action="javascript:makeRequest('9-152');" >
<input id="comm9-152" type="text" class="command" style="width: 6em;" value="f1(200) " />
</form>
<span id="commSav9-152" class="commSav" >f1(200) </span>
<div id="mathAns9-152" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm9-153" class="spadComm" >
<form id="formComm9-153" action="javascript:makeRequest('9-153');" >
<input id="comm9-153" type="text" class="command" style="width: 6em;" value="f1(846) " />
</form>
<span id="commSav9-153" class="commSav" >f1(846) </span>
<div id="mathAns9-153" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>Similarly, when <span class="teletype">f(n) = n</span>, then <span class="teletype">F(n) =  <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math>(n)</span>.  Thus,
if you sum <span class="teletype"> <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03bb;</mi></mstyle></math>(d)  <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math>  <math xmlns="&mathml;" mathsize="big"><mstyle></mstyle></math>(n/d)</span> over the positive
divisors <span class="teletype">d</span> of <span class="teletype">n</span>, you should always get <span class="teletype">n</span>.
</p>




<div id="spadComm9-154" class="spadComm" >
<form id="formComm9-154" action="javascript:makeRequest('9-154');" >
<input id="comm9-154" type="text" class="command" style="width: 54em;" value="f2(n) == reduce(+,[moebiusMu(d) * sumOfDivisors(quo(n,d)) for d in divisors(n)]) " />
</form>
<span id="commSav9-154" class="commSav" >f2(n) == reduce(+,[moebiusMu(d) * sumOfDivisors(quo(n,d)) for d in divisors(n)]) </span>
<div id="mathAns9-154" ></div>
</div>




<div class="returnType">
Void
</div>





<div id="spadComm9-155" class="spadComm" >
<form id="formComm9-155" action="javascript:makeRequest('9-155');" >
<input id="comm9-155" type="text" class="command" style="width: 6em;" value="f2(200) " />
</form>
<span id="commSav9-155" class="commSav" >f2(200) </span>
<div id="mathAns9-155" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>200</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm9-156" class="spadComm" >
<form id="formComm9-156" action="javascript:makeRequest('9-156');" >
<input id="comm9-156" type="text" class="command" style="width: 6em;" value="f2(846) " />
</form>
<span id="commSav9-156" class="commSav" >f2(846) </span>
<div id="mathAns9-156" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>846</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>



<p>The Fibonacci numbers are defined by  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>F</mi><mo>(</mo><mn>1</mn><mo>)</mo><mo>=</mo><mi>F</mi><mo>(</mo><mn>2</mn><mo>)</mo><mo>=</mo><mn>1</mn></mrow></mstyle></math> and
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>F</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>F</mi><mo>(</mo><mi>n</mi><mo>-</mo><mn>1</mn><mo>)</mo><mo>+</mo><mi>F</mi><mo>(</mo><mi>n</mi><mo>-</mo><mn>2</mn><mo>)</mo></mrow></mstyle></math> for  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>n</mi><mo>=</mo><mn>3</mn><mo>,</mo><mn>4</mn><mo>,</mo><mo>&#x2026;</mo></mrow></mstyle></math>.
</p>


<p>The operation <span class="spadfunFrom" >fibonacci</span><span class="index">fibonacci</span><a name="chapter-9-116"/><span class="index">IntegerNumberTheoryFunctions</span><a name="chapter-9-117"/>
computes the  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>-th Fibonacci number.
</p>




<div id="spadComm9-157" class="spadComm" >
<form id="formComm9-157" action="javascript:makeRequest('9-157');" >
<input id="comm9-157" type="text" class="command" style="width: 9em;" value="fibonacci(25)" />
</form>
<span id="commSav9-157" class="commSav" >fibonacci(25)</span>
<div id="mathAns9-157" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>75025</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm9-158" class="spadComm" >
<form id="formComm9-158" action="javascript:makeRequest('9-158');" >
<input id="comm9-158" type="text" class="command" style="width: 20em;" value="[fibonacci(n) for n in 1..15]" />
</form>
<span id="commSav9-158" class="commSav" >[fibonacci(n) for n in 1..15]</span>
<div id="mathAns9-158" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>13</mn><mo>,</mo><mn>21</mn><mo>,</mo><mn>34</mn><mo>,</mo><mn>55</mn><mo>,</mo><mn>89</mn><mo>,</mo><mn>144</mn><mo>,</mo><mn>233</mn><mo>,</mo><mn>377</mn><mo>,</mo><mn>610</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>Fibonacci numbers can also be expressed as sums of binomial coefficients.
</p>




<div id="spadComm9-159" class="spadComm" >
<form id="formComm9-159" action="javascript:makeRequest('9-159');" >
<input id="comm9-159" type="text" class="command" style="width: 42em;" value="fib(n) == reduce(+,[binomial(n-1-k,k) for k in 0..quo(n-1,2)]) " />
</form>
<span id="commSav9-159" class="commSav" >fib(n) == reduce(+,[binomial(n-1-k,k) for k in 0..quo(n-1,2)]) </span>
<div id="mathAns9-159" ></div>
</div>




<div class="returnType">
Void
</div>





<div id="spadComm9-160" class="spadComm" >
<form id="formComm9-160" action="javascript:makeRequest('9-160');" >
<input id="comm9-160" type="text" class="command" style="width: 6em;" value="fib(25) " />
</form>
<span id="commSav9-160" class="commSav" >fib(25) </span>
<div id="mathAns9-160" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>75025</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm9-161" class="spadComm" >
<form id="formComm9-161" action="javascript:makeRequest('9-161');" >
<input id="comm9-161" type="text" class="command" style="width: 16em;" value="[fib(n) for n in 1..15] " />
</form>
<span id="commSav9-161" class="commSav" >[fib(n) for n in 1..15] </span>
<div id="mathAns9-161" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>13</mn><mo>,</mo><mn>21</mn><mo>,</mo><mn>34</mn><mo>,</mo><mn>55</mn><mo>,</mo><mn>89</mn><mo>,</mo><mn>144</mn><mo>,</mo><mn>233</mn><mo>,</mo><mn>377</mn><mo>,</mo><mn>610</mn><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: List Integer
</div>



<p>Quadratic symbols can be computed with the operations
<span class="spadfunFrom" >legendre</span><span class="index">legendre</span><a name="chapter-9-118"/><span class="index">IntegerNumberTheoryFunctions</span><a name="chapter-9-119"/> and
<span class="spadfunFrom" >jacobi</span><span class="index">jacobi</span><a name="chapter-9-120"/><span class="index">IntegerNumberTheoryFunctions</span><a name="chapter-9-121"/>.  The Legendre
symbol  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mfrac><mi>a</mi><mi>p</mi></mfrac><mo>)</mo></mrow></mstyle></math> is defined for integers  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> and
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>p</mi></mstyle></math> with  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>p</mi></mstyle></math> an odd prime number.  By definition, 
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mfrac><mi>a</mi><mi>p</mi></mfrac><mo>)</mo></mrow></mstyle></math> = +1, when  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> is a square  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mrow><mtext>mod&nbsp;</mtext></mrow><mi>p</mi><mo>)</mo></mrow></mstyle></math>,
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mfrac><mi>a</mi><mi>p</mi></mfrac><mo>)</mo></mrow></mstyle></math> = -1, when  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> is not a square  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mrow><mtext>mod&nbsp;</mtext></mrow><mi>p</mi><mo>)</mo></mrow></mstyle></math>,
and  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mfrac><mi>a</mi><mi>p</mi></mfrac><mo>)</mo></mrow></mstyle></math> = 0, when  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>a</mi></mstyle></math> is divisible by  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>p</mi></mstyle></math>.
</p>


<p>You compute  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mfrac><mi>a</mi><mi>p</mi></mfrac><mo>)</mo></mrow></mstyle></math> via the command <span class="teletype">legendre(a,p)</span>.
</p>




<div id="spadComm9-162" class="spadComm" >
<form id="formComm9-162" action="javascript:makeRequest('9-162');" >
<input id="comm9-162" type="text" class="command" style="width: 9em;" value="legendre(3,5)" />
</form>
<span id="commSav9-162" class="commSav" >legendre(3,5)</span>
<div id="mathAns9-162" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mn>1</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Integer
</div>





<div id="spadComm9-163" class="spadComm" >
<form id="formComm9-163" action="javascript:makeRequest('9-163');" >
<input id="comm9-163" type="text" class="command" style="width: 11em;" value="legendre(23,691)" />
</form>
<span id="commSav9-163" class="commSav" >legendre(23,691)</span>
<div id="mathAns9-163" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mn>1</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Integer
</div>



<p>The Jacobi symbol  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>(</mo><mfrac><mi>a</mi><mi>n</mi></mfrac><mo>)</mo></mrow></mstyle></math> is the usual extension of
the Legendre symbol, where <span class="teletype">n</span> is an arbitrary integer.  The most
important property of the Jacobi symbol is the following: if <span class="teletype">K</span>
is a quadratic field with discriminant <span class="teletype">d</span> and quadratic character
 <math xmlns="&mathml;" mathsize="big"><mstyle><mo>&#x03c7;</mo></mstyle></math>, then  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>&#x03c7;</mo><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mo>(</mo><mi>d</mi><mo>/</mo><mi>n</mi><mo>)</mo></mrow></mstyle></math>.  Thus, you can use the Jacobi symbol
to compute, say, the class numbers of imaginary quadratic fields from
a standard class number formula.
</p>


<p>This function computes the class number of the imaginary quadratic
field with discriminant <span class="teletype">d</span>.
</p>




<div id="spadComm9-164" class="spadComm" >
<form id="formComm9-164" action="javascript:makeRequest('9-164');" >
<input id="comm9-164" type="text" class="command" style="width: 52em;" value="h(d) == quo(reduce(+, [jacobi(d,k) for k in 1..quo(-d, 2)]), 2 - jacobi(d,2)) " />
</form>
<span id="commSav9-164" class="commSav" >h(d) == quo(reduce(+, [jacobi(d,k) for k in 1..quo(-d, 2)]), 2 - jacobi(d,2)) </span>
<div id="mathAns9-164" ></div>
</div>




<div class="returnType">
Void
</div>





<div id="spadComm9-165" class="spadComm" >
<form id="formComm9-165" action="javascript:makeRequest('9-165');" >
<input id="comm9-165" type="text" class="command" style="width: 6em;" value="h(-163) " />
</form>
<span id="commSav9-165" class="commSav" >h(-163) </span>
<div id="mathAns9-165" ></div>
</div>

<p>   
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</p>



<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm9-166" class="spadComm" >
<form id="formComm9-166" action="javascript:makeRequest('9-166');" >
<input id="comm9-166" type="text" class="command" style="width: 6em;" value="h(-499) " />
</form>
<span id="commSav9-166" class="commSav" >h(-499) </span>
<div id="mathAns9-166" ></div>
</div>

<p>   
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>3</mn></mstyle></math>
</p>



<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm9-167" class="spadComm" >
<form id="formComm9-167" action="javascript:makeRequest('9-167');" >
<input id="comm9-167" type="text" class="command" style="width: 6em;" value="h(-1832) " />
</form>
<span id="commSav9-167" class="commSav" >h(-1832) </span>
<div id="mathAns9-167" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>26</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-9.35.xhtml" style="margin-right: 10px;">Previous Section 9.35 IntegerLinearDependence</a><a href="section-9.37.xhtml" style="margin-right: 10px;">Next Section 9.37 Kernel</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>