<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section6.2</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-6.1.xhtml" style="margin-right: 10px;">Previous Section 6.1 Functions vs. Macros</a><a href="section-6.3.xhtml" style="margin-right: 10px;">Next Section 6.3 Introduction to Functions</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-6.2">
<h2 class="sectiontitle">6.2  Macros</h2>


<a name="ugUserMacros" class="label"/>


<p>A <span class="italic">macro</span> provides general textual substitution of <span class="index">macro</span><a name="chapter-6-7"/>
an FriCAS expression for a name.  You can think of a macro as being a
generalized abbreviation.  You can only have one macro in your
workspace with a given name, no matter how many arguments it has.
</p>




<div class="boxed2">


<div class="boxed">



<p>The two general forms for macros are
</p>



<div class="center" style="text-align: center;">


<p><span class="teletype">macro</span> <span class="italic">name</span> <span class="teletype">==</span> <span class="italic">body</span> <br/>
<span class="teletype">macro</span> <span class="italic">name(arg1,...)</span> <span class="teletype">==</span> <span class="italic">body</span>
</p>



</div>


<p>where the body of the macro can be any FriCAS expression.<br/>
</p>



</div>
</div>



<p>For example, suppose you decided that you like to use <span class="teletype">df</span> for 
<span class="teletype">D</span>.  You define the macro <span class="teletype">df</span> like this.
</p>



<div id="spadComm6-3" class="spadComm" >
<form id="formComm6-3" action="javascript:makeRequest('6-3');" >
<input id="comm6-3" type="text" class="command" style="width: 9em;" value="macro df == D" />
</form>
<span id="commSav6-3" class="commSav" >macro df == D</span>
<div id="mathAns6-3" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Whenever you type <span class="teletype">df</span>, the system expands it to <span class="teletype">D</span>.
</p>



<div id="spadComm6-4" class="spadComm" >
<form id="formComm6-4" action="javascript:makeRequest('6-4');" >
<input id="comm6-4" type="text" class="command" style="width: 12em;" value="df(x^2 + x + 1,x)" />
</form>
<span id="commSav6-4" class="commSav" >df(x^2 + x + 1,x)</span>
<div id="mathAns6-4" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>2</mn><mo></mo><mi>x</mi></mrow><mo>+</mo><mn>1</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Integer
</div>



<p>Macros can be parameterized and so can be used for many different
kinds of objects.
</p>



<div id="spadComm6-5" class="spadComm" >
<form id="formComm6-5" action="javascript:makeRequest('6-5');" >
<input id="comm6-5" type="text" class="command" style="width: 16em;" value="macro ff(x) == x^2 + 1" />
</form>
<span id="commSav6-5" class="commSav" >macro ff(x) == x^2 + 1</span>
<div id="mathAns6-5" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Apply it to a number, a symbol, or an expression.
</p>



<div id="spadComm6-6" class="spadComm" >
<form id="formComm6-6" action="javascript:makeRequest('6-6');" >
<input id="comm6-6" type="text" class="command" style="width: 3em;" value="ff z" />
</form>
<span id="commSav6-6" class="commSav" >ff z</span>
<div id="mathAns6-6" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mi>z</mi><mn>2</mn></msup></mrow><mo>+</mo><mn>1</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Integer
</div>



<p>Macros can also be nested, but you get an error message if you
run out of space because of an infinite nesting loop.
</p>



<div id="spadComm6-7" class="spadComm" >
<form id="formComm6-7" action="javascript:makeRequest('6-7');" >
<input id="comm6-7" type="text" class="command" style="width: 19em;" value="macro gg(x) == ff(2*x - 2/3)" />
</form>
<span id="commSav6-7" class="commSav" >macro gg(x) == ff(2*x - 2/3)</span>
<div id="mathAns6-7" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>This new macro is fine as it does not produce a loop.
</p>



<div id="spadComm6-8" class="spadComm" >
<form id="formComm6-8" action="javascript:makeRequest('6-8');" >
<input id="comm6-8" type="text" class="command" style="width: 5em;" value="gg(1/w)" />
</form>
<span id="commSav6-8" class="commSav" >gg(1/w)</span>
<div id="mathAns6-8" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mfrac><mrow><mrow><mn>13</mn><mo></mo><mrow><msup><mi>w</mi><mn>2</mn></msup></mrow></mrow><mo>-</mo><mrow><mn>24</mn><mo></mo><mi>w</mi></mrow><mo>+</mo><mn>36</mn></mrow><mrow><mn>9</mn><mo></mo><mrow><msup><mi>w</mi><mn>2</mn></msup></mrow></mrow></mfrac></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Polynomial Integer
</div>



<p>This, however, loops since <span class="teletype">gg</span> is defined in terms of <span class="teletype">ff</span>.
</p>



<div id="spadComm6-9" class="spadComm" >
<form id="formComm6-9" action="javascript:makeRequest('6-9');" >
<input id="comm6-9" type="text" class="command" style="width: 14em;" value="macro ff(x) == gg(-x)" />
</form>
<span id="commSav6-9" class="commSav" >macro ff(x) == gg(-x)</span>
<div id="mathAns6-9" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>The body of a macro can be a block.
</p>



<div id="spadComm6-10" class="spadComm" >
<form id="formComm6-10" action="javascript:makeRequest('6-10');" >
<input id="comm6-10" type="text" class="command" style="width: 51em;" value="macro next == (past := present; present := future; future := past + present)" />
</form>
<span id="commSav6-10" class="commSav" >macro next == (past := present; present := future; future := past + present)</span>
<div id="mathAns6-10" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Before entering <span class="teletype">next</span>, we need values for <span class="teletype">present</span> and <span class="teletype">future</span>.
</p>



<div id="spadComm6-11" class="spadComm" >
<form id="formComm6-11" action="javascript:makeRequest('6-11');" >
<input id="comm6-11" type="text" class="command" style="width: 15em;" value="present : Integer := 0" />
</form>
<span id="commSav6-11" class="commSav" >present : Integer := 0</span>
<div id="mathAns6-11" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>0</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Integer
</div>





<div id="spadComm6-12" class="spadComm" >
<form id="formComm6-12" action="javascript:makeRequest('6-12');" >
<input id="comm6-12" type="text" class="command" style="width: 14em;" value="future : Integer := 1" />
</form>
<span id="commSav6-12" class="commSav" >future : Integer := 1</span>
<div id="mathAns6-12" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Integer
</div>



<p>Repeatedly evaluating <span class="teletype">next</span> produces the next Fibonacci number.
</p>



<div id="spadComm6-13" class="spadComm" >
<form id="formComm6-13" action="javascript:makeRequest('6-13');" >
<input id="comm6-13" type="text" class="command" style="width: 3em;" value="next" />
</form>
<span id="commSav6-13" class="commSav" >next</span>
<div id="mathAns6-13" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>1</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Integer
</div>



<p>And the next one.
</p>



<div id="spadComm6-14" class="spadComm" >
<form id="formComm6-14" action="javascript:makeRequest('6-14');" >
<input id="comm6-14" type="text" class="command" style="width: 3em;" value="next" />
</form>
<span id="commSav6-14" class="commSav" >next</span>
<div id="mathAns6-14" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Integer
</div>



<p>Here is the infinite stream of the rest of the Fibonacci numbers.
</p>



<div id="spadComm6-15" class="spadComm" >
<form id="formComm6-15" action="javascript:makeRequest('6-15');" >
<input id="comm6-15" type="text" class="command" style="width: 13em;" value="[next for i in 1..]" />
</form>
<span id="commSav6-15" class="commSav" >[next for i in 1..]</span>
<div id="mathAns6-15" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>13</mn><mo>,</mo><mn>21</mn><mo>,</mo><mn>34</mn><mo>,</mo><mn>55</mn><mo>,</mo><mn>89</mn><mo>,</mo><mn>144</mn><mo>,</mo><mn>233</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Integer
</div>



<p>Bundle all the above lines into a single macro.
</p>



<div class="verbatim"><br />
macro&nbsp;fibStream&nbsp;==<br />
&nbsp;&nbsp;present&nbsp;:&nbsp;Integer&nbsp;:=&nbsp;1<br />
&nbsp;&nbsp;future&nbsp;:&nbsp;Integer&nbsp;:=&nbsp;1<br />
&nbsp;&nbsp;[next&nbsp;for&nbsp;i&nbsp;in&nbsp;1..]&nbsp;where<br />
&nbsp;&nbsp;&nbsp;&nbsp;macro&nbsp;next&nbsp;==<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;past&nbsp;:=&nbsp;present<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;present&nbsp;:=&nbsp;future<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;future&nbsp;:=&nbsp;past&nbsp;+&nbsp;present<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Use <span class="spadfunFrom" >concat</span><span class="index">concat</span><a name="chapter-6-8"/><span class="index">Stream</span><a name="chapter-6-9"/> to start with the first two
<span class="index">Fibonacci numbers</span><a name="chapter-6-10"/> Fibonacci numbers.
</p>



<div id="spadComm6-16" class="spadComm" >
<form id="formComm6-16" action="javascript:makeRequest('6-16');" >
<input id="comm6-16" type="text" class="command" style="width: 16em;" value="concat([0,1],fibStream)" />
</form>
<span id="commSav6-16" class="commSav" >concat([0,1],fibStream)</span>
<div id="mathAns6-16" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>0</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>13</mn><mo>,</mo><mn>21</mn><mo>,</mo><mn>34</mn><mo>,</mo><mn>55</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Integer
</div>



<p>The library operation <span style="font-weight: bold;"> fibonacci</span> is an easier way to compute
these numbers.
</p>




<div id="spadComm6-17" class="spadComm" >
<form id="formComm6-17" action="javascript:makeRequest('6-17');" >
<input id="comm6-17" type="text" class="command" style="width: 18em;" value="[fibonacci i for i in 1..]" />
</form>
<span id="commSav6-17" class="commSav" >[fibonacci i for i in 1..]</span>
<div id="mathAns6-17" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>[</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>8</mn><mo>,</mo><mn>13</mn><mo>,</mo><mn>21</mn><mo>,</mo><mn>34</mn><mo>,</mo><mn>55</mn><mo>,</mo><mo>&#x2026;</mo><mo>]</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Stream Integer
</div>





</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-6.1.xhtml" style="margin-right: 10px;">Previous Section 6.1 Functions vs. Macros</a><a href="section-6.3.xhtml" style="margin-right: 10px;">Next Section 6.3 Introduction to Functions</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>