<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section13.2</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-13.1.xhtml" style="margin-right: 10px;">Previous Section 13.1 Domains vs. Packages</a><a href="section-13.3.xhtml" style="margin-right: 10px;">Next Section 13.3 Category Assertions</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-13.2">
<h2 class="sectiontitle">13.2  Definitions</h2>


<a name="ugDomainsDefs" class="label"/>



<p>The syntax for defining a domain constructor is the same as for any
function in FriCAS:
</p>



<div class="center" style="text-align: center;">
<span class="teletype"> <span class="italic"> DomainForm</span> : <span class="italic"> Exports</span> == <span class="italic"> Implementation</span></span>
</div>


<p>As this definition usually extends over many lines, a
<math xmlns="&mathml;" mathsize="big"><mstyle><mi>where</mi></mstyle></math> expression is generally used instead.
<span class="index">where</span><a name="chapter-13-0"/>
</p>


<p>A recommended format for the definition of a domain is:<br />
</p>



<p><span class="teletype">
<span class="italic"> DomainForm</span> : Exports  ==  Implementation where <br />
<span class="hspace75pc"><span class="italic"> optional type declarations</span></span> <br />
<span class="hspace75pc">Exports  ==  [<span class="italic"> Category Assertions</span>] with</span> <br />
<span class="hspace200pc"><span class="italic"> list of exported operations</span></span> <br />
<span class="hspace75pc">Implementation  ==  [<span class="italic"> Add Domain</span>] add</span> <br />
<span class="hspace200pc">[Rep := <span class="italic"> Representation</span>]</span> <br />
<span class="hspace200pc"><span class="italic"> list of function definitions for exported operations</span></span><br />
</span>
</p>



<p>Note: The brackets <span class="teletype"> [ ]</span> here denote optionality.
</p>


<p>A complete domain constructor definition for <span class="teletype"> QuadraticForm</span> is
shown below.
Interestingly, this little domain illustrates all the new concepts you
need to learn.
</p>


<a name="figquadform" class="label"/>




<div class="verbatim"><br />
)abbrev&nbsp;domain&nbsp;QFORM&nbsp;QuadraticForm<br />
<br />
++&nbsp;Description:<br />
++&nbsp;&nbsp;&nbsp;This&nbsp;domain&nbsp;provides&nbsp;modest&nbsp;support&nbsp;for<br />
++&nbsp;&nbsp;&nbsp;quadratic&nbsp;forms.<br />
QuadraticForm(n,&nbsp;K):&nbsp;Exports&nbsp;==&nbsp;Implementation&nbsp;where<br />
&nbsp;&nbsp;&nbsp;&nbsp;n:&nbsp;PositiveInteger<br />
&nbsp;&nbsp;&nbsp;&nbsp;K:&nbsp;Field<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;Exports&nbsp;==&nbsp;AbelianGroup&nbsp;with&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--The&nbsp;exports<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quadraticForm:&nbsp;SquareMatrix(n,K)&nbsp;-&gt;&nbsp;$&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--export&nbsp;this<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++&nbsp;\bs{}axiom\{quadraticForm(m)\}&nbsp;creates&nbsp;a&nbsp;quadratic<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++&nbsp;quadratic&nbsp;form&nbsp;from&nbsp;a&nbsp;symmetric,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++&nbsp;square&nbsp;matrix&nbsp;\bs{}axiom\{m\}.<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;matrix:&nbsp;&nbsp;$&nbsp;-&gt;&nbsp;SquareMatrix(n,K)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;export&nbsp;matrix<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++&nbsp;\bs{}axiom\{matrix(qf)\}&nbsp;creates&nbsp;a&nbsp;square&nbsp;matrix<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++&nbsp;from&nbsp;the&nbsp;quadratic&nbsp;form&nbsp;\bs{}axiom\{qf\}.<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elt:&nbsp;(&nbsp;$,&nbsp;DirectProduct(n,K))&nbsp;-&gt;&nbsp;K&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;export&nbsp;elt<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++&nbsp;\bs{}axiom\{qf(v)\}&nbsp;evaluates&nbsp;the&nbsp;quadratic&nbsp;form<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++&nbsp;\bs{}axiom\{qf\}&nbsp;on&nbsp;the&nbsp;vector&nbsp;\bs{}axiom\{v\},<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++&nbsp;producing&nbsp;a&nbsp;scalar.<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;Implementation&nbsp;==&nbsp;SquareMatrix(n,K)&nbsp;add&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--The&nbsp;exports<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rep&nbsp;:=&nbsp;SquareMatrix(n,K)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--representation<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quadraticForm&nbsp;m&nbsp;==&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--definition&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;not&nbsp;symmetric?&nbsp;m&nbsp;=&gt;&nbsp;error&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"quadraticForm&nbsp;requires&nbsp;a&nbsp;symmetric&nbsp;matrix"<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m&nbsp;::&nbsp;$<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;matrix&nbsp;q&nbsp;==&nbsp;q&nbsp;::&nbsp;Rep&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--definition&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elt(q,v)&nbsp;==&nbsp;dot(v,&nbsp;(matrix&nbsp;q&nbsp;*&nbsp;v))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--definition&nbsp;<br />
<br />
</div>


<p><div class="caption">The <span class="teletype"> QuadraticForm</span> domain.</div>
</p>



<p>A domain constructor can take any number and type of parameters.
<span class="teletype"> QuadraticForm</span> takes a positive integer <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> and a field
<math xmlns="&mathml;" mathsize="big"><mstyle><mi>K</mi></mstyle></math> as arguments.
Like a package, a domain has a set of explicit exports and an
implementation described by a capsule.
Domain constructors are documented in the same way as package constructors.
</p>


<p>Domain <span class="teletype"> QuadraticForm(n, K)</span>, for a given positive integer
<math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math> and domain <math xmlns="&mathml;" mathsize="big"><mstyle><mi>K</mi></mstyle></math>, explicitly exports three operations:
</p>




<ul>
<li>
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>quadraticForm</mi><mo>(</mo><mi>A</mi><mo>)</mo></mrow></mstyle></math> creates a quadratic form from a matrix
<math xmlns="&mathml;" mathsize="big"><mstyle><mi>A</mi></mstyle></math>.
</li>
<li><math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>matrix</mi><mo>(</mo><mi>q</mi><mo>)</mo></mrow></mstyle></math> returns the matrix <math xmlns="&mathml;" mathsize="big"><mstyle><mi>A</mi></mstyle></math> used to create
the quadratic form <math xmlns="&mathml;" mathsize="big"><mstyle><mi>q</mi></mstyle></math>.
</li>
<li><math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>q</mi><mo>.</mo><mi>v</mi></mrow></mstyle></math> computes the scalar <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mi>v</mi><mi>T</mi></msup><mi>Av</mi></mrow></mstyle></math>
for a given vector <math xmlns="&mathml;" mathsize="big"><mstyle><mi>v</mi></mstyle></math>.
</li>
</ul>



<p>Compared with the corresponding syntax given for the definition of a
package, you see that a domain constructor has three optional parts to
its definition: <span class="italic"> Category Assertions</span>, <span class="italic"> Add Domain</span>, and
<span class="italic"> Representation</span>.
</p>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-13.1.xhtml" style="margin-right: 10px;">Previous Section 13.1 Domains vs. Packages</a><a href="section-13.3.xhtml" style="margin-right: 10px;">Next Section 13.3 Category Assertions</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>