<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section2.5</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-2.4.xhtml" style="margin-right: 10px;">Previous Section 2.4 Records</a><a href="section-2.6.xhtml" style="margin-right: 10px;">Next Section 2.6 The <span class="italic">Any</span> Domain</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-2.5">
<h2 class="sectiontitle">2.5  Unions</h2>


<a name="ugTypesUnions" class="label"/>


<p>Type <span class="teletype">Union</span> is used for objects that can be of any of a specific
finite set of types.  <span class="index">Union</span><a name="chapter-2-31"/> Two versions of unions are
available, one with selectors (like records) and one without.
<span class="index">union</span><a name="chapter-2-32"/>
</p>



<a name="subsec-2.5.1"/>
<div class="subsection"  id="subsec-2.5.1">
<h3 class="subsectitle">2.5.1  Unions Without Selectors</h3>


<a name="ugTypesUnionsWOSel" class="label"/>


<p>The declaration <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>x</mi><mo>:</mo><mi>Union</mi><mo>(</mo><mi>Integer</mi><mo>,</mo><mi>String</mi><mo>,</mo><mi>Float</mi><mo>)</mo></mrow></mstyle></math> states that <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math>
can have values that are integers, strings or <span class="italic">big</span> floats.  If, for
example, the <span class="teletype">Union</span> object is an integer, the object is said to
belong to the <span class="teletype">Integer</span> <span class="italic">branch</span> of the <span class="teletype">Union</span>.  Note
that we are being a bit careless with the language here.  Technically,
the type of <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> is always <span class="teletype">Union(Integer, String, Float)</span>.  If it
belongs to the <span class="teletype">Integer</span> branch, <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> may be converted to an object
of type <span class="teletype">Integer</span>.
</p>




<div class="boxed2">


<div class="boxed">



<p>The syntax for writing a <span class="teletype">Union</span> type without selectors is
</p>



<div class="center" style="text-align: center;">


<p><span class="teletype">Union(<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>type</mtext></mrow><mn>1</mn></msub></mrow></mstyle></math>, <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>type</mtext></mrow><mn>2</mn></msub></mrow></mstyle></math>, 
..., <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>type</mtext></mrow><mi>N</mi></msub></mrow></mstyle></math>)</span>
</p>



</div>


<p>The types in a union without selectors must be distinct.<br/>
</p>



</div>
</div>



<p>It is possible to create unions like <span class="teletype">Union(Integer, PositiveInteger)</span> 
but they are difficult to work with because of the overlap in the branch 
types.  See below for the rules FriCAS uses for converting something into 
a union object.
</p>


<p>The <span class="teletype">case</span> infix <span class="index">case</span><a name="chapter-2-33"/> operator returns a <span class="teletype">Boolean</span> and can
be used to determine the branch in which an object lies.
</p>


<p>This function displays a message stating in which branch of the 
<span class="teletype">Union</span> the object (defined as <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> above) lies.
</p>




<div class="verbatim"><br />
sayBranch(x&nbsp;:&nbsp;Union(Integer,String,Float))&nbsp;:&nbsp;Void&nbsp;&nbsp;==<br />
&nbsp;&nbsp;output<br />
&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;case&nbsp;Integer&nbsp;=&gt;&nbsp;"Integer&nbsp;branch"<br />
&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;case&nbsp;String&nbsp;&nbsp;=&gt;&nbsp;"String&nbsp;branch"<br />
&nbsp;&nbsp;&nbsp;&nbsp;"Float&nbsp;branch"<br />
</div>



<p>This tries <span style="font-weight: bold;"> sayBranch</span> with an integer.
</p>



<div id="spadComm2-64" class="spadComm" >
<form id="formComm2-64" action="javascript:makeRequest('2-64');" >
<input id="comm2-64" type="text" class="command" style="width: 8em;" value="sayBranch 1" />
</form>
<span id="commSav2-64" class="commSav" >sayBranch 1</span>
<div id="mathAns2-64" ></div>
</div>




<div class="verbatim"><br />
Compiling&nbsp;function&nbsp;sayBranch&nbsp;with&nbsp;type&nbsp;Union(Integer,String,Float)<br />
&nbsp;&nbsp;&nbsp;&nbsp;-&gt;&nbsp;Void&nbsp;<br />
&nbsp;Integer&nbsp;branch<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>This tries <span style="font-weight: bold;"> sayBranch</span> with a string.
</p>



<div id="spadComm2-65" class="spadComm" >
<form id="formComm2-65" action="javascript:makeRequest('2-65');" >
<input id="comm2-65" type="text" class="command" style="width: 12em;" value='sayBranch "hello"' />
</form>
<span id="commSav2-65" class="commSav" >sayBranch "hello"</span>
<div id="mathAns2-65" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;String&nbsp;branch<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>This tries <span style="font-weight: bold;"> sayBranch</span> with a floating-point number.
</p>



<div id="spadComm2-66" class="spadComm" >
<form id="formComm2-66" action="javascript:makeRequest('2-66');" >
<input id="comm2-66" type="text" class="command" style="width: 14em;" value="sayBranch 2.718281828" />
</form>
<span id="commSav2-66" class="commSav" >sayBranch 2.718281828</span>
<div id="mathAns2-66" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Float&nbsp;branch<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>There are two things of interest about this particular
example to which we would like to draw your attention.
</p>



<ol>
<li>
 FriCAS normally converts a result to the target value
before passing it to the function.
If we left the declaration information out of this function definition
then the <span style="font-weight: bold;"> sayBranch</span> call would have been attempted with an
<span class="teletype">Integer</span> rather than a <span class="teletype">Union</span>, and an error would have
resulted.
</li>
<li> The types in a <span class="teletype">Union</span> are searched in the order given.
So if the type were given as


<span class="teletype">sayBranch(x: Union(String,Integer,Float,Any)): Void</span>

then the result would have been <span class="italic">String branch</span> because there
is a conversion from <span class="teletype">Integer</span> to <span class="teletype">String</span>.
</li>
</ol>



<p>Sometimes <span class="teletype">Union</span> types can have extremely long names.  FriCAS
therefore abbreviates the names of unions by printing the type of the
branch first within the <span class="teletype">Union</span> and then eliding the remaining
types with an ellipsis (<span class="teletype">...</span>).
</p>


<p>Here the <span class="teletype">Integer</span> branch is displayed first.  Use ``<span class="teletype">::</span>'' to
create a <span class="teletype">Union</span> object from an object.
</p>



<div id="spadComm2-67" class="spadComm" >
<form id="formComm2-67" action="javascript:makeRequest('2-67');" >
<input id="comm2-67" type="text" class="command" style="width: 18em;" value="78 :: Union(Integer,String)" />
</form>
<span id="commSav2-67" class="commSav" >78 :: Union(Integer,String)</span>
<div id="mathAns2-67" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>78</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union(Integer,...)
</div>



<p>Here the <span class="teletype">String</span> branch is displayed first.
</p>



<div id="spadComm2-68" class="spadComm" >
<form id="formComm2-68" action="javascript:makeRequest('2-68');" >
<input id="comm2-68" type="text" class="command" style="width: 26em;" value='s := "string" :: Union(Integer,String)' />
</form>
<span id="commSav2-68" class="commSav" >s := "string" :: Union(Integer,String)</span>
<div id="mathAns2-68" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"string"</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union(String,...)
</div>



<p>Use <span class="teletype">typeOf</span> to see the full and actual <span class="teletype">Union</span> type. <span class="index">typeOf</span><a name="chapter-2-34"/>
</p>



<div id="spadComm2-69" class="spadComm" >
<form id="formComm2-69" action="javascript:makeRequest('2-69');" >
<input id="comm2-69" type="text" class="command" style="width: 6em;" value="typeOf s" />
</form>
<span id="commSav2-69" class="commSav" >typeOf s</span>
<div id="mathAns2-69" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mi>Union</mi><mo>(</mo><mi>Integer</mi><mo>,</mo><mi>String</mi><mo>)</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Domain
</div>



<p>A common operation that returns a union is <span class="spadfunFrom" style="font-weight: bold;">exquo</span><span class="index">exquo</span><a name="chapter-2-35"/><span class="index">Integer</span><a name="chapter-2-36"/>
which returns the <span class="italic">exact quotient</span> if the quotient is exact,
</p>



<div id="spadComm2-70" class="spadComm" >
<form id="formComm2-70" action="javascript:makeRequest('2-70');" >
<input id="comm2-70" type="text" class="command" style="width: 13em;" value="three := exquo(6,2)" />
</form>
<span id="commSav2-70" class="commSav" >three := exquo(6,2)</span>
<div id="mathAns2-70" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>3</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union(Integer,...)
</div>



<p>and <span class="teletype">"failed"</span> if the quotient is not exact.
</p>



<div id="spadComm2-71" class="spadComm" >
<form id="formComm2-71" action="javascript:makeRequest('2-71');" >
<input id="comm2-71" type="text" class="command" style="width: 7em;" value="exquo(5,2)" />
</form>
<span id="commSav2-71" class="commSav" >exquo(5,2)</span>
<div id="mathAns2-71" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"failed"</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union("failed",...)
</div>



<p>A union with a <span class="teletype">"failed"</span> is frequently used to indicate the failure
or lack of applicability of an object.  As another example, assign an
integer a variable <math xmlns="&mathml;" mathsize="big"><mstyle><mi>r</mi></mstyle></math> declared to be a rational number.
</p>



<div id="spadComm2-72" class="spadComm" >
<form id="formComm2-72" action="javascript:makeRequest('2-72');" >
<input id="comm2-72" type="text" class="command" style="width: 11em;" value="r: FRAC INT := 3" />
</form>
<span id="commSav2-72" class="commSav" >r: FRAC INT := 3</span>
<div id="mathAns2-72" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>3</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Integer
</div>



<p>The operation <span class="spadfunFrom" style="font-weight: bold;">retractIfCan</span><span class="index">retractIfCan</span><a name="chapter-2-37"/><span class="index">Fraction</span><a name="chapter-2-38"/> tries to retract
the fraction to the underlying domain <span class="teletype">Integer</span>.  It produces a
union object.  Here it succeeds.
</p>



<div id="spadComm2-73" class="spadComm" >
<form id="formComm2-73" action="javascript:makeRequest('2-73');" >
<input id="comm2-73" type="text" class="command" style="width: 10em;" value="retractIfCan(r)" />
</form>
<span id="commSav2-73" class="commSav" >retractIfCan(r)</span>
<div id="mathAns2-73" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>3</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union(Integer,...)
</div>



<p>Assign it a rational number.
</p>



<div id="spadComm2-74" class="spadComm" >
<form id="formComm2-74" action="javascript:makeRequest('2-74');" >
<input id="comm2-74" type="text" class="command" style="width: 6em;" value="r := 3/2" />
</form>
<span id="commSav2-74" class="commSav" >r := 3/2</span>
<div id="mathAns2-74" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mfrac><mn>3</mn><mn>2</mn></mfrac></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Fraction Integer
</div>



<p>Here the retraction fails.
</p>



<div id="spadComm2-75" class="spadComm" >
<form id="formComm2-75" action="javascript:makeRequest('2-75');" >
<input id="comm2-75" type="text" class="command" style="width: 10em;" value="retractIfCan(r)" />
</form>
<span id="commSav2-75" class="commSav" >retractIfCan(r)</span>
<div id="mathAns2-75" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"failed"</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union("failed",...)
</div>





</div>



<a name="subsec-2.5.2"/>
<div class="subsection"  id="subsec-2.5.2">
<h3 class="subsectitle">2.5.2  Unions With Selectors</h3>


<a name="ugTypesUnionsWSel" class="label"/>


<p>Like records (<a href="section-2.4.xhtml#ugTypesRecords" class="ref" >ugTypesRecords</a> ),
you can write <span class="teletype">Union</span> types <span class="index">selector:union</span><a name="chapter-2-39"/> with selectors.
<span class="index">union:selector</span><a name="chapter-2-40"/>
</p>




<div class="boxed2">


<div class="boxed">



<p>The syntax for writing a <span class="teletype">Union</span> type with selectors is
</p>



<div class="center" style="text-align: center;">


<p><span class="teletype">Union(<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>selector</mtext></mrow><mn>1</mn></msub></mrow></mstyle></math>:<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>type</mtext></mrow><mn>1</mn></msub></mrow></mstyle></math>, 
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>selector</mtext></mrow><mn>2</mn></msub></mrow></mstyle></math>:<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>type</mtext></mrow><mn>2</mn></msub></mrow></mstyle></math>, ..., 
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>selector</mtext></mrow><mi>N</mi></msub></mrow></mstyle></math>:<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mrow><mtext mathvariant='sans-serif-italic'>type</mtext></mrow><mi>N</mi></msub></mrow></mstyle></math>)</span>
</p>



</div>


<p>You must be careful if a selector has the same name as a variable in
the workspace.  If this occurs, precede the selector name by a single
<span class="index">quote</span><a name="chapter-2-41"/> quote.  <span class="index">selector:quoting</span><a name="chapter-2-42"/> It is an error to use a
selector that does not correspond to the branch of the <span class="teletype">Union</span> in
which the element actually lies.  <br/>
</p>



</div>
</div>



<p>Be sure to understand the difference between records and unions with
selectors.  <span class="index">union:difference from record</span><a name="chapter-2-43"/> Records can have more
than one component and the selectors are used to refer to the
components.  <span class="index">record:difference from union</span><a name="chapter-2-44"/> Unions always have
one component but the type of that one component can vary.  An object
of type <span class="teletype">Record(a: Integer, b: Float, c: String)</span> contains an
integer <span class="italic">and</span> a float <span class="italic">and</span> a string.  An object of type 
<span class="teletype">Union(a: Integer, b: Float, c: String)</span> contains an integer 
<span class="italic">or</span> a float <span class="italic">or</span> a string.
</p>


<p>Here is a version of the <span style="font-weight: bold;"> sayBranch</span> function (cf.
<a href="section-2.5.xhtml#ugTypesUnionsWOSel" class="ref" >ugTypesUnionsWOSel</a> ) that
works with a union with selectors.  It displays a message stating in
which branch of the <span class="teletype">Union</span> the object lies.
</p>




<div class="verbatim"><br />
sayBranch(x:Union(i:Integer,s:String,f:Float)):Void==<br />
&nbsp;&nbsp;output<br />
&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;case&nbsp;i&nbsp;=&gt;&nbsp;"Integer&nbsp;branch"<br />
&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;case&nbsp;s&nbsp;&nbsp;=&gt;&nbsp;"String&nbsp;branch"<br />
&nbsp;&nbsp;&nbsp;&nbsp;"Float&nbsp;branch"<br />
</div>



<p>Note that <span class="teletype">case</span> uses the selector name as its right-hand argument.
<span class="index">case</span><a name="chapter-2-45"/> If you accidentally use the branch type on the right-hand
side of <span class="teletype">case</span>, <span class="teletype">false</span> will be returned.
</p>


<p>Declare variable <math xmlns="&mathml;" mathsize="big"><mstyle><mi>u</mi></mstyle></math> to have a union type with selectors.
</p>



<div id="spadComm2-76" class="spadComm" >
<form id="formComm2-76" action="javascript:makeRequest('2-76');" >
<input id="comm2-76" type="text" class="command" style="width: 23em;" value="u : Union(i : Integer, s : String)" />
</form>
<span id="commSav2-76" class="commSav" >u : Union(i : Integer, s : String)</span>
<div id="mathAns2-76" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>Give an initial value to <math xmlns="&mathml;" mathsize="big"><mstyle><mi>u</mi></mstyle></math>.
</p>



<div id="spadComm2-77" class="spadComm" >
<form id="formComm2-77" action="javascript:makeRequest('2-77');" >
<input id="comm2-77" type="text" class="command" style="width: 13em;" value='u := "good morning"' />
</form>
<span id="commSav2-77" class="commSav" >u := "good morning"</span>
<div id="mathAns2-77" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"goodmorning"</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Union(s: String,...)
</div>



<p>Use <math xmlns="&mathml;" mathsize="big"><mstyle><mi>case</mi></mstyle></math> to determine in which branch of a <span class="teletype">Union</span> an object lies.
</p>



<div id="spadComm2-78" class="spadComm" >
<form id="formComm2-78" action="javascript:makeRequest('2-78');" >
<input id="comm2-78" type="text" class="command" style="width: 6em;" value="u case i" />
</form>
<span id="commSav2-78" class="commSav" >u case i</span>
<div id="mathAns2-78" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>





<div id="spadComm2-79" class="spadComm" >
<form id="formComm2-79" action="javascript:makeRequest('2-79');" >
<input id="comm2-79" type="text" class="command" style="width: 6em;" value="u case s" />
</form>
<span id="commSav2-79" class="commSav" >u case s</span>
<div id="mathAns2-79" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>To access the element in a particular branch, use the selector.
</p>



<div id="spadComm2-80" class="spadComm" >
<form id="formComm2-80" action="javascript:makeRequest('2-80');" >
<input id="comm2-80" type="text" class="command" style="width: 2em;" value="u.s" />
</form>
<span id="commSav2-80" class="commSav" >u.s</span>
<div id="mathAns2-80" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext><mrow><mtext mathvariant='monospace'>"goodmorning"</mtext></mrow></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: String
</div>





</div>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-2.4.xhtml" style="margin-right: 10px;">Previous Section 2.4 Records</a><a href="section-2.6.xhtml" style="margin-right: 10px;">Next Section 2.6 The <span class="italic">Any</span> Domain</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>