<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section9.71</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-9.70.xhtml" style="margin-right: 10px;">Previous Section 9.70 SegmentBinding</a><a href="section-9.72.xhtml" style="margin-right: 10px;">Next Section 9.72 SingleInteger</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-9.71">
<h2 class="sectiontitle">9.71  Set</h2>


<a name="SetXmpPage" class="label"/>


<p>The <span class="teletype">Set</span> domain allows one to represent explicit finite sets of values.
These are similar to lists, but duplicate elements are not allowed.
</p>


<p>Sets can be created by giving a fixed set of values ...
</p>




<div id="spadComm9-17" class="spadComm" >
<form id="formComm9-17" action="javascript:makeRequest('9-17');" >
<input id="comm9-17" type="text" class="command" style="width: 23em;" value="s := set [x^2-1, y^2-1, z^2-1] " />
</form>
<span id="commSav9-17" class="commSav" >s := set [x^2-1, y^2-1, z^2-1] </span>
<div id="mathAns9-17" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>{</mo><mrow><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><mo>-</mo><mn>1</mn></mrow><mo>,</mo><mrow><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow><mo>-</mo><mn>1</mn></mrow><mo>,</mo><mrow><mrow><msup><mi>z</mi><mn>2</mn></msup></mrow><mo>-</mo><mn>1</mn></mrow><mo>}</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Set Polynomial Integer
</div>



<p>or by using a collect form, just as for lists.  In either case, the
set is formed from a finite collection of values.
</p>




<div id="spadComm9-18" class="spadComm" >
<form id="formComm9-18" action="javascript:makeRequest('9-18');" >
<input id="comm9-18" type="text" class="command" style="width: 32em;" value="t := set [x^i - i+1 for i in 2..10 | prime? i] " />
</form>
<span id="commSav9-18" class="commSav" >t := set [x^i - i+1 for i in 2..10 | prime? i] </span>
<div id="mathAns9-18" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>{</mo><mrow><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><mo>-</mo><mn>1</mn></mrow><mo>,</mo><mrow><mrow><msup><mi>x</mi><mn>3</mn></msup></mrow><mo>-</mo><mn>2</mn></mrow><mo>,</mo><mrow><mrow><msup><mi>x</mi><mn>5</mn></msup></mrow><mo>-</mo><mn>4</mn></mrow><mo>,</mo><mrow><mrow><msup><mi>x</mi><mn>7</mn></msup></mrow><mo>-</mo><mn>6</mn></mrow><mo>}</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Set Polynomial Integer
</div>



<p>The basic operations on sets are <span class="spadfunFrom" >intersect</span><span class="index">intersect</span><a name="chapter-9-12"/><span class="index">Set</span><a name="chapter-9-13"/>,
<span class="spadfunFrom" >union</span><span class="index">union</span><a name="chapter-9-14"/><span class="index">Set</span><a name="chapter-9-15"/>, <span class="spadfunFrom" >difference</span><span class="index">difference</span><a name="chapter-9-16"/><span class="index">Set</span><a name="chapter-9-17"/>, and
<span class="spadfunFrom" >symmetricDifference</span><span class="index">symmetricDifference</span><a name="chapter-9-18"/><span class="index">Set</span><a name="chapter-9-19"/>.
</p>




<div id="spadComm9-19" class="spadComm" >
<form id="formComm9-19" action="javascript:makeRequest('9-19');" >
<input id="comm9-19" type="text" class="command" style="width: 13em;" value="i := intersect(s,t)" />
</form>
<span id="commSav9-19" class="commSav" >i := intersect(s,t)</span>
<div id="mathAns9-19" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>{</mo><mrow><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><mo>-</mo><mn>1</mn></mrow><mo>}</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Set Polynomial Integer
</div>





<div id="spadComm9-20" class="spadComm" >
<form id="formComm9-20" action="javascript:makeRequest('9-20');" >
<input id="comm9-20" type="text" class="command" style="width: 10em;" value="u := union(s,t)" />
</form>
<span id="commSav9-20" class="commSav" >u := union(s,t)</span>
<div id="mathAns9-20" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>{</mo><mrow><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><mo>-</mo><mn>1</mn></mrow><mo>,</mo><mrow><mrow><msup><mi>x</mi><mn>3</mn></msup></mrow><mo>-</mo><mn>2</mn></mrow><mo>,</mo><mrow><mrow><msup><mi>x</mi><mn>5</mn></msup></mrow><mo>-</mo><mn>4</mn></mrow><mo>,</mo><mrow><mrow><msup><mi>x</mi><mn>7</mn></msup></mrow><mo>-</mo><mn>6</mn></mrow><mo>,</mo><mrow><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow><mo>-</mo><mn>1</mn></mrow><mo>,</mo><mrow><mrow><msup><mi>z</mi><mn>2</mn></msup></mrow><mo>-</mo><mn>1</mn></mrow><mo>}</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Set Polynomial Integer
</div>



<p>The set <span class="teletype">difference(s,t)</span> contains those members of <span class="teletype">s</span> which
are not in <span class="teletype">t</span>.
</p>




<div id="spadComm9-21" class="spadComm" >
<form id="formComm9-21" action="javascript:makeRequest('9-21');" >
<input id="comm9-21" type="text" class="command" style="width: 10em;" value="difference(s,t)" />
</form>
<span id="commSav9-21" class="commSav" >difference(s,t)</span>
<div id="mathAns9-21" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>{</mo><mrow><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow><mo>-</mo><mn>1</mn></mrow><mo>,</mo><mrow><mrow><msup><mi>z</mi><mn>2</mn></msup></mrow><mo>-</mo><mn>1</mn></mrow><mo>}</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Set Polynomial Integer
</div>



<p>The set <span class="teletype">symmetricDifference(s,t)</span> contains those elements which are
in <span class="teletype">s</span> or <span class="teletype">t</span> but not in both.
</p>




<div id="spadComm9-22" class="spadComm" >
<form id="formComm9-22" action="javascript:makeRequest('9-22');" >
<input id="comm9-22" type="text" class="command" style="width: 16em;" value="symmetricDifference(s,t)" />
</form>
<span id="commSav9-22" class="commSav" >symmetricDifference(s,t)</span>
<div id="mathAns9-22" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>{</mo><mrow><mrow><msup><mi>x</mi><mn>3</mn></msup></mrow><mo>-</mo><mn>2</mn></mrow><mo>,</mo><mrow><mrow><msup><mi>x</mi><mn>5</mn></msup></mrow><mo>-</mo><mn>4</mn></mrow><mo>,</mo><mrow><mrow><msup><mi>x</mi><mn>7</mn></msup></mrow><mo>-</mo><mn>6</mn></mrow><mo>,</mo><mrow><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow><mo>-</mo><mn>1</mn></mrow><mo>,</mo><mrow><mrow><msup><mi>z</mi><mn>2</mn></msup></mrow><mo>-</mo><mn>1</mn></mrow><mo>}</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Set Polynomial Integer
</div>



<p>Set membership is tested using the <span class="spadfunFrom" >member?</span><span class="index">member?</span><a name="chapter-9-20"/><span class="index">Set</span><a name="chapter-9-21"/> operation.
</p>




<div id="spadComm9-23" class="spadComm" >
<form id="formComm9-23" action="javascript:makeRequest('9-23');" >
<input id="comm9-23" type="text" class="command" style="width: 9em;" value="member?(y, s)" />
</form>
<span id="commSav9-23" class="commSav" >member?(y, s)</span>
<div id="mathAns9-23" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false<mspace width="0.5em"/></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>





<div id="spadComm9-24" class="spadComm" >
<form id="formComm9-24" action="javascript:makeRequest('9-24');" >
<input id="comm9-24" type="text" class="command" style="width: 16em;" value="member?((y+1)*(y-1), s)" />
</form>
<span id="commSav9-24" class="commSav" >member?((y+1)*(y-1), s)</span>
<div id="mathAns9-24" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true<mspace width="0.5em"/></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>The <span class="spadfunFrom" >subset?</span><span class="index">subset?</span><a name="chapter-9-22"/><span class="index">Set</span><a name="chapter-9-23"/> function determines whether one set is
a subset of another.
</p>




<div id="spadComm9-25" class="spadComm" >
<form id="formComm9-25" action="javascript:makeRequest('9-25');" >
<input id="comm9-25" type="text" class="command" style="width: 9em;" value="subset?(i, s)" />
</form>
<span id="commSav9-25" class="commSav" >subset?(i, s)</span>
<div id="mathAns9-25" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>true<mspace width="0.5em"/></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>





<div id="spadComm9-26" class="spadComm" >
<form id="formComm9-26" action="javascript:makeRequest('9-26');" >
<input id="comm9-26" type="text" class="command" style="width: 9em;" value="subset?(u, s)" />
</form>
<span id="commSav9-26" class="commSav" >subset?(u, s)</span>
<div id="mathAns9-26" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext mathvariant='monospace'>false<mspace width="0.5em"/></mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Boolean
</div>



<p>When the base type is finite, the absolute complement of a set is
defined.  This finds the set of all multiplicative generators of 
<span class="teletype">PrimeField 11</span>---the integers mod <span class="teletype">11.</span>
</p>




<div id="spadComm9-27" class="spadComm" >
<form id="formComm9-27" action="javascript:makeRequest('9-27');" >
<input id="comm9-27" type="text" class="command" style="width: 38em;" value="gs := set [g for i in 1..11 | primitive?(g := i::PF 11)] " />
</form>
<span id="commSav9-27" class="commSav" >gs := set [g for i in 1..11 | primitive?(g := i::PF 11)] </span>
<div id="mathAns9-27" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>{</mo><mn>2</mn><mo>,</mo><mn>6</mn><mo>,</mo><mn>7</mn><mo>,</mo><mn>8</mn><mo>}</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Set PrimeField 11
</div>



<p>The following values are not generators.
</p>




<div id="spadComm9-28" class="spadComm" >
<form id="formComm9-28" action="javascript:makeRequest('9-28');" >
<input id="comm9-28" type="text" class="command" style="width: 10em;" value="complement gs " />
</form>
<span id="commSav9-28" class="commSav" >complement gs </span>
<div id="mathAns9-28" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>{</mo><mn>1</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>10</mn><mo>,</mo><mn>0</mn><mo>}</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Set PrimeField 11
</div>



<p>Often the members of a set are computed individually; in addition,
values can be inserted or removed from a set over the course of a
computation.
</p>


<p>There are two ways to do this:
</p>




<div id="spadComm9-29" class="spadComm" >
<form id="formComm9-29" action="javascript:makeRequest('9-29');" >
<input id="comm9-29" type="text" class="command" style="width: 20em;" value="a := set [i^2 for i in 1..5] " />
</form>
<span id="commSav9-29" class="commSav" >a := set [i^2 for i in 1..5] </span>
<div id="mathAns9-29" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>{</mo><mn>1</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>16</mn><mo>,</mo><mn>25</mn><mo>}</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Set PositiveInteger
</div>



<p>One is to view a set as a data structure and to apply updating operations.
</p>




<div id="spadComm9-30" class="spadComm" >
<form id="formComm9-30" action="javascript:makeRequest('9-30');" >
<input id="comm9-30" type="text" class="command" style="width: 10em;" value="insert!(32, a) " />
</form>
<span id="commSav9-30" class="commSav" >insert!(32, a) </span>
<div id="mathAns9-30" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>{</mo><mn>1</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>16</mn><mo>,</mo><mn>25</mn><mo>,</mo><mn>32</mn><mo>}</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Set PositiveInteger
</div>





<div id="spadComm9-31" class="spadComm" >
<form id="formComm9-31" action="javascript:makeRequest('9-31');" >
<input id="comm9-31" type="text" class="command" style="width: 10em;" value="remove!(25, a) " />
</form>
<span id="commSav9-31" class="commSav" >remove!(25, a) </span>
<div id="mathAns9-31" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>{</mo><mn>1</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>16</mn><mo>,</mo><mn>32</mn><mo>}</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Set PositiveInteger
</div>





<div id="spadComm9-32" class="spadComm" >
<form id="formComm9-32" action="javascript:makeRequest('9-32');" >
<input id="comm9-32" type="text" class="command" style="width: 2em;" value="a " />
</form>
<span id="commSav9-32" class="commSav" >a </span>
<div id="mathAns9-32" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>{</mo><mn>1</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>16</mn><mo>,</mo><mn>32</mn><mo>}</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Set PositiveInteger
</div>



<p>The other way is to view a set as a mathematical entity and to
create new sets from old.
</p>




<div id="spadComm9-33" class="spadComm" >
<form id="formComm9-33" action="javascript:makeRequest('9-33');" >
<input id="comm9-33" type="text" class="command" style="width: 24em;" value="b := b0 := set [i^2 for i in 1..5] " />
</form>
<span id="commSav9-33" class="commSav" >b := b0 := set [i^2 for i in 1..5] </span>
<div id="mathAns9-33" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>{</mo><mn>1</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>16</mn><mo>,</mo><mn>25</mn><mo>}</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Set PositiveInteger
</div>





<div id="spadComm9-34" class="spadComm" >
<form id="formComm9-34" action="javascript:makeRequest('9-34');" >
<input id="comm9-34" type="text" class="command" style="width: 13em;" value="b := union(b, {32})" />
</form>
<span id="commSav9-34" class="commSav" >b := union(b, {32})</span>
<div id="mathAns9-34" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>{</mo><mn>1</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>16</mn><mo>,</mo><mn>25</mn><mo>,</mo><mn>32</mn><mo>}</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Set PositiveInteger
</div>





<div id="spadComm9-35" class="spadComm" >
<form id="formComm9-35" action="javascript:makeRequest('9-35');" >
<input id="comm9-35" type="text" class="command" style="width: 16em;" value="b := difference(b, {25})" />
</form>
<span id="commSav9-35" class="commSav" >b := difference(b, {25})</span>
<div id="mathAns9-35" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>{</mo><mn>1</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>16</mn><mo>,</mo><mn>32</mn><mo>}</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Set PositiveInteger
</div>





<div id="spadComm9-36" class="spadComm" >
<form id="formComm9-36" action="javascript:makeRequest('9-36');" >
<input id="comm9-36" type="text" class="command" style="width: 2em;" value="b0 " />
</form>
<span id="commSav9-36" class="commSav" >b0 </span>
<div id="mathAns9-36" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>{</mo><mn>1</mn><mo>,</mo><mn>4</mn><mo>,</mo><mn>9</mn><mo>,</mo><mn>16</mn><mo>,</mo><mn>25</mn><mo>}</mo></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Set PositiveInteger
</div>



<p>For more information about lists, see <a href="section-9.1.xhtml#AssociationListXmpPage" class="ref" >ListXmpPage</a> .
</p>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-9.70.xhtml" style="margin-right: 10px;">Previous Section 9.70 SegmentBinding</a><a href="section-9.72.xhtml" style="margin-right: 10px;">Next Section 9.72 SingleInteger</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>