<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section6.9</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-6.8.xhtml" style="margin-right: 10px;">Previous Section 6.8 Delayed Assignments vs. Functions with No Arguments</a><a href="section-6.10.xhtml" style="margin-right: 10px;">Next Section 6.10 Compiling vs. Interpreting</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-6.9">
<h2 class="sectiontitle">6.9  How FriCAS Determines What Function to Use</h2>


<a name="ugUserUse" class="label"/>


<p>What happens if you define a function that has the same name as a
library function?  Well, if your function has the same name and number
of arguments (we sometimes say <span class="italic">arity</span>) as another function in the
library, then your function covers up the library function.  If you
want then to call the library function, you will have to <span class="slant">package-call</span>
it.  FriCAS can use both the functions you write and those that come
from the library.  Let's do a simple example to illustrate this.
</p>


<p>Suppose you (wrongly!) define <span style="font-weight: bold;"> sin</span> in this way.
</p>



<div id="spadComm6-49" class="spadComm" >
<form id="formComm6-49" action="javascript:makeRequest('6-49');" >
<input id="comm6-49" type="text" class="command" style="width: 8em;" value="sin x == 1.0" />
</form>
<span id="commSav6-49" class="commSav" >sin x == 1.0</span>
<div id="mathAns6-49" ></div>
</div>




<div class="returnType">
Type: Void
</div>



<p>The value <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow></mstyle></math> is returned for any argument.
</p>



<div id="spadComm6-50" class="spadComm" >
<form id="formComm6-50" action="javascript:makeRequest('6-50');" >
<input id="comm6-50" type="text" class="command" style="width: 5em;" value="sin 4.3" />
</form>
<span id="commSav6-50" class="commSav" >sin 4.3</span>
<div id="mathAns6-50" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;sin&nbsp;with&nbsp;type&nbsp;Float&nbsp;-&gt;&nbsp;Float&nbsp;<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>1</mn><mo>.</mo><mn>0</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>



<p>If you want the library operation, we have to package-call it
(see <a href="section-2.9.xhtml#ugTypesPkgCall" class="ref" >ugTypesPkgCall</a> 
for more information).
</p>



<div id="spadComm6-51" class="spadComm" >
<form id="formComm6-51" action="javascript:makeRequest('6-51');" >
<input id="comm6-51" type="text" class="command" style="width: 10em;" value="sin(4.3) $Float" />
</form>
<span id="commSav6-51" class="commSav" >sin(4.3) $Float</span>
<div id="mathAns6-51" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mrow><mn>0</mn><mo>.</mo><mn>9161659367</mn><mn>4945498404</mn></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>





<div id="spadComm6-52" class="spadComm" >
<form id="formComm6-52" action="javascript:makeRequest('6-52');" >
<input id="comm6-52" type="text" class="command" style="width: 11em;" value="sin(34.6) $Float" />
</form>
<span id="commSav6-52" class="commSav" >sin(34.6) $Float</span>
<div id="mathAns6-52" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mrow><mn>0</mn><mo>.</mo><mn>0424680347</mn><mn>1695010154</mn><mn>3</mn></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>



<p>Even worse, say we accidentally used the same name as a library
function in the function.
</p>



<div id="spadComm6-53" class="spadComm" >
<form id="formComm6-53" action="javascript:makeRequest('6-53');" >
<input id="comm6-53" type="text" class="command" style="width: 10em;" value="sin x == sin x" />
</form>
<span id="commSav6-53" class="commSav" >sin x == sin x</span>
<div id="mathAns6-53" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiled&nbsp;code&nbsp;for&nbsp;sin&nbsp;has&nbsp;been&nbsp;cleared.<br />
&nbsp;&nbsp;&nbsp;1&nbsp;old&nbsp;definition(s)&nbsp;deleted&nbsp;for&nbsp;function&nbsp;or&nbsp;rule&nbsp;sin&nbsp;<br />
</div>




<div class="returnType">
Type: Void
</div>



<p>Then FriCAS definitely does not understand us.
</p>



<div id="spadComm6-54" class="spadComm" >
<form id="formComm6-54" action="javascript:makeRequest('6-54');" >
<input id="comm6-54" type="text" class="command" style="width: 5em;" value="sin 4.3" />
</form>
<span id="commSav6-54" class="commSav" >sin 4.3</span>
<div id="mathAns6-54" ></div>
</div>




<div class="verbatim"><br />
AXIOM&nbsp;cannot&nbsp;determine&nbsp;the&nbsp;type&nbsp;of&nbsp;sin&nbsp;because&nbsp;it&nbsp;cannot&nbsp;analyze&nbsp;<br />
&nbsp;&nbsp;&nbsp;the&nbsp;non-recursive&nbsp;part,&nbsp;if&nbsp;that&nbsp;exists.&nbsp;This&nbsp;may&nbsp;be&nbsp;remedied&nbsp;<br />
&nbsp;&nbsp;&nbsp;by&nbsp;declaring&nbsp;the&nbsp;function.<br />
</div>



<p>Again, we could package-call the inside function.
</p>



<div id="spadComm6-55" class="spadComm" >
<form id="formComm6-55" action="javascript:makeRequest('6-55');" >
<input id="comm6-55" type="text" class="command" style="width: 15em;" value="sin x == sin(x) $Float" />
</form>
<span id="commSav6-55" class="commSav" >sin x == sin(x) $Float</span>
<div id="mathAns6-55" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;1&nbsp;old&nbsp;definition(s)&nbsp;deleted&nbsp;for&nbsp;function&nbsp;or&nbsp;rule&nbsp;sin&nbsp;<br />
</div>




<div class="returnType">
Type: Void
</div>





<div id="spadComm6-56" class="spadComm" >
<form id="formComm6-56" action="javascript:makeRequest('6-56');" >
<input id="comm6-56" type="text" class="command" style="width: 5em;" value="sin 4.3" />
</form>
<span id="commSav6-56" class="commSav" >sin 4.3</span>
<div id="mathAns6-56" ></div>
</div>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;Compiling&nbsp;function&nbsp;sin&nbsp;with&nbsp;type&nbsp;Float&nbsp;-&gt;&nbsp;Float&nbsp;<br />
<br />
+++&nbsp;|*1;sin;1;G82322|&nbsp;redefined<br />
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mrow><mn>0</mn><mo>.</mo><mn>9161659367</mn><mn>4945498404</mn></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>



<p>Of course, you are unlikely to make such obvious errors.  It is more
probable that you would write a function and in the body use a
function that you think is a library function.  If you had also
written a function by that same name, the library function would be
invisible.
</p>


<p>How does FriCAS determine what library function to call?  It very much
depends on the particular example, but the simple case of creating the
polynomial <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>x</mi><mo>+</mo><mn>2</mn><mo>/</mo><mn>3</mn></mrow></mstyle></math> will give you an idea.
</p>



<ol>
<li>
 The <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> is analyzed and its default type is
<span class="teletype">Variable(x)</span>.
</li>
<li> The <math xmlns="&mathml;" mathsize="big"><mstyle><mn>2</mn></mstyle></math> is analyzed and its default type is
<span class="teletype">PositiveInteger</span>.
</li>
<li> The <math xmlns="&mathml;" mathsize="big"><mstyle><mn>3</mn></mstyle></math> is analyzed and its default type is
<span class="teletype">PositiveInteger</span>.
</li>
<li> Because the arguments to <span class="italic"><span class="teletype">/</span></span> are integers, FriCAS
gives the expression <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>2</mn><mo>/</mo><mn>3</mn></mrow></mstyle></math> a default target type of
<span class="teletype">Fraction(Integer)</span>.
</li>
<li> FriCAS looks in <span class="teletype">PositiveInteger</span> for <span class="italic"><span class="teletype">/</span></span>.
It is not found.
</li>
<li> FriCAS looks in <span class="teletype">Fraction(Integer)</span> for <span class="italic"><span class="teletype">/</span></span>.
It is found for arguments of type <span class="teletype">Integer</span>.
</li>
<li> The <math xmlns="&mathml;" mathsize="big"><mstyle><mn>2</mn></mstyle></math> and <math xmlns="&mathml;" mathsize="big"><mstyle><mn>3</mn></mstyle></math> are converted to objects of type
<span class="teletype">Integer</span> (this is trivial) and <span class="italic"><span class="teletype">/</span></span> is applied,
creating an object of type <span class="teletype">Fraction(Integer)</span>.
</li>
<li> No ``<span class="teletype">+</span>'' for arguments of types <span class="teletype">Variable(x)</span> and
<span class="teletype">Fraction(Integer)</span> are found in either domain.
</li>
<li> FriCAS resolves
<span class="index">resolve</span><a name="chapter-6-14"/>
(see <a href="section-2.10.xhtml#ugTypesResolve" class="ref" >ugTypesResolve</a> )
the types and gets <span class="teletype">Polynomial (Fraction (Integer))</span>.
</li>
<li> The <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> and the <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mn>2</mn><mo>/</mo><mn>3</mn></mrow></mstyle></math> are converted to objects of this
type and <span class="teletype">+</span> is applied, yielding the answer, an object of type
<span class="teletype">Polynomial (Fraction (Integer))</span>.
</li>
</ol>





</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-6.8.xhtml" style="margin-right: 10px;">Previous Section 6.8 Delayed Assignments vs. Functions with No Arguments</a><a href="section-6.10.xhtml" style="margin-right: 10px;">Next Section 6.10 Compiling vs. Interpreting</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>