<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section0.4</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-0.3.xhtml" style="margin-right: 10px;">Previous Section 0.3 Using FriCAS as a Pocket Calculator</a><a href="section-0.5.xhtml" style="margin-right: 10px;">Next Section 0.5 General Points about FriCAS</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-0.4">
<h2 class="sectiontitle">0.4  Using FriCAS as a Symbolic Calculator</h2>


<p>In the previous section all the examples involved numbers and simple
functions. Also none of the expressions entered were assigned to anything.
In this section we will move on to simple algebra (i.e. expressions involving
symbols and other features available on more sophisticated calculators).
</p>



<a name="subsec-0.4.1"/>
<div class="subsection"  id="subsec-0.4.1">
<h3 class="subsectitle">0.4.1  Expressions Involving Symbols</h3>


<p>Expressions involving symbols are entered just as they are written down,
for example:
</p>




<div id="spadComm0-50" class="spadComm" >
<form id="formComm0-50" action="javascript:makeRequest('0-50');" >
<input id="comm0-50" type="text" class="command" style="width: 11em;" value="xSquared := x^2" />
</form>
<span id="commSav0-50" class="commSav" >xSquared := x^2</span>
<div id="mathAns0-50" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Integer
</div>



<p>where the assignment operator ``:='' represents immediate assignment. Later
it will be seen that this form of assignment is not always desirable and
the use of the delayed assignment operator <span class="italic">==</span> will be introduced. The
type of the result is <span class="teletype">Polynomial Integer</span> which is used to represent
polynomials with integer coefficients. Some other examples along similar
lines are:
</p>




<div id="spadComm0-51" class="spadComm" >
<form id="formComm0-51" action="javascript:makeRequest('0-51');" >
<input id="comm0-51" type="text" class="command" style="width: 13em;" value="xDummy := 3.21*x^2" />
</form>
<span id="commSav0-51" class="commSav" >xDummy := 3.21*x^2</span>
<div id="mathAns0-51" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mo>.</mo><mn>21</mn></mrow><mspace width="0.5 em" /><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Float
</div>





<div id="spadComm0-52" class="spadComm" >
<form id="formComm0-52" action="javascript:makeRequest('0-52');" >
<input id="comm0-52" type="text" class="command" style="width: 11em;" value="xDummy := x^2.5" />
</form>
<span id="commSav0-52" class="commSav" >xDummy := x^2.5</span>
<div id="mathAns0-52" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><mspace width="0.5 em" /><mrow><msqrt><mi>x</mi></msqrt></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Expression Float
</div>





<div id="spadComm0-53" class="spadComm" >
<form id="formComm0-53" action="javascript:makeRequest('0-53');" >
<input id="comm0-53" type="text" class="command" style="width: 11em;" value="xDummy := x^3.3" />
</form>
<span id="commSav0-53" class="commSav" >xDummy := x^3.3</span>
<div id="mathAns0-53" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><msup><mi>x</mi><mn>3</mn></msup></mrow><mspace width="0.5 em" /><mrow><msup><mrow><mroot><mi>x</mi><mn>10</mn></mroot></mrow><mn>3</mn></msup></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Expression Float
</div>





<div id="spadComm0-54" class="spadComm" >
<form id="formComm0-54" action="javascript:makeRequest('0-54');" >
<input id="comm0-54" type="text" class="command" style="width: 15em;" value="xyDummy := x^2 - y^2" />
</form>
<span id="commSav0-54" class="commSav" >xyDummy := x^2 - y^2</span>
<div id="mathAns0-54" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow><mo>+</mo><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Integer
</div>



<p>Given that we can define expressions involving symbols, how do we actually
compute the result when the symbols are assigned values? The answer is to
use the <span style="font-weight: bold;"> eval</span> function which takes an expression as its first argument
followed by a list of assignments. For example, to evaluate the expressions
<span style="font-weight: bold;"> XDummy</span> and {xyDummy} resulting from their respective assignments above
we type:
</p>




<div id="spadComm0-55" class="spadComm" >
<form id="formComm0-55" action="javascript:makeRequest('0-55');" >
<input id="comm0-55" type="text" class="command" style="width: 11em;" value="eval(xDummy,x=3)" />
</form>
<span id="commSav0-55" class="commSav" >eval(xDummy,x=3)</span>
<div id="mathAns0-55" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>37</mn><mo>.</mo><mn>5405075985</mn><mn>29552193</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Expression Float
</div>





<div id="spadComm0-56" class="spadComm" >
<form id="formComm0-56" action="javascript:makeRequest('0-56');" >
<input id="comm0-56" type="text" class="command" style="width: 18em;" value="eval(xyDummy, [x=3, y=2.1])" />
</form>
<span id="commSav0-56" class="commSav" >eval(xyDummy, [x=3, y=2.1])</span>
<div id="mathAns0-56" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>4</mn><mo>.</mo><mn>59</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial Float
</div>





</div>



<a name="subsec-0.4.2"/>
<div class="subsection"  id="subsec-0.4.2">
<h3 class="subsectitle">0.4.2  Complex Numbers</h3>


<p>For many scientific calculations real numbers aren't sufficient and support
for complex numbers is also required. Complex numbers are handled in an
intuitive manner and FriCAS, which uses the <span style="font-weight: bold;"> %i</span> macro to represent
the square root of  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>-</mo><mn>1</mn></mrow></mstyle></math>. Thus expressions involving complex numbers are
entered just like other expressions.
</p>




<div id="spadComm0-57" class="spadComm" >
<form id="formComm0-57" action="javascript:makeRequest('0-57');" >
<input id="comm0-57" type="text" class="command" style="width: 10em;" value="(2/3 + %i)^3" />
</form>
<span id="commSav0-57" class="commSav" >(2/3 + %i)^3</span>
<div id="mathAns0-57" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mfrac><mn>46</mn><mn>27</mn></mfrac><mo>+</mo><mrow><mfrac><mn>1</mn><mn>3</mn></mfrac><mspace width="0.5 em" /><mi>i</mi></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Complex Fraction Integer
</div>



<p>The real and imaginary parts of a complex number can be extracted using 
the <span style="font-weight: bold;"> real</span> and <span style="font-weight: bold;"> imag</span> functions and the complex conjugate of a
number can be obtained using <span style="font-weight: bold;"> conjugate</span>:
</p>




<div id="spadComm0-58" class="spadComm" >
<form id="formComm0-58" action="javascript:makeRequest('0-58');" >
<input id="comm0-58" type="text" class="command" style="width: 10em;" value="real(3 + 2*%i)" />
</form>
<span id="commSav0-58" class="commSav" >real(3 + 2*%i)</span>
<div id="mathAns0-58" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>3</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm0-59" class="spadComm" >
<form id="formComm0-59" action="javascript:makeRequest('0-59');" >
<input id="comm0-59" type="text" class="command" style="width: 10em;" value="imag(3+ 2*%i)" />
</form>
<span id="commSav0-59" class="commSav" >imag(3+ 2*%i)</span>
<div id="mathAns0-59" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm0-60" class="spadComm" >
<form id="formComm0-60" action="javascript:makeRequest('0-60');" >
<input id="comm0-60" type="text" class="command" style="width: 14em;" value="conjugate(3 + 2*%i)" />
</form>
<span id="commSav0-60" class="commSav" >conjugate(3 + 2*%i)</span>
<div id="mathAns0-60" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>3</mn><mo>-</mo><mrow><mn>2</mn><mspace width="0.5 em" /><mi>i</mi></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Complex Integer
</div>



<p>The function <span style="font-weight: bold;"> factor</span> can also be applied to complex numbers but the
results aren't quite so obvious as for factoring integer:
</p>




<div id="spadComm0-61" class="spadComm" >
<form id="formComm0-61" action="javascript:makeRequest('0-61');" >
<input id="comm0-61" type="text" class="command" style="width: 8em;" value="144 + 24*%i" />
</form>
<span id="commSav0-61" class="commSav" >144 + 24*%i</span>
<div id="mathAns0-61" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>144</mn><mo>+</mo><mrow><mn>24</mn><mspace width="0.5 em" /><mi>i</mi></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Complex Integer
</div>





</div>



<a name="subsec-0.4.3"/>
<div class="subsection"  id="subsec-0.4.3">
<h3 class="subsectitle">0.4.3  Number Representations</h3>


<p>By default all numerical results are displayed in decimal with real numbers
shown to 20 significant figures. If the integer part of a number is longer
than 20 digits then nothing after the decimal point is shown and the integer
part is given in full. To alter the number of digits shown the function
<span style="font-weight: bold;"> digits</span> can be called. The result returned by this function is the
previous setting. For example, to find the value of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>&#x03C0;</mi></mstyle></math> to 40 digits
we type:
</p>




<div id="spadComm0-62" class="spadComm" >
<form id="formComm0-62" action="javascript:makeRequest('0-62');" >
<input id="comm0-62" type="text" class="command" style="width: 7em;" value="digits(40)" />
</form>
<span id="commSav0-62" class="commSav" >digits(40)</span>
<div id="mathAns0-62" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>20</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm0-63" class="spadComm" >
<form id="formComm0-63" action="javascript:makeRequest('0-63');" >
<input id="comm0-63" type="text" class="command" style="width: 8em;" value="%pi::Float" />
</form>
<span id="commSav0-63" class="commSav" >%pi::Float</span>
<div id="mathAns0-63" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>3</mn><mo>.</mo><mn>1415926535</mn><mspace width="0.5 em" /><mn>8979323846</mn><mspace width="0.5 em" /><mn>2643383279</mn><mspace width="0.5 em" /><mn>502884197</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>



<p>As can be seen in the example above, there is a gap after every ten digits.
This can be changed using the <span style="font-weight: bold;"> outputSpacing</span> function where the argument
is the number of digits to be displayed before a space is inserted. If no
spaces are desired then use the value  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>0</mn></mstyle></math>. Two other functions controlling
the appearance of real numbers are <span style="font-weight: bold;"> outputFloating</span> and <span style="font-weight: bold;"> outputFixed</span>.
The former causes FriCAS to display floating-point values in exponent notation
and the latter causes it to use fixed-point notation. For example:
</p>




<div id="spadComm0-64" class="spadComm" >
<form id="formComm0-64" action="javascript:makeRequest('0-64');" >
<input id="comm0-64" type="text" class="command" style="width: 14em;" value="outputFloating(); %" />
</form>
<span id="commSav0-64" class="commSav" >outputFloating(); %</span>
<div id="mathAns0-64" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>0</mn><mo>.</mo><mn>3141592653</mn><mn>5897932384</mn><mn>6264338327</mn><mn>9502884197</mn><mi>E</mi><mn>1</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>





<div id="spadComm0-65" class="spadComm" >
<form id="formComm0-65" action="javascript:makeRequest('0-65');" >
<input id="comm0-65" type="text" class="command" style="width: 18em;" value="outputFloating(3); 0.00345" />
</form>
<span id="commSav0-65" class="commSav" >outputFloating(3); 0.00345</span>
<div id="mathAns0-65" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>0</mn><mo>.</mo><mn>345</mn><mi>E</mi><mo>-</mo><mn>2</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>





<div id="spadComm0-66" class="spadComm" >
<form id="formComm0-66" action="javascript:makeRequest('0-66');" >
<input id="comm0-66" type="text" class="command" style="width: 12em;" value="outputFixed(); %" />
</form>
<span id="commSav0-66" class="commSav" >outputFixed(); %</span>
<div id="mathAns0-66" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>0</mn><mo>.</mo><mn>00345</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>





<div id="spadComm0-67" class="spadComm" >
<form id="formComm0-67" action="javascript:makeRequest('0-67');" >
<input id="comm0-67" type="text" class="command" style="width: 12em;" value="outputFixed(3); %" />
</form>
<span id="commSav0-67" class="commSav" >outputFixed(3); %</span>
<div id="mathAns0-67" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>0</mn><mo>.</mo><mn>003</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>





<div id="spadComm0-68" class="spadComm" >
<form id="formComm0-68" action="javascript:makeRequest('0-68');" >
<input id="comm0-68" type="text" class="command" style="width: 13em;" value="outputGeneral(); %" />
</form>
<span id="commSav0-68" class="commSav" >outputGeneral(); %</span>
<div id="mathAns0-68" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>0</mn><mo>.</mo><mn>00345</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Float
</div>



<p>Note that the semicolon <span class="italic">;</span> in the examples above allows several
expressions to be entered on one line. The result of the last expression
is displayed. remember also that the percent symbol ``%'' is used to
represent the result of a previous calculation.
</p>


<p>To display rational numbers in a base other than 10 the function <span style="font-weight: bold;"> radix</span>
is used. The first argument of this function is the expression to be 
displayed and the second is the base to be used.
</p>




<div id="spadComm0-69" class="spadComm" >
<form id="formComm0-69" action="javascript:makeRequest('0-69');" >
<input id="comm0-69" type="text" class="command" style="width: 11em;" value="radix(10^10,32)" />
</form>
<span id="commSav0-69" class="commSav" >radix(10^10,32)</span>
<div id="mathAns0-69" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mtext>9A0NP00</mtext></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: RadixExpansion 32
</div>





<div id="spadComm0-70" class="spadComm" >
<form id="formComm0-70" action="javascript:makeRequest('0-70');" >
<input id="comm0-70" type="text" class="command" style="width: 9em;" value="radix(3/21,5)" />
</form>
<span id="commSav0-70" class="commSav" >radix(3/21,5)</span>
<div id="mathAns0-70" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="http://www.w3.org/1998/Math/MathML" mathsize="big" display="block">
<mn>0</mn><mi>.</mi><mrow><mover accent='true'><mrow><mrow><mn>0</mn><mn>3</mn><mn>2</mn><mn>4</mn><mn>1</mn><mn>2</mn></mrow></mrow><mo stretchy='true'>&OverBar;</mo></mover></mrow>
</math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: RadixExpansion 5
</div>



<p>Rational numbers can be represented as a repeated decimal expansion using
the <span style="font-weight: bold;"> decimal</span> function or as a continued fraction using 
<span style="font-weight: bold;"> continuedFraction</span>. Any attempt to call these functions with irrational
values will fail.
</p>




<div id="spadComm0-71" class="spadComm" >
<form id="formComm0-71" action="javascript:makeRequest('0-71');" >
<input id="comm0-71" type="text" class="command" style="width: 9em;" value="decimal(22/7)" />
</form>
<span id="commSav0-71" class="commSav" >decimal(22/7)</span>
<div id="mathAns0-71" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" class="block"><mstyle><mrow><mn>3</mn><mo>.</mo><mrow><mover accent="true"><mrow><mn>142857</mn></mrow><mo stretchy="true">&OverBar;</mo></mover></mrow></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: DecimalExpansion
</div>





<div id="spadComm0-72" class="spadComm" >
<form id="formComm0-72" action="javascript:makeRequest('0-72');" >
<input id="comm0-72" type="text" class="command" style="width: 18em;" value="continuedFraction(6543/210)" />
</form>
<span id="commSav0-72" class="commSav" >continuedFraction(6543/210)</span>
<div id="mathAns0-72" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="http://www.w3.org/1998/Math/MathML" mathsize="big" display="block">
<mrow><mrow><mn>31</mn></mrow><mo>+</mo><mfrac><mn>1</mn><mrow><mn><mn>6</mn></mn><mo>+</mo><mfrac><mn>1</mn><mrow><mn><mn>2</mn></mn><mo>+</mo><mfrac><mn>1</mn><mrow><mn><mn>1</mn></mn><mo>+</mo><mfrac><mn>1</mn><mn>3</mn></mfrac></mrow></mfrac></mrow></mfrac></mrow></mfrac></mrow>
</math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: ContinuedFraction Integer
</div>



<p>Finally, partial fractions in compact and expanded form are available via the
functions <span style="font-weight: bold;"> partialFraction</span> and <span style="font-weight: bold;"> padicFraction</span> respectively. The
former takes two arguments, the first being the numerator of the fraction
and the second being the denominator. The latter function takes a fraction
and expands it further while the function <span style="font-weight: bold;"> compactFraction</span> does the
reverse:
</p>




<div id="spadComm0-73" class="spadComm" >
<form id="formComm0-73" action="javascript:makeRequest('0-73');" >
<input id="comm0-73" type="text" class="command" style="width: 16em;" value="partialFraction(234,40)" />
</form>
<span id="commSav0-73" class="commSav" >partialFraction(234,40)</span>
<div id="mathAns0-73" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>6</mn><mo>-</mo><mfrac><mn>3</mn><mrow><msup><mn>2</mn><mn>2</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mn>3</mn><mn>5</mn></mfrac></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PartialFraction Integer
</div>





<div id="spadComm0-74" class="spadComm" >
<form id="formComm0-74" action="javascript:makeRequest('0-74');" >
<input id="comm0-74" type="text" class="command" style="width: 12em;" value="padicFraction(%)" />
</form>
<span id="commSav0-74" class="commSav" >padicFraction(%)</span>
<div id="mathAns0-74" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>6</mn><mo>-</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo>-</mo><mfrac><mn>1</mn><mrow><msup><mn>2</mn><mn>2</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mn>3</mn><mn>5</mn></mfrac></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PartialFraction Integer
</div>





<div id="spadComm0-75" class="spadComm" >
<form id="formComm0-75" action="javascript:makeRequest('0-75');" >
<input id="comm0-75" type="text" class="command" style="width: 13em;" value="compactFraction(%)" />
</form>
<span id="commSav0-75" class="commSav" >compactFraction(%)</span>
<div id="mathAns0-75" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>6</mn><mo>-</mo><mfrac><mn>3</mn><mrow><msup><mn>2</mn><mn>2</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mn>3</mn><mn>5</mn></mfrac></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PartialFraction Integer
</div>





<div id="spadComm0-76" class="spadComm" >
<form id="formComm0-76" action="javascript:makeRequest('0-76');" >
<input id="comm0-76" type="text" class="command" style="width: 14em;" value="padicFraction(234/40)" />
</form>
<span id="commSav0-76" class="commSav" >padicFraction(234/40)</span>
<div id="mathAns0-76" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mfrac><mn>117</mn><mn>20</mn></mfrac></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PartialFraction Fraction Integer
</div>



<p>To extract parts of a partial fraction the function <span style="font-weight: bold;"> nthFractionalTerm</span>
is available and returns a partial fraction of one term. To decompose this
further the numerator can be obtained using <span style="font-weight: bold;"> firstNumer</span> and the 
denominator with <span style="font-weight: bold;"> firstDenom</span>. The whole part of a partial fraction can
be retrieved using <span style="font-weight: bold;"> wholePart</span> and the number of fractional parts can
be found using the function <span style="font-weight: bold;"> numberOf FractionalTerms</span>:
</p>




<div id="spadComm0-77" class="spadComm" >
<form id="formComm0-77" action="javascript:makeRequest('0-77');" >
<input id="comm0-77" type="text" class="command" style="width: 19em;" value="t := partialFraction(234,40)" />
</form>
<span id="commSav0-77" class="commSav" >t := partialFraction(234,40)</span>
<div id="mathAns0-77" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mn>6</mn><mo>-</mo><mfrac><mn>3</mn><mrow><msup><mn>2</mn><mn>2</mn></msup></mrow></mfrac><mo>+</mo><mfrac><mn>3</mn><mn>5</mn></mfrac></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PartialFraction Integer
</div>





<div id="spadComm0-78" class="spadComm" >
<form id="formComm0-78" action="javascript:makeRequest('0-78');" >
<input id="comm0-78" type="text" class="command" style="width: 8em;" value="wholePart(t)" />
</form>
<span id="commSav0-78" class="commSav" >wholePart(t)</span>
<div id="mathAns0-78" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>6</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm0-79" class="spadComm" >
<form id="formComm0-79" action="javascript:makeRequest('0-79');" >
<input id="comm0-79" type="text" class="command" style="width: 18em;" value="numberOfFractionalTerms(t)" />
</form>
<span id="commSav0-79" class="commSav" >numberOfFractionalTerms(t)</span>
<div id="mathAns0-79" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PositiveInteger
</div>





<div id="spadComm0-80" class="spadComm" >
<form id="formComm0-80" action="javascript:makeRequest('0-80');" >
<input id="comm0-80" type="text" class="command" style="width: 18em;" value="p := nthFractionalTerm(t,1)" />
</form>
<span id="commSav0-80" class="commSav" >p := nthFractionalTerm(t,1)</span>
<div id="mathAns0-80" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mfrac><mn>3</mn><mrow><msup><mn>2</mn><mn>2</mn></msup></mrow></mfrac></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PartialFraction Integer
</div>





<div id="spadComm0-81" class="spadComm" >
<form id="formComm0-81" action="javascript:makeRequest('0-81');" >
<input id="comm0-81" type="text" class="command" style="width: 9em;" value="firstNumer(p)" />
</form>
<span id="commSav0-81" class="commSav" >firstNumer(p)</span>
<div id="mathAns0-81" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mo>-</mo><mn>3</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Integer
</div>





<div id="spadComm0-82" class="spadComm" >
<form id="formComm0-82" action="javascript:makeRequest('0-82');" >
<input id="comm0-82" type="text" class="command" style="width: 9em;" value="firstDenom(p)" />
</form>
<span id="commSav0-82" class="commSav" >firstDenom(p)</span>
<div id="mathAns0-82" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><msup><mn>2</mn><mn>2</mn></msup></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Factored Integer
</div>





</div>



<a name="subsec-0.4.4"/>
<div class="subsection"  id="subsec-0.4.4">
<h3 class="subsectitle">0.4.4  Modular Arithmetic</h3>


<p>By using the type constructor <span class="teletype">PrimeField</span> it is possible to do 
arithmetic modulo some prime number. For example, arithmetic module  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>7</mn></mstyle></math>
can be performed as follows:
</p>




<div id="spadComm0-83" class="spadComm" >
<form id="formComm0-83" action="javascript:makeRequest('0-83');" >
<input id="comm0-83" type="text" class="command" style="width: 14em;" value="x : PrimeField 7 := 5" />
</form>
<span id="commSav0-83" class="commSav" >x : PrimeField 7 := 5</span>
<div id="mathAns0-83" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>5</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PrimeField 7
</div>





<div id="spadComm0-84" class="spadComm" >
<form id="formComm0-84" action="javascript:makeRequest('0-84');" >
<input id="comm0-84" type="text" class="command" style="width: 6em;" value="x^5 + 6" />
</form>
<span id="commSav0-84" class="commSav" >x^5 + 6</span>
<div id="mathAns0-84" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>2</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PrimeField 7
</div>





<div id="spadComm0-85" class="spadComm" >
<form id="formComm0-85" action="javascript:makeRequest('0-85');" >
<input id="comm0-85" type="text" class="command" style="width: 2em;" value="1/x" />
</form>
<span id="commSav0-85" class="commSav" >1/x</span>
<div id="mathAns0-85" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>3</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: PrimeField 7
</div>



<p>The first example should be read as:
</p>



<div class="center" style="text-align: center;">


<p><span class="teletype">Let  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> be of type PrimeField(7) and assign to it the value  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>5</mn></mstyle></math></span>
</p>



</div>



<p>Note that it is only possible to invert non-zero values if the arithmetic
is performed modulo a prime number. Thus arithmetic modulo a non-prime
integer is possible but the reciprocal operation is undefined and will
generate an error. Attempting to use the <span class="teletype">PrimeField</span> type constructor
with a non-prime argument will generate an error. An example of non-prime
modulo arithmetic is:
</p>




<div id="spadComm0-86" class="spadComm" >
<form id="formComm0-86" action="javascript:makeRequest('0-86');" >
<input id="comm0-86" type="text" class="command" style="width: 15em;" value="y : IntegerMod 8 := 11" />
</form>
<span id="commSav0-86" class="commSav" >y : IntegerMod 8 := 11</span>
<div id="mathAns0-86" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>3</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: IntegerMod 8
</div>





<div id="spadComm0-87" class="spadComm" >
<form id="formComm0-87" action="javascript:makeRequest('0-87');" >
<input id="comm0-87" type="text" class="command" style="width: 6em;" value="y*4 + 27" />
</form>
<span id="commSav0-87" class="commSav" >y*4 + 27</span>
<div id="mathAns0-87" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mn>7</mn></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: IntegerMod 8
</div>



<p>Note that polynomials can be constructed in a similar way:
</p>




<div id="spadComm0-88" class="spadComm" >
<form id="formComm0-88" action="javascript:makeRequest('0-88');" >
<input id="comm0-88" type="text" class="command" style="width: 30em;" value="(3*a^4 + 27*a - 36)::Polynomial PrimeField 7" />
</form>
<span id="commSav0-88" class="commSav" >(3*a^4 + 27*a - 36)::Polynomial PrimeField 7</span>
<div id="mathAns0-88" ></div>
</div>


<div class="math">
<table>
<tr><td>
<math xmlns="&mathml;" mathsize="big" display="block"><mstyle><mrow><mrow><mn>3</mn><mspace width="0.5 em" /><mrow><msup><mi>a</mi><mn>4</mn></msup></mrow></mrow><mo>+</mo><mrow><mn>6</mn><mspace width="0.5 em" /><mi>a</mi></mrow><mo>+</mo><mn>6</mn></mrow></mstyle></math>
</td></tr>
</table>
</div>




<div class="returnType">
Type: Polynomial PrimeField 7
</div>





</div>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-0.3.xhtml" style="margin-right: 10px;">Previous Section 0.3 Using FriCAS as a Pocket Calculator</a><a href="section-0.5.xhtml" style="margin-right: 10px;">Next Section 0.5 General Points about FriCAS</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>