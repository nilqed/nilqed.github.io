<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section11.8</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-11.7.xhtml" style="margin-right: 10px;">Previous Section 11.7 Parameters</a><a href="section-11.9.xhtml" style="margin-right: 10px;">Next Section 11.9 Testing</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-11.8">
<h2 class="sectiontitle">11.8  Conditionals</h2>


<a name="ugPackagesConds" class="label"/>



<p>When packages have parameters, you can say that an operation is or is not
<span class="index">conditional</span><a name="chapter-11-14"/>
exported depending on the values of those parameters.
When the domain of objects <math xmlns="&mathml;" mathsize="big"><mstyle><mi>S</mi></mstyle></math> has an <span class="teletype">&lt;</span>
operation, we can supply one-argument versions of
<math xmlns="&mathml;" mathsize="big"><mstyle><mi>bubbleSort</mi></mstyle></math> and <math xmlns="&mathml;" mathsize="big"><mstyle><mi>insertionSort</mi></mstyle></math> which use this operation
for sorting.
The presence of the
operation <span class="teletype">&lt;</span> is guaranteed when <math xmlns="&mathml;" mathsize="big"><mstyle><mi>S</mi></mstyle></math> is an ordered set.
</p>




<div class="verbatim"><br />
Exports&nbsp;==&nbsp;with<br />
&nbsp;&nbsp;&nbsp;&nbsp;bubbleSort!:&nbsp;(A,(S,S)&nbsp;-&gt;&nbsp;Boolean)&nbsp;-&gt;&nbsp;A<br />
&nbsp;&nbsp;&nbsp;&nbsp;insertionSort!:&nbsp;(A,&nbsp;(S,S)&nbsp;-&gt;&nbsp;Boolean)&nbsp;-&gt;&nbsp;A<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;S&nbsp;has&nbsp;OrderedSet&nbsp;then<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bubbleSort!:&nbsp;A&nbsp;-&gt;&nbsp;A<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insertionSort!:&nbsp;A&nbsp;-&gt;&nbsp;A<br />
</div>



<p>In addition to exporting the one-argument sort operations
<span class="index">sort:bubble</span><a name="chapter-11-15"/>
conditionally, we must provide conditional definitions for the
<span class="index">sort:insertion</span><a name="chapter-11-16"/>
operations in the <span class="teletype">Implementation</span> part.
This is easy: just have the one-argument functions call the
corresponding two-argument functions with the operation
<span class="teletype">&lt;</span> from <math xmlns="&mathml;" mathsize="big"><mstyle><mi>S</mi></mstyle></math>.
</p>




<div class="verbatim"><br />
&nbsp;&nbsp;Implementation&nbsp;==&nbsp;add<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br />
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;S&nbsp;has&nbsp;OrderedSet&nbsp;then<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bubbleSort!(m)&nbsp;==&nbsp;bubbleSort!(m,&lt;&nbsp;$S)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insertionSort!(m)&nbsp;==&nbsp;insertionSort!(m,&lt;&nbsp;$S)<br />
</div>



<p>In <a href="section-6.15.xhtml#ugUserBlocks" class="ref" >ugUserBlocks</a> , 
we give an alternative definition of
<span style="font-weight: bold;"> bubbleSort</span> using <span class="spadfunFrom" >first</span><span class="index">first</span><a name="chapter-11-17"/><span class="index">List</span><a name="chapter-11-18"/> and
<span class="spadfunFrom" >rest</span><span class="index">rest</span><a name="chapter-11-19"/><span class="index">List</span><a name="chapter-11-20"/> that is more efficient for a list (for
which access to any element requires traversing the list from its
first node).
To implement a more efficient algorithm for lists, we need the
operation <span style="font-weight: bold;"> setelt</span> which allows us to destructively change
the <span style="font-weight: bold;"> first</span> and <span style="font-weight: bold;"> rest</span> of a list.
Using Browse, you find that these operations come from category
<span class="teletype">UnaryRecursiveAggregate</span>.
Several aggregate types are unary recursive aggregates including
those of <span class="teletype">List</span> and <span class="teletype">AssociationList</span>.
We provide two different implementations for
<span style="font-weight: bold;"> bubbleSort!</span> and <span style="font-weight: bold;"> insertionSort!</span>: one
for list-like structures, another for array-like structures.
</p>




<div class="verbatim"><br />
Implementation&nbsp;==&nbsp;add<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br />
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;A&nbsp;has&nbsp;UnaryRecursiveAggregate(S)&nbsp;then<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bubbleSort!(m,fn)&nbsp;==<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;empty?&nbsp;m&nbsp;=&gt;&nbsp;m<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l&nbsp;:=&nbsp;m<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;not&nbsp;empty?&nbsp;(r&nbsp;:=&nbsp;l.rest)&nbsp;repeat<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;:=&nbsp;bubbleSort!&nbsp;r<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;:=&nbsp;l.first<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;fn(r.first,x)&nbsp;then<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l.first&nbsp;:=&nbsp;r.first<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r.first&nbsp;:=&nbsp;x<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l.rest&nbsp;:=&nbsp;r<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l&nbsp;:=&nbsp;l.rest<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insertionSort!(m,fn)&nbsp;==<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br />
</div>



<p>The ordering of definitions is important.
The standard definitions come first and
then the predicate
</p>



<div class="verbatim"><br />
A&nbsp;has&nbsp;UnaryRecursiveAggregate(S)<br />
</div>


<p>is evaluated.
If <span class="teletype">true</span>, the special definitions cover up the standard ones.
</p>


<p>Another equivalent way to write the capsule is to use an
<math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>if</mi><mo>-</mo><mi>then</mi><mo>-</mo><mi>else</mi></mrow></mstyle></math> expression:
<span class="index">if</span><a name="chapter-11-21"/>
</p>




<div class="verbatim"><br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;A&nbsp;has&nbsp;UnaryRecursiveAggregate(S)&nbsp;then<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br />
</div>





</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-11.7.xhtml" style="margin-right: 10px;">Previous Section 11.7 Parameters</a><a href="section-11.9.xhtml" style="margin-right: 10px;">Next Section 11.9 Testing</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>