<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd" [
<!ENTITY mathml "http://www.w3.org/1998/Math/MathML">
]>

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xlink="http://www.w3.org/1999/xlink" >


  <head>
    <title>Section10.1</title>
    <link rel="stylesheet" type="text/css" href="graphicstyle.css" />
    <script type="text/javascript" src="bookax1.js" />
  </head>

  <body>
<a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a><a href="section-10.0.xhtml" style="margin-right: 10px;">Previous Section 10.0 Interactive Programming</a><a href="section-10.2.xhtml" style="margin-right: 10px;">Next Section 10.2 A Ribbon Program</a>
<a href="book-index.xhtml">Book Index</a><div class="section"  id="sec-10.1">
<h2 class="sectiontitle">10.1  Drawing Ribbons Interactively</h2>


<a name="ugIntProgDrawing" class="label"/>


<p>We begin our discussion of interactive graphics with the creation
of a useful facility: plotting ribbons of two-graphs in
three-space.
Suppose you want to draw the two-dimensional graphs of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>n</mi></mstyle></math>
functions  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>f</mi><mi>i</mi></msub><mo>(</mo><mi>x</mi><mo>)</mo><mo>,</mo><mn>1</mn><mo>&#x2264;</mo><mi>i</mi><mo>&#x2264;</mo><mi>n</mi><mo>,</mo></mrow></mstyle></math> all over some fixed range of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math>.
One approach is to create a two-dimensional graph for each one, then
superpose one on top of the other.
What you will more than likely get is a jumbled mess.
Even if you make each function a different color, the result is
likely to be confusing.
</p>


<p>A better approach is to display each of the  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>f</mi><mi>i</mi></msub><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mstyle></math> in three
<span class="index">ribbon</span><a name="chapter-10-0"/>
dimensions as a <span class="italic">ribbon</span> of some appropriate width along the
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math>-direction, laying down each  ribbon next to the
previous one.
A ribbon is simply a function of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math> depending
only on  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math>.
</p>


<p>We illustrate this for  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msub><mi>f</mi><mi>i</mi></msub><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mstyle></math> defined as simple powers of
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> for  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> ranging between  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>-</mo><mn>1</mn></mrow></mstyle></math> and  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math>.
</p>



<p>Draw the ribbon for  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>z</mi><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></mstyle></math>.
</p>




<div class="spadgraph" style="width: 13em">
draw(x^2,x=-1..1,y=0..1)
</div>



<div class="image">
<img src="ps/ribbon1.png" alt="picture" />
</div>

<p>Now that was easy!
What you get is a <span class="italic">wire-mesh</span> rendition of the ribbon.
That's fine for now.
Notice that the mesh-size is small in both the  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>x</mi></mstyle></math> and the
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math> directions.
FriCAS normally computes points in both these directions.
This is unnecessary.
One step is all we need in the  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math>-direction.
To have FriCAS economize on  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math>-points, we re-draw the
ribbon with option  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>var2Steps</mi><mo>=</mo><mo>=</mo><mn>1</mn></mrow></mstyle></math>.
</p>


<p>Re-draw the ribbon, but with option  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>var2Steps</mi><mo>=</mo><mo>=</mo><mn>1</mn></mrow></mstyle></math>
so that only  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math> step is computed in the
 <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math> direction.
</p>




<div class="spadgraph" style="width: 23em">
vp := draw(x^2,x=-1..1,y=0..1,var2Steps==1) 
</div>



<div class="image">
<img src="ps/ribbon2.png" alt="picture" />
</div>

<p>The operation has created a viewport, that is, a graphics window
on your screen.
We assigned the viewport to  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>vp</mi></mstyle></math> and now we manipulate
its contents.
</p>



<p>Graphs are objects, like numbers and algebraic expressions.
You may want to do some experimenting with graphs.
For example, say
</p>



<div class="verbatim"><br />
showRegion(vp,&nbsp;"on")<br />
</div>


<p>to put a bounding box around the ribbon.
Try it!
Issue  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>rotate</mi><mo>(</mo><mi>vp</mi><mo>,</mo><mo>-</mo><mn>45</mn><mo>,</mo><mn>90</mn><mo>)</mo></mrow></mstyle></math> to rotate the
figure  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mo>-</mo><mn>45</mn></mrow></mstyle></math> longitudinal degrees and  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>90</mn></mstyle></math> latitudinal
degrees.
</p>


<p>Here is a different rotation.
This turns the graph so you can view it along the  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math>-axis.
</p>




<div id="spadComm10-1" class="spadComm" >
<form id="formComm10-1" action="javascript:makeRequest('10-1');" >
<input id="comm10-1" type="text" class="command" style="width: 12em;" value="rotate(vp, 0, -90)" />
</form>
<span id="commSav10-1" class="commSav" >rotate(vp, 0, -90)</span>
<div id="mathAns10-1" ></div>
</div>



<div class="image">
<img src="ps/ribbon2r.png" alt="picture" />
</div>


<p>There are many other things you can do.
In fact, most everything you can do interactively using the
three-dimensional control panel (such as translating, zooming, resizing,
coloring, perspective and lighting selections) can also be done
directly by operations (see Chapter 
<a href="section-7.0.xhtml#ugGraph" class="ref" >ugGraph</a>  for more details).
</p>


<p>When you are done experimenting, say  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>reset</mi><mo>(</mo><mi>vp</mi><mo>)</mo></mrow></mstyle></math> to restore the
picture to its original position and settings.
</p>



<p>Let's add another ribbon to our picture---one
for  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mi>x</mi><mn>3</mn></msup></mrow></mstyle></math>.
Since  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math> ranges from  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>0</mn></mstyle></math> to  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math> for the
first ribbon, now let  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>y</mi></mstyle></math> range from  <math xmlns="&mathml;" mathsize="big"><mstyle><mn>1</mn></mstyle></math> to
 <math xmlns="&mathml;" mathsize="big"><mstyle><mn>2</mn></mstyle></math>.
This puts the second ribbon next to the first one.
</p>


<p>How do you add a second ribbon to the viewport?
One method is
to extract the <span class="italic">space</span> component from the
viewport using the operation
<span class="spadfunFrom" >subspace</span><span class="index">subspace</span><a name="chapter-10-1"/><span class="index">ThreeDimensionalViewport</span><a name="chapter-10-2"/>.
You can think of the space component as the object inside the
window (here, the ribbon).
Let's call it  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>sp</mi></mstyle></math>.
To add the second ribbon, you draw the second ribbon using the
option  <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><mi>space</mi><mo>=</mo><mo>=</mo><mi>sp</mi></mrow></mstyle></math>.
</p>


<p>Extract the space component of  <math xmlns="&mathml;" mathsize="big"><mstyle><mi>vp</mi></mstyle></math>.
</p>




<div id="spadComm10-2" class="spadComm" >
<form id="formComm10-2" action="javascript:makeRequest('10-2');" >
<input id="comm10-2" type="text" class="command" style="width: 12em;" value="sp := subspace(vp)" />
</form>
<span id="commSav10-2" class="commSav" >sp := subspace(vp)</span>
<div id="mathAns10-2" ></div>
</div>



<p>Add the ribbon for
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mi>x</mi><mn>3</mn></msup></mrow></mstyle></math> alongside that for
 <math xmlns="&mathml;" mathsize="big"><mstyle><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow></mstyle></math>.
</p>




<div class="spadgraph" style="width: 28em">
vp := draw(x^3,x=-1..1,y=1..2,var2Steps==1, space==sp)
</div>



<div class="image">
<img src="ps/ribbons.png" alt="picture" />
</div>

<p>Unless you moved the original viewport, the new viewport covers
the old one.
You might want to check that the old object is still there by
moving the top window.
</p>


<p>Let's show quadrilateral polygon outlines on the ribbons and then
enclose the ribbons in a box.
</p>


<p>Show quadrilateral polygon outlines.
</p>




<div id="spadComm10-3" class="spadComm" >
<form id="formComm10-3" action="javascript:makeRequest('10-3');" >
<input id="comm10-3" type="text" class="command" style="width: 30em;" value='drawStyle(vp,"shade");outlineRender(vp,"on")' />
</form>
<span id="commSav10-3" class="commSav" >drawStyle(vp,"shade");outlineRender(vp,"on")</span>
<div id="mathAns10-3" ></div>
</div>



<div class="image">
<img src="ps/ribbons2.png" alt="picture" />
</div>

<p>Enclose the ribbons in a box.
</p>




<div id="spadComm10-4" class="spadComm" >
<form id="formComm10-4" action="javascript:makeRequest('10-4');" >
<input id="comm10-4" type="text" class="command" style="width: 26em;" value='rotate(vp,20,-60); showRegion(vp,"on")' />
</form>
<span id="commSav10-4" class="commSav" >rotate(vp,20,-60); showRegion(vp,"on")</span>
<div id="mathAns10-4" ></div>
</div>



<div class="image">
<img src="ps/ribbons2b.png" alt="picture" />
</div>

<p>This process has become tedious!
If we had to add two or three more ribbons, we would have to
repeat the above steps several more times.
It is time to write an interpreter program to help us take care of
the details.
</p>




</div><a href="book-contents.xhtml" style="margin-right: 10px;">Book Contents</a>
<a href="section-10.0.xhtml" style="margin-right: 10px;">Previous Section 10.0 Interactive Programming</a><a href="section-10.2.xhtml" style="margin-right: 10px;">Next Section 10.2 A Ribbon Program</a>
<a href="book-index.xhtml">Book Index</a></body>
</html>